/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const __HV_X86_RIP: u32 = 0;
pub const __HV_X86_RFLAGS: u32 = 1;
pub const __HV_X86_RAX: u32 = 2;
pub const __HV_X86_RCX: u32 = 3;
pub const __HV_X86_RDX: u32 = 4;
pub const __HV_X86_RBX: u32 = 5;
pub const __HV_X86_RSI: u32 = 6;
pub const __HV_X86_RDI: u32 = 7;
pub const __HV_X86_RSP: u32 = 8;
pub const __HV_X86_RBP: u32 = 9;
pub const __HV_X86_R8: u32 = 10;
pub const __HV_X86_R9: u32 = 11;
pub const __HV_X86_R10: u32 = 12;
pub const __HV_X86_R11: u32 = 13;
pub const __HV_X86_R12: u32 = 14;
pub const __HV_X86_R13: u32 = 15;
pub const __HV_X86_R14: u32 = 16;
pub const __HV_X86_R15: u32 = 17;
pub const __HV_X86_CS: u32 = 18;
pub const __HV_X86_SS: u32 = 19;
pub const __HV_X86_DS: u32 = 20;
pub const __HV_X86_ES: u32 = 21;
pub const __HV_X86_FS: u32 = 22;
pub const __HV_X86_GS: u32 = 23;
pub const __HV_X86_IDT_BASE: u32 = 24;
pub const __HV_X86_IDT_LIMIT: u32 = 25;
pub const __HV_X86_GDT_BASE: u32 = 26;
pub const __HV_X86_GDT_LIMIT: u32 = 27;
pub const __HV_X86_LDTR: u32 = 28;
pub const __HV_X86_LDT_BASE: u32 = 29;
pub const __HV_X86_LDT_LIMIT: u32 = 30;
pub const __HV_X86_LDT_AR: u32 = 31;
pub const __HV_X86_TR: u32 = 32;
pub const __HV_X86_TSS_BASE: u32 = 33;
pub const __HV_X86_TSS_LIMIT: u32 = 34;
pub const __HV_X86_TSS_AR: u32 = 35;
pub const __HV_X86_CR0: u32 = 36;
pub const __HV_X86_CR1: u32 = 37;
pub const __HV_X86_CR2: u32 = 38;
pub const __HV_X86_CR3: u32 = 39;
pub const __HV_X86_CR4: u32 = 40;
pub const __HV_X86_DR0: u32 = 41;
pub const __HV_X86_DR1: u32 = 42;
pub const __HV_X86_DR2: u32 = 43;
pub const __HV_X86_DR3: u32 = 44;
pub const __HV_X86_DR4: u32 = 45;
pub const __HV_X86_DR5: u32 = 46;
pub const __HV_X86_DR6: u32 = 47;
pub const __HV_X86_DR7: u32 = 48;
pub const __HV_X86_TPR: u32 = 49;
pub const __HV_X86_XCR0: u32 = 50;
pub const __HV_X86_REGISTERS_MAX: u32 = 51;
pub const KERN_SUCCESS: u32 = 0;
pub const KERN_INVALID_ADDRESS: u32 = 1;
pub const KERN_PROTECTION_FAILURE: u32 = 2;
pub const KERN_NO_SPACE: u32 = 3;
pub const KERN_INVALID_ARGUMENT: u32 = 4;
pub const KERN_FAILURE: u32 = 5;
pub const KERN_RESOURCE_SHORTAGE: u32 = 6;
pub const KERN_NOT_RECEIVER: u32 = 7;
pub const KERN_NO_ACCESS: u32 = 8;
pub const KERN_MEMORY_FAILURE: u32 = 9;
pub const KERN_MEMORY_ERROR: u32 = 10;
pub const KERN_ALREADY_IN_SET: u32 = 11;
pub const KERN_NOT_IN_SET: u32 = 12;
pub const KERN_NAME_EXISTS: u32 = 13;
pub const KERN_ABORTED: u32 = 14;
pub const KERN_INVALID_NAME: u32 = 15;
pub const KERN_INVALID_TASK: u32 = 16;
pub const KERN_INVALID_RIGHT: u32 = 17;
pub const KERN_INVALID_VALUE: u32 = 18;
pub const KERN_UREFS_OVERFLOW: u32 = 19;
pub const KERN_INVALID_CAPABILITY: u32 = 20;
pub const KERN_RIGHT_EXISTS: u32 = 21;
pub const KERN_INVALID_HOST: u32 = 22;
pub const KERN_MEMORY_PRESENT: u32 = 23;
pub const KERN_MEMORY_DATA_MOVED: u32 = 24;
pub const KERN_MEMORY_RESTART_COPY: u32 = 25;
pub const KERN_INVALID_PROCESSOR_SET: u32 = 26;
pub const KERN_POLICY_LIMIT: u32 = 27;
pub const KERN_INVALID_POLICY: u32 = 28;
pub const KERN_INVALID_OBJECT: u32 = 29;
pub const KERN_ALREADY_WAITING: u32 = 30;
pub const KERN_DEFAULT_SET: u32 = 31;
pub const KERN_EXCEPTION_PROTECTED: u32 = 32;
pub const KERN_INVALID_LEDGER: u32 = 33;
pub const KERN_INVALID_MEMORY_CONTROL: u32 = 34;
pub const KERN_INVALID_SECURITY: u32 = 35;
pub const KERN_NOT_DEPRESSED: u32 = 36;
pub const KERN_TERMINATED: u32 = 37;
pub const KERN_LOCK_SET_DESTROYED: u32 = 38;
pub const KERN_LOCK_UNSTABLE: u32 = 39;
pub const KERN_LOCK_OWNED: u32 = 40;
pub const KERN_LOCK_OWNED_SELF: u32 = 41;
pub const KERN_SEMAPHORE_DESTROYED: u32 = 42;
pub const KERN_RPC_SERVER_TERMINATED: u32 = 43;
pub const KERN_RPC_TERMINATE_ORPHAN: u32 = 44;
pub const KERN_RPC_CONTINUE_ORPHAN: u32 = 45;
pub const KERN_NOT_SUPPORTED: u32 = 46;
pub const KERN_NODE_DOWN: u32 = 47;
pub const KERN_NOT_WAITING: u32 = 48;
pub const KERN_OPERATION_TIMED_OUT: u32 = 49;
pub const KERN_CODESIGN_ERROR: u32 = 50;
pub const KERN_POLICY_STATIC: u32 = 51;
pub const KERN_INSUFFICIENT_BUFFER_SIZE: u32 = 52;
pub const KERN_DENIED: u32 = 53;
pub const KERN_MISSING_KC: u32 = 54;
pub const KERN_INVALID_KC: u32 = 55;
pub const KERN_NOT_FOUND: u32 = 56;
pub const KERN_RETURN_MAX: u32 = 256;
pub const code_emask: u32 = 16383;
pub const err_max_system: u32 = 63;
pub const HV_APIC_STATE_EXT_VER: u32 = 100;
pub const HV_ATPIC_STATE_EXT_VER: u32 = 100;
pub const HV_IOAPIC_STATE_EXT_VER: u32 = 100;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const MACH_PORT_NULL: u32 = 0;
pub const MACH_PORT_TYPE_DNREQUEST: u32 = 2147483648;
pub const MACH_PORT_TYPE_SPREQUEST: u32 = 1073741824;
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED: u32 = 536870912;
pub const MACH_PORT_SRIGHTS_NONE: u32 = 0;
pub const MACH_PORT_SRIGHTS_PRESENT: u32 = 1;
pub const MACH_PORT_QLIMIT_ZERO: u32 = 0;
pub const MACH_PORT_QLIMIT_BASIC: u32 = 5;
pub const MACH_PORT_QLIMIT_SMALL: u32 = 16;
pub const MACH_PORT_QLIMIT_LARGE: u32 = 1024;
pub const MACH_PORT_QLIMIT_KERNEL: u32 = 65534;
pub const MACH_PORT_QLIMIT_MIN: u32 = 0;
pub const MACH_PORT_QLIMIT_DEFAULT: u32 = 5;
pub const MACH_PORT_QLIMIT_MAX: u32 = 1024;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER: u32 = 1;
pub const MACH_PORT_STATUS_FLAG_GUARDED: u32 = 2;
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD: u32 = 4;
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION: u32 = 8;
pub const MACH_PORT_STATUS_FLAG_REVIVE: u32 = 16;
pub const MACH_PORT_STATUS_FLAG_TASKPTR: u32 = 32;
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE: u32 = 64;
pub const MACH_PORT_STATUS_FLAG_NO_GRANT: u32 = 128;
pub const MACH_PORT_LIMITS_INFO: u32 = 1;
pub const MACH_PORT_RECEIVE_STATUS: u32 = 2;
pub const MACH_PORT_DNREQUESTS_SIZE: u32 = 3;
pub const MACH_PORT_TEMPOWNER: u32 = 4;
pub const MACH_PORT_IMPORTANCE_RECEIVER: u32 = 5;
pub const MACH_PORT_DENAP_RECEIVER: u32 = 6;
pub const MACH_PORT_INFO_EXT: u32 = 7;
pub const MACH_PORT_GUARD_INFO: u32 = 8;
pub const MACH_PORT_SERVICE_THROTTLED: u32 = 9;
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT: u32 = 1;
pub const MACH_PORT_SERVICE_THROTTLED_COUNT: u32 = 1;
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN: u32 = 255;
pub const MPO_CONTEXT_AS_GUARD: u32 = 1;
pub const MPO_QLIMIT: u32 = 2;
pub const MPO_TEMPOWNER: u32 = 4;
pub const MPO_IMPORTANCE_RECEIVER: u32 = 8;
pub const MPO_INSERT_SEND_RIGHT: u32 = 16;
pub const MPO_STRICT: u32 = 32;
pub const MPO_DENAP_RECEIVER: u32 = 64;
pub const MPO_IMMOVABLE_RECEIVE: u32 = 128;
pub const MPO_FILTER_MSG: u32 = 256;
pub const MPO_TG_BLOCK_TRACKING: u32 = 512;
pub const MPO_SERVICE_PORT: u32 = 1024;
pub const MPO_CONNECTION_PORT: u32 = 2048;
pub const MPO_REPLY_PORT: u32 = 4096;
pub const MPO_ENFORCE_REPLY_PORT_SEMANTICS: u32 = 8192;
pub const MPO_PROVISIONAL_REPLY_PORT: u32 = 16384;
pub const MPO_PROVISIONAL_ID_PROT_OPTOUT: u32 = 32768;
pub const GUARD_TYPE_MACH_PORT: u32 = 1;
pub const MAX_FATAL_kGUARD_EXC_CODE: u32 = 128;
pub const MPG_FLAGS_NONE: u32 = 0;
pub const MAX_OPTIONAL_kGUARD_EXC_CODE: u32 = 524288;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP: u64 = 72057594037927936;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT: u64 = 144115188075855872;
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER: u64 = 288230376151711744;
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR: u64 = 576460752303423488;
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA: u64 = 1152921504606846976;
pub const MPG_FLAGS_STRICT_REPLY_MASK: i64 = -72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC: u64 = 72057594037927936;
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY: u64 = 144115188075855872;
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN: u64 = 288230376151711744;
pub const MPG_FLAGS_IMMOVABLE_PINNED: u64 = 72057594037927936;
pub const MPG_STRICT: u32 = 1;
pub const MPG_IMMOVABLE_RECEIVE: u32 = 2;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const MACH_MSGH_BITS_ZERO: u32 = 0;
pub const MACH_MSGH_BITS_REMOTE_MASK: u32 = 31;
pub const MACH_MSGH_BITS_LOCAL_MASK: u32 = 7936;
pub const MACH_MSGH_BITS_VOUCHER_MASK: u32 = 2031616;
pub const MACH_MSGH_BITS_PORTS_MASK: u32 = 2039583;
pub const MACH_MSGH_BITS_COMPLEX: u32 = 2147483648;
pub const MACH_MSGH_BITS_USER: u32 = 2149523231;
pub const MACH_MSGH_BITS_RAISEIMP: u32 = 536870912;
pub const MACH_MSGH_BITS_DENAP: u32 = 536870912;
pub const MACH_MSGH_BITS_IMPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_DENAPHOLDASRT: u32 = 268435456;
pub const MACH_MSGH_BITS_CIRCULAR: u32 = 268435456;
pub const MACH_MSGH_BITS_USED: u32 = 2954829599;
pub const MACH_MSG_TYPE_MOVE_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_MOVE_SEND: u32 = 17;
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_COPY_SEND: u32 = 19;
pub const MACH_MSG_TYPE_MAKE_SEND: u32 = 20;
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE: u32 = 21;
pub const MACH_MSG_TYPE_COPY_RECEIVE: u32 = 22;
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE: u32 = 24;
pub const MACH_MSG_TYPE_DISPOSE_SEND: u32 = 25;
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE: u32 = 26;
pub const MACH_MSG_PHYSICAL_COPY: u32 = 0;
pub const MACH_MSG_VIRTUAL_COPY: u32 = 1;
pub const MACH_MSG_ALLOCATE: u32 = 2;
pub const MACH_MSG_OVERWRITE: u32 = 3;
pub const MACH_MSG_GUARD_FLAGS_NONE: u32 = 0;
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE: u32 = 1;
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND: u32 = 2;
pub const MACH_MSG_GUARD_FLAGS_MASK: u32 = 3;
pub const MACH_MSG_PORT_DESCRIPTOR: u32 = 0;
pub const MACH_MSG_OOL_DESCRIPTOR: u32 = 1;
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR: u32 = 2;
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR: u32 = 3;
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR: u32 = 4;
pub const MACH_MSG_DESCRIPTOR_MAX: u32 = 4;
pub const MACH_MSG_TRAILER_FORMAT_0: u32 = 0;
pub const MACH_MSGH_KIND_NORMAL: u32 = 0;
pub const MACH_MSGH_KIND_NOTIFICATION: u32 = 1;
pub const MACH_MSG_TYPE_PORT_NONE: u32 = 0;
pub const MACH_MSG_TYPE_PORT_NAME: u32 = 15;
pub const MACH_MSG_TYPE_PORT_RECEIVE: u32 = 16;
pub const MACH_MSG_TYPE_PORT_SEND: u32 = 17;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE: u32 = 18;
pub const MACH_MSG_TYPE_LAST: u32 = 22;
pub const MACH_MSG_OPTION_NONE: u32 = 0;
pub const MACH_SEND_MSG: u32 = 1;
pub const MACH_RCV_MSG: u32 = 2;
pub const MACH_RCV_LARGE: u32 = 4;
pub const MACH_RCV_LARGE_IDENTITY: u32 = 8;
pub const MACH_SEND_TIMEOUT: u32 = 16;
pub const MACH_SEND_OVERRIDE: u32 = 32;
pub const MACH_SEND_INTERRUPT: u32 = 64;
pub const MACH_SEND_NOTIFY: u32 = 128;
pub const MACH_SEND_ALWAYS: u32 = 65536;
pub const MACH_SEND_FILTER_NONFATAL: u32 = 65536;
pub const MACH_SEND_TRAILER: u32 = 131072;
pub const MACH_SEND_NOIMPORTANCE: u32 = 262144;
pub const MACH_SEND_NODENAP: u32 = 262144;
pub const MACH_SEND_IMPORTANCE: u32 = 524288;
pub const MACH_SEND_SYNC_OVERRIDE: u32 = 1048576;
pub const MACH_SEND_PROPAGATE_QOS: u32 = 2097152;
pub const MACH_SEND_SYNC_USE_THRPRI: u32 = 2097152;
pub const MACH_SEND_KERNEL: u32 = 4194304;
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN: u32 = 8388608;
pub const MACH_RCV_TIMEOUT: u32 = 256;
pub const MACH_RCV_NOTIFY: u32 = 0;
pub const MACH_RCV_INTERRUPT: u32 = 1024;
pub const MACH_RCV_VOUCHER: u32 = 2048;
pub const MACH_RCV_OVERWRITE: u32 = 0;
pub const MACH_RCV_GUARDED_DESC: u32 = 4096;
pub const MACH_RCV_SYNC_WAIT: u32 = 16384;
pub const MACH_RCV_SYNC_PEEK: u32 = 32768;
pub const MACH_MSG_STRICT_REPLY: u32 = 512;
pub const MACH_RCV_TRAILER_NULL: u32 = 0;
pub const MACH_RCV_TRAILER_SEQNO: u32 = 1;
pub const MACH_RCV_TRAILER_SENDER: u32 = 2;
pub const MACH_RCV_TRAILER_AUDIT: u32 = 3;
pub const MACH_RCV_TRAILER_CTX: u32 = 4;
pub const MACH_RCV_TRAILER_AV: u32 = 7;
pub const MACH_RCV_TRAILER_LABELS: u32 = 8;
pub const MACH_RCV_TRAILER_MASK: u32 = 251658240;
pub const MACH_MSG_SUCCESS: u32 = 0;
pub const MACH_MSG_MASK: u32 = 15872;
pub const MACH_MSG_IPC_SPACE: u32 = 8192;
pub const MACH_MSG_VM_SPACE: u32 = 4096;
pub const MACH_MSG_IPC_KERNEL: u32 = 2048;
pub const MACH_MSG_VM_KERNEL: u32 = 1024;
pub const MACH_SEND_IN_PROGRESS: u32 = 268435457;
pub const MACH_SEND_INVALID_DATA: u32 = 268435458;
pub const MACH_SEND_INVALID_DEST: u32 = 268435459;
pub const MACH_SEND_TIMED_OUT: u32 = 268435460;
pub const MACH_SEND_INVALID_VOUCHER: u32 = 268435461;
pub const MACH_SEND_INTERRUPTED: u32 = 268435463;
pub const MACH_SEND_MSG_TOO_SMALL: u32 = 268435464;
pub const MACH_SEND_INVALID_REPLY: u32 = 268435465;
pub const MACH_SEND_INVALID_RIGHT: u32 = 268435466;
pub const MACH_SEND_INVALID_NOTIFY: u32 = 268435467;
pub const MACH_SEND_INVALID_MEMORY: u32 = 268435468;
pub const MACH_SEND_NO_BUFFER: u32 = 268435469;
pub const MACH_SEND_TOO_LARGE: u32 = 268435470;
pub const MACH_SEND_INVALID_TYPE: u32 = 268435471;
pub const MACH_SEND_INVALID_HEADER: u32 = 268435472;
pub const MACH_SEND_INVALID_TRAILER: u32 = 268435473;
pub const MACH_SEND_INVALID_CONTEXT: u32 = 268435474;
pub const MACH_SEND_INVALID_OPTIONS: u32 = 268435475;
pub const MACH_SEND_INVALID_RT_OOL_SIZE: u32 = 268435477;
pub const MACH_SEND_NO_GRANT_DEST: u32 = 268435478;
pub const MACH_SEND_MSG_FILTERED: u32 = 268435479;
pub const MACH_SEND_AUX_TOO_SMALL: u32 = 268435480;
pub const MACH_SEND_AUX_TOO_LARGE: u32 = 268435481;
pub const MACH_RCV_IN_PROGRESS: u32 = 268451841;
pub const MACH_RCV_INVALID_NAME: u32 = 268451842;
pub const MACH_RCV_TIMED_OUT: u32 = 268451843;
pub const MACH_RCV_TOO_LARGE: u32 = 268451844;
pub const MACH_RCV_INTERRUPTED: u32 = 268451845;
pub const MACH_RCV_PORT_CHANGED: u32 = 268451846;
pub const MACH_RCV_INVALID_NOTIFY: u32 = 268451847;
pub const MACH_RCV_INVALID_DATA: u32 = 268451848;
pub const MACH_RCV_PORT_DIED: u32 = 268451849;
pub const MACH_RCV_IN_SET: u32 = 268451850;
pub const MACH_RCV_HEADER_ERROR: u32 = 268451851;
pub const MACH_RCV_BODY_ERROR: u32 = 268451852;
pub const MACH_RCV_INVALID_TYPE: u32 = 268451853;
pub const MACH_RCV_SCATTER_SMALL: u32 = 268451854;
pub const MACH_RCV_INVALID_TRAILER: u32 = 268451855;
pub const MACH_RCV_IN_PROGRESS_TIMED: u32 = 268451857;
pub const MACH_RCV_INVALID_REPLY: u32 = 268451858;
pub const MACH_RCV_INVALID_ARGUMENTS: u32 = 268451859;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const NDR_PROTOCOL_2_0: u32 = 0;
pub const NDR_INT_BIG_ENDIAN: u32 = 0;
pub const NDR_INT_LITTLE_ENDIAN: u32 = 1;
pub const NDR_FLOAT_IEEE: u32 = 0;
pub const NDR_FLOAT_VAX: u32 = 1;
pub const NDR_FLOAT_CRAY: u32 = 2;
pub const NDR_FLOAT_IBM: u32 = 3;
pub const NDR_CHAR_ASCII: u32 = 0;
pub const NDR_CHAR_EBCDIC: u32 = 1;
pub const __NDR_convert__: u32 = 0;
pub const __NDR_convert__int_rep__: u32 = 0;
pub const __NDR_convert__char_rep__: u32 = 0;
pub const __NDR_convert__float_rep__: u32 = 0;
pub const MACH_NOTIFY_FIRST: u32 = 64;
pub const MACH_NOTIFY_PORT_DELETED: u32 = 65;
pub const MACH_NOTIFY_SEND_POSSIBLE: u32 = 66;
pub const MACH_NOTIFY_PORT_DESTROYED: u32 = 69;
pub const MACH_NOTIFY_NO_SENDERS: u32 = 70;
pub const MACH_NOTIFY_SEND_ONCE: u32 = 71;
pub const MACH_NOTIFY_DEAD_NAME: u32 = 72;
pub const MACH_NOTIFY_LAST: u32 = 77;
pub const VM_PAGE_QUERY_PAGE_PRESENT: u32 = 1;
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS: u32 = 2;
pub const VM_PAGE_QUERY_PAGE_REF: u32 = 4;
pub const VM_PAGE_QUERY_PAGE_DIRTY: u32 = 8;
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT: u32 = 16;
pub const VM_PAGE_QUERY_PAGE_COPIED: u32 = 32;
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE: u32 = 64;
pub const VM_PAGE_QUERY_PAGE_EXTERNAL: u32 = 128;
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED: u32 = 256;
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED: u32 = 512;
pub const VM_PAGE_QUERY_PAGE_CS_NX: u32 = 1024;
pub const VM_PAGE_QUERY_PAGE_REUSABLE: u32 = 2048;
pub const VM_FLAGS_FIXED: u32 = 0;
pub const VM_FLAGS_ANYWHERE: u32 = 1;
pub const VM_FLAGS_PURGABLE: u32 = 2;
pub const VM_FLAGS_4GB_CHUNK: u32 = 4;
pub const VM_FLAGS_RANDOM_ADDR: u32 = 8;
pub const VM_FLAGS_NO_CACHE: u32 = 16;
pub const VM_FLAGS_RESILIENT_CODESIGN: u32 = 32;
pub const VM_FLAGS_RESILIENT_MEDIA: u32 = 64;
pub const VM_FLAGS_PERMANENT: u32 = 128;
pub const VM_FLAGS_TPRO: u32 = 4096;
pub const VM_FLAGS_OVERWRITE: u32 = 16384;
pub const VM_FLAGS_SUPERPAGE_MASK: u32 = 458752;
pub const VM_FLAGS_RETURN_DATA_ADDR: u32 = 1048576;
pub const VM_FLAGS_RETURN_4K_DATA_ADDR: u32 = 8388608;
pub const VM_FLAGS_ALIAS_MASK: u32 = 4278190080;
pub const VM_FLAGS_HW: u32 = 4096;
pub const VM_FLAGS_USER_ALLOCATE: u32 = 4278669471;
pub const VM_FLAGS_USER_MAP: u32 = 4288106655;
pub const VM_FLAGS_USER_REMAP: u32 = 1065065;
pub const VM_FLAGS_SUPERPAGE_SHIFT: u32 = 16;
pub const SUPERPAGE_NONE: u32 = 0;
pub const SUPERPAGE_SIZE_ANY: u32 = 1;
pub const VM_FLAGS_SUPERPAGE_NONE: u32 = 0;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY: u32 = 65536;
pub const SUPERPAGE_SIZE_2MB: u32 = 2;
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB: u32 = 131072;
pub const GUARD_TYPE_VIRT_MEMORY: u32 = 5;
pub const __VM_LEDGER_ACCOUNTING_POSTMARK: u32 = 2019032600;
pub const VM_LEDGER_TAG_NONE: u32 = 0;
pub const VM_LEDGER_TAG_DEFAULT: u32 = 1;
pub const VM_LEDGER_TAG_NETWORK: u32 = 2;
pub const VM_LEDGER_TAG_MEDIA: u32 = 3;
pub const VM_LEDGER_TAG_GRAPHICS: u32 = 4;
pub const VM_LEDGER_TAG_NEURAL: u32 = 5;
pub const VM_LEDGER_TAG_MAX: u32 = 5;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT: u32 = 1;
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG: u32 = 2;
pub const VM_LEDGER_FLAGS: u32 = 3;
pub const VM_MEMORY_MALLOC: u32 = 1;
pub const VM_MEMORY_MALLOC_SMALL: u32 = 2;
pub const VM_MEMORY_MALLOC_LARGE: u32 = 3;
pub const VM_MEMORY_MALLOC_HUGE: u32 = 4;
pub const VM_MEMORY_SBRK: u32 = 5;
pub const VM_MEMORY_REALLOC: u32 = 6;
pub const VM_MEMORY_MALLOC_TINY: u32 = 7;
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE: u32 = 8;
pub const VM_MEMORY_MALLOC_LARGE_REUSED: u32 = 9;
pub const VM_MEMORY_ANALYSIS_TOOL: u32 = 10;
pub const VM_MEMORY_MALLOC_NANO: u32 = 11;
pub const VM_MEMORY_MALLOC_MEDIUM: u32 = 12;
pub const VM_MEMORY_MALLOC_PROB_GUARD: u32 = 13;
pub const VM_MEMORY_MACH_MSG: u32 = 20;
pub const VM_MEMORY_IOKIT: u32 = 21;
pub const VM_MEMORY_STACK: u32 = 30;
pub const VM_MEMORY_GUARD: u32 = 31;
pub const VM_MEMORY_SHARED_PMAP: u32 = 32;
pub const VM_MEMORY_DYLIB: u32 = 33;
pub const VM_MEMORY_OBJC_DISPATCHERS: u32 = 34;
pub const VM_MEMORY_UNSHARED_PMAP: u32 = 35;
pub const VM_MEMORY_APPKIT: u32 = 40;
pub const VM_MEMORY_FOUNDATION: u32 = 41;
pub const VM_MEMORY_COREGRAPHICS: u32 = 42;
pub const VM_MEMORY_CORESERVICES: u32 = 43;
pub const VM_MEMORY_CARBON: u32 = 43;
pub const VM_MEMORY_JAVA: u32 = 44;
pub const VM_MEMORY_COREDATA: u32 = 45;
pub const VM_MEMORY_COREDATA_OBJECTIDS: u32 = 46;
pub const VM_MEMORY_ATS: u32 = 50;
pub const VM_MEMORY_LAYERKIT: u32 = 51;
pub const VM_MEMORY_CGIMAGE: u32 = 52;
pub const VM_MEMORY_TCMALLOC: u32 = 53;
pub const VM_MEMORY_COREGRAPHICS_DATA: u32 = 54;
pub const VM_MEMORY_COREGRAPHICS_SHARED: u32 = 55;
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS: u32 = 56;
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES: u32 = 57;
pub const VM_MEMORY_COREGRAPHICS_XALLOC: u32 = 58;
pub const VM_MEMORY_COREGRAPHICS_MISC: u32 = 42;
pub const VM_MEMORY_DYLD: u32 = 60;
pub const VM_MEMORY_DYLD_MALLOC: u32 = 61;
pub const VM_MEMORY_SQLITE: u32 = 62;
pub const VM_MEMORY_JAVASCRIPT_CORE: u32 = 63;
pub const VM_MEMORY_WEBASSEMBLY: u32 = 63;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR: u32 = 64;
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE: u32 = 65;
pub const VM_MEMORY_GLSL: u32 = 66;
pub const VM_MEMORY_OPENCL: u32 = 67;
pub const VM_MEMORY_COREIMAGE: u32 = 68;
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS: u32 = 69;
pub const VM_MEMORY_IMAGEIO: u32 = 70;
pub const VM_MEMORY_COREPROFILE: u32 = 71;
pub const VM_MEMORY_ASSETSD: u32 = 72;
pub const VM_MEMORY_OS_ALLOC_ONCE: u32 = 73;
pub const VM_MEMORY_LIBDISPATCH: u32 = 74;
pub const VM_MEMORY_ACCELERATE: u32 = 75;
pub const VM_MEMORY_COREUI: u32 = 76;
pub const VM_MEMORY_COREUIFILE: u32 = 77;
pub const VM_MEMORY_GENEALOGY: u32 = 78;
pub const VM_MEMORY_RAWCAMERA: u32 = 79;
pub const VM_MEMORY_CORPSEINFO: u32 = 80;
pub const VM_MEMORY_ASL: u32 = 81;
pub const VM_MEMORY_SWIFT_RUNTIME: u32 = 82;
pub const VM_MEMORY_SWIFT_METADATA: u32 = 83;
pub const VM_MEMORY_DHMM: u32 = 84;
pub const VM_MEMORY_SCENEKIT: u32 = 86;
pub const VM_MEMORY_SKYWALK: u32 = 87;
pub const VM_MEMORY_IOSURFACE: u32 = 88;
pub const VM_MEMORY_LIBNETWORK: u32 = 89;
pub const VM_MEMORY_AUDIO: u32 = 90;
pub const VM_MEMORY_VIDEOBITSTREAM: u32 = 91;
pub const VM_MEMORY_CM_XPC: u32 = 92;
pub const VM_MEMORY_CM_RPC: u32 = 93;
pub const VM_MEMORY_CM_MEMORYPOOL: u32 = 94;
pub const VM_MEMORY_CM_READCACHE: u32 = 95;
pub const VM_MEMORY_CM_CRABS: u32 = 96;
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS: u32 = 97;
pub const VM_MEMORY_ACCOUNTS: u32 = 98;
pub const VM_MEMORY_SANITIZER: u32 = 99;
pub const VM_MEMORY_IOACCELERATOR: u32 = 100;
pub const VM_MEMORY_CM_REGWARP: u32 = 101;
pub const VM_MEMORY_EAR_DECODER: u32 = 102;
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA: u32 = 103;
pub const VM_MEMORY_COLORSYNC: u32 = 104;
pub const VM_MEMORY_BTINFO: u32 = 105;
pub const VM_MEMORY_CM_HLS: u32 = 106;
pub const VM_MEMORY_ROSETTA: u32 = 230;
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT: u32 = 231;
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP: u32 = 232;
pub const VM_MEMORY_ROSETTA_RETURN_STACK: u32 = 233;
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP: u32 = 234;
pub const VM_MEMORY_ROSETTA_USER_LDT: u32 = 235;
pub const VM_MEMORY_ROSETTA_ARENA: u32 = 236;
pub const VM_MEMORY_ROSETTA_10: u32 = 239;
pub const VM_MEMORY_APPLICATION_SPECIFIC_1: u32 = 240;
pub const VM_MEMORY_APPLICATION_SPECIFIC_16: u32 = 255;
pub const VM_MEMORY_COUNT: u32 = 256;
pub const CPU_STATE_MAX: u32 = 4;
pub const CPU_STATE_USER: u32 = 0;
pub const CPU_STATE_SYSTEM: u32 = 1;
pub const CPU_STATE_IDLE: u32 = 2;
pub const CPU_STATE_NICE: u32 = 3;
pub const CPU_ARCH_MASK: u32 = 4278190080;
pub const CPU_ARCH_ABI64: u32 = 16777216;
pub const CPU_ARCH_ABI64_32: u32 = 33554432;
pub const CPU_SUBTYPE_MASK: u32 = 4278190080;
pub const CPU_SUBTYPE_LIB64: u32 = 2147483648;
pub const CPU_SUBTYPE_PTRAUTH_ABI: u32 = 2147483648;
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX: u32 = 15;
pub const CPU_SUBTYPE_INTEL_MODEL_ALL: u32 = 0;
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK: u32 = 251658240;
pub const CPUFAMILY_UNKNOWN: u32 = 0;
pub const CPUFAMILY_POWERPC_G3: u32 = 3471054153;
pub const CPUFAMILY_POWERPC_G4: u32 = 2009171118;
pub const CPUFAMILY_POWERPC_G5: u32 = 3983988906;
pub const CPUFAMILY_INTEL_6_13: u32 = 2855483691;
pub const CPUFAMILY_INTEL_PENRYN: u32 = 2028621756;
pub const CPUFAMILY_INTEL_NEHALEM: u32 = 1801080018;
pub const CPUFAMILY_INTEL_WESTMERE: u32 = 1463508716;
pub const CPUFAMILY_INTEL_SANDYBRIDGE: u32 = 1418770316;
pub const CPUFAMILY_INTEL_IVYBRIDGE: u32 = 526772277;
pub const CPUFAMILY_INTEL_HASWELL: u32 = 280134364;
pub const CPUFAMILY_INTEL_BROADWELL: u32 = 1479463068;
pub const CPUFAMILY_INTEL_SKYLAKE: u32 = 939270559;
pub const CPUFAMILY_INTEL_KABYLAKE: u32 = 260141638;
pub const CPUFAMILY_INTEL_ICELAKE: u32 = 943936839;
pub const CPUFAMILY_INTEL_COMETLAKE: u32 = 486055998;
pub const CPUFAMILY_ARM_9: u32 = 3878847406;
pub const CPUFAMILY_ARM_11: u32 = 2415272152;
pub const CPUFAMILY_ARM_XSCALE: u32 = 1404044789;
pub const CPUFAMILY_ARM_12: u32 = 3172666089;
pub const CPUFAMILY_ARM_13: u32 = 214503012;
pub const CPUFAMILY_ARM_14: u32 = 2517073649;
pub const CPUFAMILY_ARM_15: u32 = 2823887818;
pub const CPUFAMILY_ARM_SWIFT: u32 = 506291073;
pub const CPUFAMILY_ARM_CYCLONE: u32 = 933271106;
pub const CPUFAMILY_ARM_TYPHOON: u32 = 747742334;
pub const CPUFAMILY_ARM_TWISTER: u32 = 2465937352;
pub const CPUFAMILY_ARM_HURRICANE: u32 = 1741614739;
pub const CPUFAMILY_ARM_MONSOON_MISTRAL: u32 = 3894312694;
pub const CPUFAMILY_ARM_VORTEX_TEMPEST: u32 = 131287967;
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER: u32 = 1176831186;
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM: u32 = 458787763;
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE: u32 = 3660830781;
pub const CPUFAMILY_ARM_EVEREST_SAWTOOTH: u32 = 2271604202;
pub const CPUFAMILY_ARM_IBIZA: u32 = 4197663070;
pub const CPUFAMILY_ARM_PALMA: u32 = 1912690738;
pub const CPUFAMILY_ARM_COLL: u32 = 678884789;
pub const CPUFAMILY_ARM_LOBOS: u32 = 1598941843;
pub const CPUSUBFAMILY_UNKNOWN: u32 = 0;
pub const CPUSUBFAMILY_ARM_HP: u32 = 1;
pub const CPUSUBFAMILY_ARM_HG: u32 = 2;
pub const CPUSUBFAMILY_ARM_M: u32 = 3;
pub const CPUSUBFAMILY_ARM_HS: u32 = 4;
pub const CPUSUBFAMILY_ARM_HC_HD: u32 = 5;
pub const CPUSUBFAMILY_ARM_HA: u32 = 6;
pub const CPUFAMILY_INTEL_6_23: u32 = 2028621756;
pub const CPUFAMILY_INTEL_6_26: u32 = 1801080018;
pub const TIME_MICROS_MAX: u32 = 1000000;
pub const HOST_INFO_MAX: u32 = 1024;
pub const KERNEL_VERSION_MAX: u32 = 512;
pub const KERNEL_BOOT_INFO_MAX: u32 = 4096;
pub const HOST_BASIC_INFO: u32 = 1;
pub const HOST_SCHED_INFO: u32 = 3;
pub const HOST_RESOURCE_SIZES: u32 = 4;
pub const HOST_PRIORITY_INFO: u32 = 5;
pub const HOST_SEMAPHORE_TRAPS: u32 = 7;
pub const HOST_MACH_MSG_TRAP: u32 = 8;
pub const HOST_VM_PURGABLE: u32 = 9;
pub const HOST_DEBUG_INFO_INTERNAL: u32 = 10;
pub const HOST_CAN_HAS_DEBUGGER: u32 = 11;
pub const HOST_PREFERRED_USER_ARCH: u32 = 12;
pub const HOST_LOAD_INFO: u32 = 1;
pub const HOST_VM_INFO: u32 = 2;
pub const HOST_CPU_LOAD_INFO: u32 = 3;
pub const HOST_VM_INFO64: u32 = 4;
pub const HOST_EXTMOD_INFO64: u32 = 5;
pub const HOST_EXPIRED_TASK_INFO: u32 = 6;
pub const HOST_NOTIFY_CALENDAR_CHANGE: u32 = 0;
pub const HOST_NOTIFY_CALENDAR_SET: u32 = 1;
pub const HOST_NOTIFY_TYPE_MAX: u32 = 1;
pub const HOST_CALENDAR_CHANGED_REPLYID: u32 = 950;
pub const HOST_CALENDAR_SET_REPLYID: u32 = 951;
pub const HOST_SECURITY_PORT: u32 = 0;
pub const HOST_MIN_SPECIAL_PORT: u32 = 0;
pub const HOST_PORT: u32 = 1;
pub const HOST_PRIV_PORT: u32 = 2;
pub const HOST_IO_MAIN_PORT: u32 = 3;
pub const HOST_MAX_SPECIAL_KERNEL_PORT: u32 = 7;
pub const HOST_LAST_SPECIAL_KERNEL_PORT: u32 = 3;
pub const HOST_DYNAMIC_PAGER_PORT: u32 = 8;
pub const HOST_AUDIT_CONTROL_PORT: u32 = 9;
pub const HOST_USER_NOTIFICATION_PORT: u32 = 10;
pub const HOST_AUTOMOUNTD_PORT: u32 = 11;
pub const HOST_LOCKD_PORT: u32 = 12;
pub const HOST_KTRACE_BACKGROUND_PORT: u32 = 13;
pub const HOST_SEATBELT_PORT: u32 = 14;
pub const HOST_KEXTD_PORT: u32 = 15;
pub const HOST_LAUNCHCTL_PORT: u32 = 16;
pub const HOST_UNFREED_PORT: u32 = 17;
pub const HOST_AMFID_PORT: u32 = 18;
pub const HOST_GSSD_PORT: u32 = 19;
pub const HOST_TELEMETRY_PORT: u32 = 20;
pub const HOST_ATM_NOTIFICATION_PORT: u32 = 21;
pub const HOST_COALITION_PORT: u32 = 22;
pub const HOST_SYSDIAGNOSE_PORT: u32 = 23;
pub const HOST_XPC_EXCEPTION_PORT: u32 = 24;
pub const HOST_CONTAINERD_PORT: u32 = 25;
pub const HOST_NODE_PORT: u32 = 26;
pub const HOST_RESOURCE_NOTIFY_PORT: u32 = 27;
pub const HOST_CLOSURED_PORT: u32 = 28;
pub const HOST_SYSPOLICYD_PORT: u32 = 29;
pub const HOST_FILECOORDINATIOND_PORT: u32 = 30;
pub const HOST_FAIRPLAYD_PORT: u32 = 31;
pub const HOST_IOCOMPRESSIONSTATS_PORT: u32 = 32;
pub const HOST_MEMORY_ERROR_PORT: u32 = 33;
pub const HOST_MANAGEDAPPDISTD_PORT: u32 = 34;
pub const HOST_MAX_SPECIAL_PORT: u32 = 34;
pub const HOST_CHUD_PORT: u32 = 16;
pub const HOST_LOCAL_NODE: i32 = -1;
pub const PPNUM_MAX: u32 = 4294967295;
pub const MEMORY_OBJECT_COPY_NONE: u32 = 0;
pub const MEMORY_OBJECT_COPY_CALL: u32 = 1;
pub const MEMORY_OBJECT_COPY_DELAY: u32 = 2;
pub const MEMORY_OBJECT_COPY_TEMPORARY: u32 = 3;
pub const MEMORY_OBJECT_COPY_SYMMETRIC: u32 = 4;
pub const MEMORY_OBJECT_COPY_INVALID: u32 = 5;
pub const MEMORY_OBJECT_COPY_DELAY_FORK: u32 = 6;
pub const MEMORY_OBJECT_RETURN_NONE: u32 = 0;
pub const MEMORY_OBJECT_RETURN_DIRTY: u32 = 1;
pub const MEMORY_OBJECT_RETURN_ALL: u32 = 2;
pub const MEMORY_OBJECT_RETURN_ANYTHING: u32 = 3;
pub const MEMORY_OBJECT_DATA_FLUSH: u32 = 1;
pub const MEMORY_OBJECT_DATA_NO_CHANGE: u32 = 2;
pub const MEMORY_OBJECT_DATA_PURGE: u32 = 4;
pub const MEMORY_OBJECT_COPY_SYNC: u32 = 8;
pub const MEMORY_OBJECT_DATA_SYNC: u32 = 16;
pub const MEMORY_OBJECT_IO_SYNC: u32 = 32;
pub const MEMORY_OBJECT_DATA_FLUSH_ALL: u32 = 64;
pub const MEMORY_OBJECT_INFO_MAX: u32 = 1024;
pub const MEMORY_OBJECT_PERFORMANCE_INFO: u32 = 11;
pub const MEMORY_OBJECT_ATTRIBUTE_INFO: u32 = 14;
pub const MEMORY_OBJECT_BEHAVIOR_INFO: u32 = 15;
pub const MEMORY_OBJECT_TERMINATE_IDLE: u32 = 1;
pub const MEMORY_OBJECT_RESPECT_CACHE: u32 = 2;
pub const MEMORY_OBJECT_RELEASE_NO_OP: u32 = 4;
pub const MAP_MEM_NOOP: u32 = 0;
pub const MAP_MEM_COPYBACK: u32 = 1;
pub const MAP_MEM_IO: u32 = 2;
pub const MAP_MEM_WTHRU: u32 = 3;
pub const MAP_MEM_WCOMB: u32 = 4;
pub const MAP_MEM_INNERWBACK: u32 = 5;
pub const MAP_MEM_POSTED: u32 = 6;
pub const MAP_MEM_RT: u32 = 7;
pub const MAP_MEM_POSTED_REORDERED: u32 = 8;
pub const MAP_MEM_POSTED_COMBINED_REORDERED: u32 = 9;
pub const MAP_MEM_LEDGER_TAGGED: u32 = 8192;
pub const MAP_MEM_PURGABLE_KERNEL_ONLY: u32 = 16384;
pub const MAP_MEM_GRAB_SECLUDED: u32 = 32768;
pub const MAP_MEM_ONLY: u32 = 65536;
pub const MAP_MEM_NAMED_CREATE: u32 = 131072;
pub const MAP_MEM_PURGABLE: u32 = 262144;
pub const MAP_MEM_NAMED_REUSE: u32 = 524288;
pub const MAP_MEM_USE_DATA_ADDR: u32 = 1048576;
pub const MAP_MEM_VM_COPY: u32 = 2097152;
pub const MAP_MEM_VM_SHARE: u32 = 4194304;
pub const MAP_MEM_4K_DATA_ADDR: u32 = 8388608;
pub const MAP_MEM_FLAGS_MASK: u32 = 16776960;
pub const MAP_MEM_FLAGS_USER: u32 = 16769024;
pub const MAP_MEM_FLAGS_ALL: u32 = 16769024;
pub const EXC_TYPES_COUNT: u32 = 14;
pub const EXCEPTION_CODE_MAX: u32 = 2;
pub const EXC_I386_INVOP: u32 = 1;
pub const EXC_I386_DIV: u32 = 1;
pub const EXC_I386_INTO: u32 = 2;
pub const EXC_I386_NOEXT: u32 = 3;
pub const EXC_I386_EXTOVR: u32 = 4;
pub const EXC_I386_EXTERR: u32 = 5;
pub const EXC_I386_EMERR: u32 = 6;
pub const EXC_I386_BOUND: u32 = 7;
pub const EXC_I386_SSEEXTERR: u32 = 8;
pub const EXC_I386_SGL: u32 = 1;
pub const EXC_I386_BPT: u32 = 2;
pub const EXC_I386_DIVERR: u32 = 0;
pub const EXC_I386_SGLSTP: u32 = 1;
pub const EXC_I386_NMIFLT: u32 = 2;
pub const EXC_I386_BPTFLT: u32 = 3;
pub const EXC_I386_INTOFLT: u32 = 4;
pub const EXC_I386_BOUNDFLT: u32 = 5;
pub const EXC_I386_INVOPFLT: u32 = 6;
pub const EXC_I386_NOEXTFLT: u32 = 7;
pub const EXC_I386_DBLFLT: u32 = 8;
pub const EXC_I386_EXTOVRFLT: u32 = 9;
pub const EXC_I386_INVTSSFLT: u32 = 10;
pub const EXC_I386_SEGNPFLT: u32 = 11;
pub const EXC_I386_STKFLT: u32 = 12;
pub const EXC_I386_GPFLT: u32 = 13;
pub const EXC_I386_PGFLT: u32 = 14;
pub const EXC_I386_EXTERRFLT: u32 = 16;
pub const EXC_I386_ALIGNFLT: u32 = 17;
pub const EXC_I386_ENDPERR: u32 = 33;
pub const EXC_I386_ENOEXTFLT: u32 = 32;
pub const EXC_MASK_MACHINE: u32 = 0;
pub const EXC_BAD_ACCESS: u32 = 1;
pub const EXC_BAD_INSTRUCTION: u32 = 2;
pub const EXC_ARITHMETIC: u32 = 3;
pub const EXC_EMULATION: u32 = 4;
pub const EXC_SOFTWARE: u32 = 5;
pub const EXC_BREAKPOINT: u32 = 6;
pub const EXC_SYSCALL: u32 = 7;
pub const EXC_MACH_SYSCALL: u32 = 8;
pub const EXC_RPC_ALERT: u32 = 9;
pub const EXC_CRASH: u32 = 10;
pub const EXC_RESOURCE: u32 = 11;
pub const EXC_GUARD: u32 = 12;
pub const EXC_CORPSE_NOTIFY: u32 = 13;
pub const EXCEPTION_DEFAULT: u32 = 1;
pub const EXCEPTION_STATE: u32 = 2;
pub const EXCEPTION_STATE_IDENTITY: u32 = 3;
pub const EXCEPTION_IDENTITY_PROTECTED: u32 = 4;
pub const MACH_EXCEPTION_BACKTRACE_PREFERRED: u32 = 536870912;
pub const MACH_EXCEPTION_ERRORS: u32 = 1073741824;
pub const MACH_EXCEPTION_CODES: u32 = 2147483648;
pub const MACH_EXCEPTION_MASK: u32 = 3758096384;
pub const EXC_MASK_BAD_ACCESS: u32 = 2;
pub const EXC_MASK_BAD_INSTRUCTION: u32 = 4;
pub const EXC_MASK_ARITHMETIC: u32 = 8;
pub const EXC_MASK_EMULATION: u32 = 16;
pub const EXC_MASK_SOFTWARE: u32 = 32;
pub const EXC_MASK_BREAKPOINT: u32 = 64;
pub const EXC_MASK_SYSCALL: u32 = 128;
pub const EXC_MASK_MACH_SYSCALL: u32 = 256;
pub const EXC_MASK_RPC_ALERT: u32 = 512;
pub const EXC_MASK_CRASH: u32 = 1024;
pub const EXC_MASK_RESOURCE: u32 = 2048;
pub const EXC_MASK_GUARD: u32 = 4096;
pub const EXC_MASK_CORPSE_NOTIFY: u32 = 8192;
pub const EXC_MASK_ALL: u32 = 7166;
pub const FIRST_EXCEPTION: u32 = 1;
pub const EXC_SOFT_SIGNAL: u32 = 65539;
pub const EXC_MACF_MIN: u32 = 131072;
pub const EXC_MACF_MAX: u32 = 196607;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const _X86_INSTRUCTION_STATE_MAX_INSN_BYTES: u32 = 2380;
pub const _X86_INSTRUCTION_STATE_CACHELINE_SIZE: u32 = 64;
pub const __LASTBRANCH_MAX: u32 = 32;
pub const I386_THREAD_STATE_MAX: u32 = 614;
pub const THREAD_STATE_MAX: u32 = 1296;
pub const FPC_IE: u32 = 1;
pub const FPC_IM: u32 = 1;
pub const FPC_DE: u32 = 2;
pub const FPC_DM: u32 = 2;
pub const FPC_ZE: u32 = 4;
pub const FPC_ZM: u32 = 4;
pub const FPC_OE: u32 = 8;
pub const FPC_OM: u32 = 8;
pub const FPC_UE: u32 = 16;
pub const FPC_PE: u32 = 32;
pub const FPC_PC: u32 = 768;
pub const FPC_PC_24: u32 = 0;
pub const FPC_PC_53: u32 = 512;
pub const FPC_PC_64: u32 = 768;
pub const FPC_RC: u32 = 3072;
pub const FPC_RC_RN: u32 = 0;
pub const FPC_RC_RD: u32 = 1024;
pub const FPC_RC_RU: u32 = 2048;
pub const FPC_RC_CHOP: u32 = 3072;
pub const FPC_IC: u32 = 4096;
pub const FPC_IC_PROJ: u32 = 0;
pub const FPC_IC_AFF: u32 = 4096;
pub const FPS_IE: u32 = 1;
pub const FPS_DE: u32 = 2;
pub const FPS_ZE: u32 = 4;
pub const FPS_OE: u32 = 8;
pub const FPS_UE: u32 = 16;
pub const FPS_PE: u32 = 32;
pub const FPS_SF: u32 = 64;
pub const FPS_ES: u32 = 128;
pub const FPS_C0: u32 = 256;
pub const FPS_C1: u32 = 512;
pub const FPS_C2: u32 = 1024;
pub const FPS_TOS: u32 = 14336;
pub const FPS_TOS_SHIFT: u32 = 11;
pub const FPS_C3: u32 = 16384;
pub const FPS_BUSY: u32 = 32768;
pub const FP_NO: u32 = 0;
pub const FP_SOFT: u32 = 1;
pub const FP_287: u32 = 2;
pub const FP_387: u32 = 3;
pub const FP_FXSR: u32 = 4;
pub const EFL_CF: u32 = 1;
pub const EFL_PF: u32 = 4;
pub const EFL_AF: u32 = 16;
pub const EFL_ZF: u32 = 64;
pub const EFL_SF: u32 = 128;
pub const EFL_TF: u32 = 256;
pub const EFL_IF: u32 = 512;
pub const EFL_DF: u32 = 1024;
pub const EFL_OF: u32 = 2048;
pub const EFL_IOPL: u32 = 12288;
pub const EFL_IOPL_KERNEL: u32 = 0;
pub const EFL_IOPL_USER: u32 = 12288;
pub const EFL_NT: u32 = 16384;
pub const EFL_RF: u32 = 65536;
pub const EFL_VM: u32 = 131072;
pub const EFL_AC: u32 = 262144;
pub const EFL_VIF: u32 = 524288;
pub const EFL_VIP: u32 = 1048576;
pub const EFL_ID: u32 = 2097152;
pub const EFL_CLR: u32 = 4294475816;
pub const EFL_SET: u32 = 2;
pub const EFL_USER_SET: u32 = 512;
pub const EFL_USER_CLEAR: u32 = 94208;
pub const i386_THREAD_STATE: u32 = 1;
pub const i386_FLOAT_STATE: u32 = 2;
pub const i386_EXCEPTION_STATE: u32 = 3;
pub const x86_THREAD_STATE32: u32 = 1;
pub const x86_FLOAT_STATE32: u32 = 2;
pub const x86_EXCEPTION_STATE32: u32 = 3;
pub const x86_THREAD_STATE64: u32 = 4;
pub const x86_FLOAT_STATE64: u32 = 5;
pub const x86_EXCEPTION_STATE64: u32 = 6;
pub const x86_THREAD_STATE: u32 = 7;
pub const x86_FLOAT_STATE: u32 = 8;
pub const x86_EXCEPTION_STATE: u32 = 9;
pub const x86_DEBUG_STATE32: u32 = 10;
pub const x86_DEBUG_STATE64: u32 = 11;
pub const x86_DEBUG_STATE: u32 = 12;
pub const THREAD_STATE_NONE: u32 = 13;
pub const x86_AVX_STATE32: u32 = 16;
pub const x86_AVX_STATE64: u32 = 17;
pub const x86_AVX_STATE: u32 = 18;
pub const x86_AVX512_STATE32: u32 = 19;
pub const x86_AVX512_STATE64: u32 = 20;
pub const x86_AVX512_STATE: u32 = 21;
pub const x86_PAGEIN_STATE: u32 = 22;
pub const x86_THREAD_FULL_STATE64: u32 = 23;
pub const x86_INSTRUCTION_STATE: u32 = 24;
pub const x86_LAST_BRANCH_STATE: u32 = 25;
pub const THREAD_MACHINE_STATE_MAX: u32 = 1296;
pub const USER_CODE_SELECTOR: u32 = 23;
pub const USER_DATA_SELECTOR: u32 = 31;
pub const KERN_CODE_SELECTOR: u32 = 8;
pub const KERN_DATA_SELECTOR: u32 = 16;
pub const MACHINE_THREAD_STATE: u32 = 7;
pub const THREAD_STATE_FLAVOR_LIST: u32 = 0;
pub const THREAD_STATE_FLAVOR_LIST_NEW: u32 = 128;
pub const THREAD_STATE_FLAVOR_LIST_10_9: u32 = 129;
pub const THREAD_STATE_FLAVOR_LIST_10_13: u32 = 130;
pub const THREAD_STATE_FLAVOR_LIST_10_15: u32 = 131;
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF: u32 = 1;
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF: u32 = 2;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE: u32 = 5120;
pub const MACH_VOUCHER_TRAP_STACK_LIMIT: u32 = 256;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL: u32 = 1;
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL: u32 = 2;
pub const MACH_ACTIVITY_ID_COUNT_MAX: u32 = 16;
pub const PROCESSOR_INFO_MAX: u32 = 1024;
pub const PROCESSOR_SET_INFO_MAX: u32 = 1024;
pub const PROCESSOR_BASIC_INFO: u32 = 1;
pub const PROCESSOR_CPU_LOAD_INFO: u32 = 2;
pub const PROCESSOR_PM_REGS_INFO: u32 = 268435457;
pub const PROCESSOR_TEMPERATURE: u32 = 268435458;
pub const LOAD_SCALE: u32 = 1000;
pub const PROCESSOR_SET_BASIC_INFO: u32 = 5;
pub const PROCESSOR_SET_LOAD_INFO: u32 = 4;
pub const POLICY_NULL: u32 = 0;
pub const POLICY_TIMESHARE: u32 = 1;
pub const POLICY_RR: u32 = 2;
pub const POLICY_FIFO: u32 = 4;
pub const POLICYCLASS_FIXEDPRI: u32 = 6;
pub const TASK_INFO_MAX: u32 = 1024;
pub const TASK_BASIC_INFO_32: u32 = 4;
pub const TASK_BASIC2_INFO_32: u32 = 6;
pub const TASK_BASIC_INFO_64: u32 = 5;
pub const TASK_BASIC_INFO: u32 = 5;
pub const TASK_EVENTS_INFO: u32 = 2;
pub const TASK_THREAD_TIMES_INFO: u32 = 3;
pub const TASK_ABSOLUTETIME_INFO: u32 = 1;
pub const TASK_KERNELMEMORY_INFO: u32 = 7;
pub const TASK_SECURITY_TOKEN: u32 = 13;
pub const TASK_AUDIT_TOKEN: u32 = 15;
pub const TASK_AFFINITY_TAG_INFO: u32 = 16;
pub const TASK_DYLD_INFO: u32 = 17;
pub const TASK_DYLD_ALL_IMAGE_INFO_32: u32 = 0;
pub const TASK_DYLD_ALL_IMAGE_INFO_64: u32 = 1;
pub const TASK_EXTMOD_INFO: u32 = 19;
pub const MACH_TASK_BASIC_INFO: u32 = 20;
pub const TASK_POWER_INFO: u32 = 21;
pub const TASK_VM_INFO: u32 = 22;
pub const TASK_VM_INFO_PURGEABLE: u32 = 23;
pub const TASK_TRACE_MEMORY_INFO: u32 = 24;
pub const TASK_WAIT_STATE_INFO: u32 = 25;
pub const TASK_POWER_INFO_V2: u32 = 26;
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT: u32 = 27;
pub const TASK_FLAGS_INFO: u32 = 28;
pub const TF_LP64: u32 = 1;
pub const TF_64B_DATA: u32 = 2;
pub const TASK_DEBUG_INFO_INTERNAL: u32 = 29;
pub const TASK_EXC_GUARD_NONE: u32 = 0;
pub const TASK_EXC_GUARD_VM_DELIVER: u32 = 1;
pub const TASK_EXC_GUARD_VM_ONCE: u32 = 2;
pub const TASK_EXC_GUARD_VM_CORPSE: u32 = 4;
pub const TASK_EXC_GUARD_VM_FATAL: u32 = 8;
pub const TASK_EXC_GUARD_VM_ALL: u32 = 15;
pub const TASK_EXC_GUARD_MP_DELIVER: u32 = 16;
pub const TASK_EXC_GUARD_MP_ONCE: u32 = 32;
pub const TASK_EXC_GUARD_MP_CORPSE: u32 = 64;
pub const TASK_EXC_GUARD_MP_FATAL: u32 = 128;
pub const TASK_EXC_GUARD_MP_ALL: u32 = 240;
pub const TASK_EXC_GUARD_ALL: u32 = 255;
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG: u32 = 1;
pub const TASK_SCHED_TIMESHARE_INFO: u32 = 10;
pub const TASK_SCHED_RR_INFO: u32 = 11;
pub const TASK_SCHED_FIFO_INFO: u32 = 12;
pub const TASK_SCHED_INFO: u32 = 14;
pub const TASK_CATEGORY_POLICY: u32 = 1;
pub const TASK_SUPPRESSION_POLICY: u32 = 3;
pub const TASK_POLICY_STATE: u32 = 4;
pub const TASK_BASE_QOS_POLICY: u32 = 8;
pub const TASK_OVERRIDE_QOS_POLICY: u32 = 9;
pub const TASK_BASE_LATENCY_QOS_POLICY: u32 = 10;
pub const TASK_BASE_THROUGHPUT_QOS_POLICY: u32 = 11;
pub const PROC_FLAG_DARWINBG: u32 = 32768;
pub const PROC_FLAG_EXT_DARWINBG: u32 = 65536;
pub const PROC_FLAG_IOS_APPLEDAEMON: u32 = 131072;
pub const PROC_FLAG_IOS_IMPPROMOTION: u32 = 524288;
pub const PROC_FLAG_ADAPTIVE: u32 = 1048576;
pub const PROC_FLAG_ADAPTIVE_IMPORTANT: u32 = 2097152;
pub const PROC_FLAG_IMPORTANCE_DONOR: u32 = 4194304;
pub const PROC_FLAG_SUPPRESSED: u32 = 8388608;
pub const PROC_FLAG_APPLICATION: u32 = 16777216;
pub const PROC_FLAG_IOS_APPLICATION: u32 = 16777216;
pub const TASK_KERNEL_PORT: u32 = 1;
pub const TASK_HOST_PORT: u32 = 2;
pub const TASK_NAME_PORT: u32 = 3;
pub const TASK_BOOTSTRAP_PORT: u32 = 4;
pub const TASK_INSPECT_PORT: u32 = 5;
pub const TASK_READ_PORT: u32 = 6;
pub const TASK_ACCESS_PORT: u32 = 9;
pub const TASK_DEBUG_CONTROL_PORT: u32 = 10;
pub const TASK_RESOURCE_NOTIFY_PORT: u32 = 11;
pub const TASK_MAX_SPECIAL_PORT: u32 = 11;
pub const THREAD_INFO_MAX: u32 = 32;
pub const THREAD_BASIC_INFO: u32 = 3;
pub const THREAD_IDENTIFIER_INFO: u32 = 4;
pub const TH_USAGE_SCALE: u32 = 1000;
pub const TH_STATE_RUNNING: u32 = 1;
pub const TH_STATE_STOPPED: u32 = 2;
pub const TH_STATE_WAITING: u32 = 3;
pub const TH_STATE_UNINTERRUPTIBLE: u32 = 4;
pub const TH_STATE_HALTED: u32 = 5;
pub const TH_FLAGS_SWAPPED: u32 = 1;
pub const TH_FLAGS_IDLE: u32 = 2;
pub const TH_FLAGS_GLOBAL_FORCED_IDLE: u32 = 4;
pub const THREAD_EXTENDED_INFO: u32 = 5;
pub const MAXTHREADNAMESIZE: u32 = 64;
pub const THREAD_DEBUG_INFO_INTERNAL: u32 = 6;
pub const IO_NUM_PRIORITIES: u32 = 4;
pub const THREAD_SCHED_TIMESHARE_INFO: u32 = 10;
pub const THREAD_SCHED_RR_INFO: u32 = 11;
pub const THREAD_SCHED_FIFO_INFO: u32 = 12;
pub const THREAD_STANDARD_POLICY: u32 = 1;
pub const THREAD_STANDARD_POLICY_COUNT: u32 = 0;
pub const THREAD_EXTENDED_POLICY: u32 = 1;
pub const THREAD_TIME_CONSTRAINT_POLICY: u32 = 2;
pub const THREAD_PRECEDENCE_POLICY: u32 = 3;
pub const THREAD_AFFINITY_POLICY: u32 = 4;
pub const THREAD_AFFINITY_TAG_NULL: u32 = 0;
pub const THREAD_BACKGROUND_POLICY: u32 = 5;
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG: u32 = 4096;
pub const THREAD_LATENCY_QOS_POLICY: u32 = 7;
pub const THREAD_THROUGHPUT_QOS_POLICY: u32 = 8;
pub const THREAD_KERNEL_PORT: u32 = 1;
pub const THREAD_INSPECT_PORT: u32 = 2;
pub const THREAD_READ_PORT: u32 = 3;
pub const THREAD_MAX_SPECIAL_PORT: u32 = 3;
pub const SYSTEM_CLOCK: u32 = 0;
pub const CALENDAR_CLOCK: u32 = 1;
pub const REALTIME_CLOCK: u32 = 0;
pub const CLOCK_GET_TIME_RES: u32 = 1;
pub const CLOCK_ALARM_CURRES: u32 = 3;
pub const CLOCK_ALARM_MINRES: u32 = 4;
pub const CLOCK_ALARM_MAXRES: u32 = 5;
pub const NSEC_PER_USEC: u32 = 1000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const ALRMTYPE: u32 = 255;
pub const TIME_ABSOLUTE: u32 = 0;
pub const TIME_RELATIVE: u32 = 1;
pub const MATTR_CACHE: u32 = 1;
pub const MATTR_MIGRATE: u32 = 2;
pub const MATTR_REPLICATE: u32 = 4;
pub const MATTR_VAL_OFF: u32 = 0;
pub const MATTR_VAL_ON: u32 = 1;
pub const MATTR_VAL_GET: u32 = 2;
pub const MATTR_VAL_CACHE_FLUSH: u32 = 6;
pub const MATTR_VAL_DCACHE_FLUSH: u32 = 7;
pub const MATTR_VAL_ICACHE_FLUSH: u32 = 8;
pub const MATTR_VAL_CACHE_SYNC: u32 = 9;
pub const MATTR_VAL_GET_INFO: u32 = 10;
pub const VM_PURGABLE_NO_AGING_SHIFT: u32 = 16;
pub const VM_PURGABLE_NO_AGING_MASK: u32 = 65536;
pub const VM_PURGABLE_NO_AGING: u32 = 65536;
pub const VM_PURGABLE_DEBUG_SHIFT: u32 = 12;
pub const VM_PURGABLE_DEBUG_MASK: u32 = 12288;
pub const VM_PURGABLE_DEBUG_EMPTY: u32 = 4096;
pub const VM_PURGABLE_DEBUG_FAULT: u32 = 8192;
pub const VM_VOLATILE_GROUP_SHIFT: u32 = 8;
pub const VM_VOLATILE_GROUP_MASK: u32 = 1792;
pub const VM_VOLATILE_GROUP_0: u32 = 0;
pub const VM_VOLATILE_GROUP_1: u32 = 256;
pub const VM_VOLATILE_GROUP_2: u32 = 512;
pub const VM_VOLATILE_GROUP_3: u32 = 768;
pub const VM_VOLATILE_GROUP_4: u32 = 1024;
pub const VM_VOLATILE_GROUP_5: u32 = 1280;
pub const VM_VOLATILE_GROUP_6: u32 = 1536;
pub const VM_VOLATILE_GROUP_7: u32 = 1792;
pub const VM_PURGABLE_BEHAVIOR_SHIFT: u32 = 6;
pub const VM_PURGABLE_BEHAVIOR_MASK: u32 = 64;
pub const VM_PURGABLE_BEHAVIOR_FIFO: u32 = 0;
pub const VM_PURGABLE_BEHAVIOR_LIFO: u32 = 64;
pub const VM_PURGABLE_ORDERING_SHIFT: u32 = 5;
pub const VM_PURGABLE_ORDERING_MASK: u32 = 32;
pub const VM_PURGABLE_ORDERING_OBSOLETE: u32 = 32;
pub const VM_PURGABLE_ORDERING_NORMAL: u32 = 0;
pub const VM_VOLATILE_ORDER_SHIFT: u32 = 4;
pub const VM_VOLATILE_ORDER_MASK: u32 = 16;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP: u32 = 16;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP: u32 = 0;
pub const VM_PURGABLE_STATE_MIN: u32 = 0;
pub const VM_PURGABLE_STATE_MAX: u32 = 3;
pub const VM_PURGABLE_STATE_MASK: u32 = 3;
pub const VM_PURGABLE_NONVOLATILE: u32 = 0;
pub const VM_PURGABLE_VOLATILE: u32 = 1;
pub const VM_PURGABLE_EMPTY: u32 = 2;
pub const VM_PURGABLE_DENY: u32 = 3;
pub const VM_PURGABLE_ALL_MASKS: u32 = 79731;
pub const BYTE_SIZE: u32 = 8;
pub const I386_PGBYTES: u32 = 4096;
pub const I386_PGSHIFT: u32 = 12;
pub const PAGE_MAX_SHIFT: u32 = 14;
pub const PAGE_MAX_SIZE: u32 = 16384;
pub const PAGE_MAX_MASK: u32 = 16383;
pub const PAGE_MIN_SHIFT: u32 = 12;
pub const PAGE_MIN_SIZE: u32 = 4096;
pub const PAGE_MIN_MASK: u32 = 4095;
pub const VM_REGION_INFO_MAX: u32 = 1024;
pub const VM_REGION_BASIC_INFO_64: u32 = 9;
pub const VM_REGION_BASIC_INFO: u32 = 10;
pub const SM_COW: u32 = 1;
pub const SM_PRIVATE: u32 = 2;
pub const SM_EMPTY: u32 = 3;
pub const SM_SHARED: u32 = 4;
pub const SM_TRUESHARED: u32 = 5;
pub const SM_PRIVATE_ALIASED: u32 = 6;
pub const SM_SHARED_ALIASED: u32 = 7;
pub const SM_LARGE_PAGE: u32 = 8;
pub const VM_REGION_EXTENDED_INFO: u32 = 13;
pub const VM_REGION_TOP_INFO: u32 = 12;
pub const VM_MAP_ENTRY_MAX: u32 = 256;
pub const VM_PAGE_INFO_BASIC: u32 = 1;
pub const KMOD_MAX_NAME: u32 = 64;
pub const KMOD_RETURN_SUCCESS: u32 = 0;
pub const KMOD_RETURN_FAILURE: u32 = 5;
pub const KMOD_INFO_VERSION: u32 = 1;
pub const TASK_FLAVOR_CONTROL: u32 = 0;
pub const TASK_FLAVOR_READ: u32 = 1;
pub const TASK_FLAVOR_INSPECT: u32 = 2;
pub const TASK_FLAVOR_NAME: u32 = 3;
pub const TASK_FLAVOR_MAX: u32 = 3;
pub const THREAD_FLAVOR_CONTROL: u32 = 0;
pub const THREAD_FLAVOR_READ: u32 = 1;
pub const THREAD_FLAVOR_INSPECT: u32 = 2;
pub const THREAD_FLAVOR_MAX: u32 = 2;
pub const __MigTypeCheck: u32 = 1;
pub const __MigPackStructs: u32 = 1;
pub const MIG_TYPE_ERROR: i32 = -300;
pub const MIG_REPLY_MISMATCH: i32 = -301;
pub const MIG_REMOTE_ERROR: i32 = -302;
pub const MIG_BAD_ID: i32 = -303;
pub const MIG_BAD_ARGUMENTS: i32 = -304;
pub const MIG_NO_REPLY: i32 = -305;
pub const MIG_EXCEPTION: i32 = -306;
pub const MIG_ARRAY_TOO_LARGE: i32 = -307;
pub const MIG_SERVER_DIED: i32 = -308;
pub const MIG_TRAILER_ERROR: i32 = -309;
pub const mach_port_MSG_COUNT: u32 = 43;
pub const ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_ZONE_NAME_MAX_LEN: u32 = 80;
pub const MACH_MEMORY_INFO_NAME_MAX_LEN: u32 = 80;
pub const MAX_ZTRACE_DEPTH: u32 = 15;
pub const ZOP_ALLOC: u32 = 1;
pub const ZOP_FREE: u32 = 0;
pub const LOCKGROUP_MAX_NAME: u32 = 64;
pub const LOCKGROUP_ATTR_STAT: u32 = 1;
pub const MACH_CORE_FILEHEADER_SIGNATURE: u64 = 27973006578180434;
pub const MACH_CORE_FILEHEADER_V2_SIGNATURE: u64 = 7161089684267036482;
pub const MACH_CORE_FILEHEADER_MAXFILES: u32 = 16;
pub const MACH_CORE_FILEHEADER_NAMELEN: u32 = 16;
pub const MACH_CORE_FILEHEADER_V2_FLAG_LOG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_FILEHEADER_V2_FLAG_EXISTING_COREFILE_KEY_FORMAT_NIST_P256: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAG_NEXT_COREFILE_KEY_FORMAT_NIST_P256: u32 = 65536;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK: u32 = 256;
pub const MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_COREFILE_KEY_FORMAT_MASK: u32 = 65536;
pub const MACH_CORE_DETAILS_V2_FLAG_ENCRYPTED_AEA: u32 = 1;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_ZLIB: u32 = 256;
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_LZ4: u32 = 512;
pub const KOBJECT_DESCRIPTION_LENGTH: u32 = 512;
pub const __VMCS_HOST_RSP: u32 = 27668;
pub const GUEST_INTRBILITY_STI_BLOCKING: u32 = 1;
pub const GUEST_INTRBILITY_MOVSS_BLOCKING: u32 = 2;
pub const GUEST_INTRBILITY_SMI_BLOCKING: u32 = 4;
pub const GUEST_INTRBILITY_NMI_BLOCKING: u32 = 8;
pub type os_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type os_block_t = *mut ::std::os::raw::c_void;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
pub const hv_x86_reg_t_HV_X86_RIP: hv_x86_reg_t = 0;
pub const hv_x86_reg_t_HV_X86_RFLAGS: hv_x86_reg_t = 1;
pub const hv_x86_reg_t_HV_X86_RAX: hv_x86_reg_t = 2;
pub const hv_x86_reg_t_HV_X86_RCX: hv_x86_reg_t = 3;
pub const hv_x86_reg_t_HV_X86_RDX: hv_x86_reg_t = 4;
pub const hv_x86_reg_t_HV_X86_RBX: hv_x86_reg_t = 5;
pub const hv_x86_reg_t_HV_X86_RSI: hv_x86_reg_t = 6;
pub const hv_x86_reg_t_HV_X86_RDI: hv_x86_reg_t = 7;
pub const hv_x86_reg_t_HV_X86_RSP: hv_x86_reg_t = 8;
pub const hv_x86_reg_t_HV_X86_RBP: hv_x86_reg_t = 9;
pub const hv_x86_reg_t_HV_X86_R8: hv_x86_reg_t = 10;
pub const hv_x86_reg_t_HV_X86_R9: hv_x86_reg_t = 11;
pub const hv_x86_reg_t_HV_X86_R10: hv_x86_reg_t = 12;
pub const hv_x86_reg_t_HV_X86_R11: hv_x86_reg_t = 13;
pub const hv_x86_reg_t_HV_X86_R12: hv_x86_reg_t = 14;
pub const hv_x86_reg_t_HV_X86_R13: hv_x86_reg_t = 15;
pub const hv_x86_reg_t_HV_X86_R14: hv_x86_reg_t = 16;
pub const hv_x86_reg_t_HV_X86_R15: hv_x86_reg_t = 17;
pub const hv_x86_reg_t_HV_X86_CS: hv_x86_reg_t = 18;
pub const hv_x86_reg_t_HV_X86_SS: hv_x86_reg_t = 19;
pub const hv_x86_reg_t_HV_X86_DS: hv_x86_reg_t = 20;
pub const hv_x86_reg_t_HV_X86_ES: hv_x86_reg_t = 21;
pub const hv_x86_reg_t_HV_X86_FS: hv_x86_reg_t = 22;
pub const hv_x86_reg_t_HV_X86_GS: hv_x86_reg_t = 23;
pub const hv_x86_reg_t_HV_X86_IDT_BASE: hv_x86_reg_t = 24;
pub const hv_x86_reg_t_HV_X86_IDT_LIMIT: hv_x86_reg_t = 25;
pub const hv_x86_reg_t_HV_X86_GDT_BASE: hv_x86_reg_t = 26;
pub const hv_x86_reg_t_HV_X86_GDT_LIMIT: hv_x86_reg_t = 27;
pub const hv_x86_reg_t_HV_X86_LDTR: hv_x86_reg_t = 28;
pub const hv_x86_reg_t_HV_X86_LDT_BASE: hv_x86_reg_t = 29;
pub const hv_x86_reg_t_HV_X86_LDT_LIMIT: hv_x86_reg_t = 30;
pub const hv_x86_reg_t_HV_X86_LDT_AR: hv_x86_reg_t = 31;
pub const hv_x86_reg_t_HV_X86_TR: hv_x86_reg_t = 32;
pub const hv_x86_reg_t_HV_X86_TSS_BASE: hv_x86_reg_t = 33;
pub const hv_x86_reg_t_HV_X86_TSS_LIMIT: hv_x86_reg_t = 34;
pub const hv_x86_reg_t_HV_X86_TSS_AR: hv_x86_reg_t = 35;
pub const hv_x86_reg_t_HV_X86_CR0: hv_x86_reg_t = 36;
pub const hv_x86_reg_t_HV_X86_CR1: hv_x86_reg_t = 37;
pub const hv_x86_reg_t_HV_X86_CR2: hv_x86_reg_t = 38;
pub const hv_x86_reg_t_HV_X86_CR3: hv_x86_reg_t = 39;
pub const hv_x86_reg_t_HV_X86_CR4: hv_x86_reg_t = 40;
pub const hv_x86_reg_t_HV_X86_DR0: hv_x86_reg_t = 41;
pub const hv_x86_reg_t_HV_X86_DR1: hv_x86_reg_t = 42;
pub const hv_x86_reg_t_HV_X86_DR2: hv_x86_reg_t = 43;
pub const hv_x86_reg_t_HV_X86_DR3: hv_x86_reg_t = 44;
pub const hv_x86_reg_t_HV_X86_DR4: hv_x86_reg_t = 45;
pub const hv_x86_reg_t_HV_X86_DR5: hv_x86_reg_t = 46;
pub const hv_x86_reg_t_HV_X86_DR6: hv_x86_reg_t = 47;
pub const hv_x86_reg_t_HV_X86_DR7: hv_x86_reg_t = 48;
pub const hv_x86_reg_t_HV_X86_TPR: hv_x86_reg_t = 49;
pub const hv_x86_reg_t_HV_X86_XCR0: hv_x86_reg_t = 50;
pub const hv_x86_reg_t_HV_X86_REGISTERS_MAX: hv_x86_reg_t = 51;
#[doc = " @enum       hv_x86_reg_t\n @abstract   x86 architectural register IDs"]
pub type hv_x86_reg_t = ::std::os::raw::c_uint;
pub type kern_return_t = ::std::os::raw::c_int;
pub type mach_error_t = kern_return_t;
pub type mach_error_fn_t = ::std::option::Option<unsafe extern "C" fn() -> mach_error_t>;
pub const HV_SUCCESS: _bindgen_ty_1 = 0;
pub const HV_ERROR: _bindgen_ty_1 = -85377023;
pub const HV_BUSY: _bindgen_ty_1 = -85377022;
pub const HV_BAD_ARGUMENT: _bindgen_ty_1 = -85377021;
pub const HV_NO_RESOURCES: _bindgen_ty_1 = -85377019;
pub const HV_NO_DEVICE: _bindgen_ty_1 = -85377018;
pub const HV_DENIED: _bindgen_ty_1 = -85377017;
pub const HV_FAULT: _bindgen_ty_1 = -85377016;
pub const HV_UNSUPPORTED: _bindgen_ty_1 = -85377009;
#[doc = " @enum       hv_return_t\n @abstract   Hypervisor Framework return codes"]
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub type hv_return_t = mach_error_t;
pub const hv_boot_state_HV_BS_INIT: hv_boot_state = 0;
pub const hv_boot_state_HV_BS_SIPI: hv_boot_state = 1;
pub const hv_boot_state_HV_BS_RUNNING: hv_boot_state = 2;
pub type hv_boot_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hv_apic_state {
    pub apic_gpa: u64,
    pub apic_controls: u64,
    pub tsc_deadline: u64,
    pub apic_id: u32,
    pub ver: u32,
    pub tpr: u32,
    pub apr: u32,
    pub ldr: u32,
    pub dfr: u32,
    pub svr: u32,
    pub isr: [u32; 8usize],
    pub tmr: [u32; 8usize],
    pub irr: [u32; 8usize],
    pub esr: u32,
    pub lvt: [u32; 7usize],
    pub icr: [u32; 2usize],
    pub icr_timer: u32,
    pub dcr_timer: u32,
    pub ccr_timer: u32,
    pub esr_pending: u32,
    pub boot_state: hv_boot_state,
    pub aeoi: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_hv_apic_state() {
    const UNINIT: ::std::mem::MaybeUninit<hv_apic_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hv_apic_state>(),
        240usize,
        concat!("Size of: ", stringify!(hv_apic_state))
    );
    assert_eq!(
        ::std::mem::align_of::<hv_apic_state>(),
        8usize,
        concat!("Alignment of ", stringify!(hv_apic_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apic_gpa) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(apic_gpa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apic_controls) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(apic_controls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsc_deadline) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(tsc_deadline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apic_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(apic_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ver) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tpr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(tpr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).apr) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(apr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ldr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(ldr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfr) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(dfr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).svr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(svr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isr) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(isr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmr) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(tmr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irr) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(irr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esr) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(esr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(lvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icr) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(icr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icr_timer) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(icr_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dcr_timer) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(dcr_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ccr_timer) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(ccr_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esr_pending) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(esr_pending)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boot_state) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(boot_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aeoi) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state),
            "::",
            stringify!(aeoi)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hv_apic_state_ext_t {
    pub version: u32,
    pub state: hv_apic_state,
}
#[test]
fn bindgen_test_layout_hv_apic_state_ext_t() {
    const UNINIT: ::std::mem::MaybeUninit<hv_apic_state_ext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hv_apic_state_ext_t>(),
        248usize,
        concat!("Size of: ", stringify!(hv_apic_state_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hv_apic_state_ext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hv_apic_state_ext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state_ext_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_apic_state_ext_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hv_atpic_state {
    pub ready: bool,
    pub icw_num: u8,
    pub rd_cmd_reg: u8,
    pub aeoi: bool,
    pub poll: bool,
    pub rotate: bool,
    pub sfn: bool,
    pub irq_base: u8,
    pub request: u8,
    pub service: u8,
    pub mask: u8,
    pub smm: bool,
    pub last_request: u8,
    pub lowprio: u8,
    pub intr_raised: bool,
    pub elc: u8,
}
#[test]
fn bindgen_test_layout_hv_atpic_state() {
    const UNINIT: ::std::mem::MaybeUninit<hv_atpic_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hv_atpic_state>(),
        16usize,
        concat!("Size of: ", stringify!(hv_atpic_state))
    );
    assert_eq!(
        ::std::mem::align_of::<hv_atpic_state>(),
        1usize,
        concat!("Alignment of ", stringify!(hv_atpic_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ready) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(ready)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icw_num) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(icw_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rd_cmd_reg) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(rd_cmd_reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aeoi) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(aeoi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poll) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(poll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rotate) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(rotate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sfn) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(sfn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irq_base) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(irq_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(service)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smm) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(smm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_request) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(last_request)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lowprio) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(lowprio)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intr_raised) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(intr_raised)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elc) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state),
            "::",
            stringify!(elc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hv_atpic_state_ext_t {
    pub version: u32,
    pub state: hv_atpic_state,
}
#[test]
fn bindgen_test_layout_hv_atpic_state_ext_t() {
    const UNINIT: ::std::mem::MaybeUninit<hv_atpic_state_ext_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hv_atpic_state_ext_t>(),
        20usize,
        concat!("Size of: ", stringify!(hv_atpic_state_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hv_atpic_state_ext_t>(),
        4usize,
        concat!("Alignment of ", stringify!(hv_atpic_state_ext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state_ext_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_atpic_state_ext_t),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hv_ioapic_state {
    pub rtbl: [u64; 32usize],
    pub irr: u32,
    pub ioa_id: u32,
    pub ioregsel: u32,
}
#[test]
fn bindgen_test_layout_hv_ioapic_state() {
    const UNINIT: ::std::mem::MaybeUninit<hv_ioapic_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hv_ioapic_state>(),
        272usize,
        concat!("Size of: ", stringify!(hv_ioapic_state))
    );
    assert_eq!(
        ::std::mem::align_of::<hv_ioapic_state>(),
        8usize,
        concat!("Alignment of ", stringify!(hv_ioapic_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rtbl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ioapic_state),
            "::",
            stringify!(rtbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).irr) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ioapic_state),
            "::",
            stringify!(irr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioa_id) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ioapic_state),
            "::",
            stringify!(ioa_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ioregsel) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ioapic_state),
            "::",
            stringify!(ioregsel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hv_ioapic_state_ext_t {
    pub version: u32,
    pub state: hv_ioapic_state,
}
#[test]
fn bindgen_test_layout_hv_ioapic_state_ext_t() {
    const UNINIT: ::std::mem::MaybeUninit<hv_ioapic_state_ext_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hv_ioapic_state_ext_t>(),
        280usize,
        concat!("Size of: ", stringify!(hv_ioapic_state_ext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hv_ioapic_state_ext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hv_ioapic_state_ext_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ioapic_state_ext_t),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ioapic_state_ext_t),
            "::",
            stringify!(state)
        )
    );
}
pub type boolean_t = ::std::os::raw::c_uint;
pub type natural_t = __darwin_natural_t;
pub type integer_t = ::std::os::raw::c_int;
pub type vm_offset_t = usize;
pub type vm_size_t = usize;
pub type mach_vm_address_t = u64;
pub type mach_vm_offset_t = u64;
pub type mach_vm_size_t = u64;
pub type vm_map_offset_t = u64;
pub type vm_map_address_t = u64;
pub type vm_map_size_t = u64;
pub type mach_port_context_t = mach_vm_address_t;
pub type mach_port_name_t = natural_t;
pub type mach_port_name_array_t = *mut mach_port_name_t;
pub type mach_port_t = __darwin_mach_port_t;
pub type mach_port_array_t = *mut mach_port_t;
pub type mach_port_right_t = natural_t;
pub type mach_port_type_t = natural_t;
pub type mach_port_type_array_t = *mut mach_port_type_t;
pub type mach_port_urefs_t = natural_t;
pub type mach_port_delta_t = integer_t;
pub type mach_port_seqno_t = natural_t;
pub type mach_port_mscount_t = natural_t;
pub type mach_port_msgcount_t = natural_t;
pub type mach_port_rights_t = natural_t;
pub type mach_port_srights_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_status {
    pub mps_pset: mach_port_rights_t,
    pub mps_seqno: mach_port_seqno_t,
    pub mps_mscount: mach_port_mscount_t,
    pub mps_qlimit: mach_port_msgcount_t,
    pub mps_msgcount: mach_port_msgcount_t,
    pub mps_sorights: mach_port_rights_t,
    pub mps_srights: boolean_t,
    pub mps_pdrequest: boolean_t,
    pub mps_nsrequest: boolean_t,
    pub mps_flags: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_status() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_status> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_status>(),
        40usize,
        concat!("Size of: ", stringify!(mach_port_status))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_status>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_status))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_pset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_seqno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_mscount) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_mscount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_qlimit) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_qlimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_msgcount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_msgcount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_sorights) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_sorights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_srights) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_srights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_pdrequest) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_pdrequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_nsrequest) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_nsrequest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mps_flags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_status),
            "::",
            stringify!(mps_flags)
        )
    );
}
pub type mach_port_status_t = mach_port_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_limits {
    pub mpl_qlimit: mach_port_msgcount_t,
}
#[test]
fn bindgen_test_layout_mach_port_limits() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_limits> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_limits>(),
        4usize,
        concat!("Size of: ", stringify!(mach_port_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_limits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpl_qlimit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_limits),
            "::",
            stringify!(mpl_qlimit)
        )
    );
}
pub type mach_port_limits_t = mach_port_limits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_info_ext {
    pub mpie_status: mach_port_status_t,
    pub mpie_boost_cnt: mach_port_msgcount_t,
    pub reserved: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_mach_port_info_ext() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_info_ext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_info_ext>(),
        68usize,
        concat!("Size of: ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_info_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_info_ext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpie_status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpie_boost_cnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(mpie_boost_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_info_ext),
            "::",
            stringify!(reserved)
        )
    );
}
pub type mach_port_info_ext_t = mach_port_info_ext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_guard_info {
    pub mpgi_guard: u64,
}
#[test]
fn bindgen_test_layout_mach_port_guard_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_guard_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_guard_info>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_guard_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_guard_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_guard_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpgi_guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_guard_info),
            "::",
            stringify!(mpgi_guard)
        )
    );
}
pub type mach_port_guard_info_t = mach_port_guard_info;
pub type mach_port_info_t = *mut integer_t;
pub type mach_port_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_qos {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub len: natural_t,
}
#[test]
fn bindgen_test_layout_mach_port_qos() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_qos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_qos>(),
        8usize,
        concat!("Size of: ", stringify!(mach_port_qos))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_qos>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_port_qos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_qos),
            "::",
            stringify!(len)
        )
    );
}
impl mach_port_qos {
    #[inline]
    pub fn name(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_name(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn prealloc(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_prealloc(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        name: ::std::os::raw::c_uint,
        prealloc: ::std::os::raw::c_uint,
        pad1: boolean_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let name: u32 = unsafe { ::std::mem::transmute(name) };
            name as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let prealloc: u32 = unsafe { ::std::mem::transmute(prealloc) };
            prealloc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_port_qos_t = mach_port_qos;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_service_port_info {
    pub mspi_string_name: [::std::os::raw::c_char; 255usize],
    pub mspi_domain_type: u8,
}
#[test]
fn bindgen_test_layout_mach_service_port_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_service_port_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_service_port_info>(),
        256usize,
        concat!("Size of: ", stringify!(mach_service_port_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_service_port_info>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_service_port_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mspi_string_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_service_port_info),
            "::",
            stringify!(mspi_string_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mspi_domain_type) as usize - ptr as usize },
        255usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_service_port_info),
            "::",
            stringify!(mspi_domain_type)
        )
    );
}
pub type mach_service_port_info_data_t = mach_service_port_info;
pub type mach_service_port_info_t = *mut mach_service_port_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mach_port_options {
    pub flags: u32,
    pub mpl: mach_port_limits_t,
    pub __bindgen_anon_1: mach_port_options__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_port_options__bindgen_ty_1 {
    pub reserved: [u64; 2usize],
    pub work_interval_port: mach_port_name_t,
    pub service_port_info: mach_service_port_info_t,
    pub service_port_name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_port_options__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_options__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_options__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_interval_port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(work_interval_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_port_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(service_port_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_port_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options__bindgen_ty_1),
            "::",
            stringify!(service_port_name)
        )
    );
}
#[test]
fn bindgen_test_layout_mach_port_options() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_options> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_options>(),
        24usize,
        concat!("Size of: ", stringify!(mach_port_options))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_options>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_port_options))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpl) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_options),
            "::",
            stringify!(mpl)
        )
    );
}
pub type mach_port_options_t = mach_port_options;
pub type mach_port_options_ptr_t = *mut mach_port_options_t;
pub const mach_port_guard_exception_codes_kGUARD_EXC_DESTROY: mach_port_guard_exception_codes = 1;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS: mach_port_guard_exception_codes = 2;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_OPTIONS:
    mach_port_guard_exception_codes = 3;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SET_CONTEXT: mach_port_guard_exception_codes =
    4;
pub const mach_port_guard_exception_codes_kGUARD_EXC_THREAD_SET_STATE:
    mach_port_guard_exception_codes = 5;
pub const mach_port_guard_exception_codes_kGUARD_EXC_EXCEPTION_BEHAVIOR_ENFORCE:
    mach_port_guard_exception_codes = 6;
pub const mach_port_guard_exception_codes_kGUARD_EXC_UNGUARDED: mach_port_guard_exception_codes = 8;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INCORRECT_GUARD:
    mach_port_guard_exception_codes = 16;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE: mach_port_guard_exception_codes =
    32;
pub const mach_port_guard_exception_codes_kGUARD_EXC_STRICT_REPLY: mach_port_guard_exception_codes =
    64;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MSG_FILTERED: mach_port_guard_exception_codes =
    128;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_RIGHT:
    mach_port_guard_exception_codes = 256;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_NAME: mach_port_guard_exception_codes =
    512;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_VALUE:
    mach_port_guard_exception_codes = 1024;
pub const mach_port_guard_exception_codes_kGUARD_EXC_INVALID_ARGUMENT:
    mach_port_guard_exception_codes = 2048;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RIGHT_EXISTS: mach_port_guard_exception_codes =
    4096;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_NO_SPACE:
    mach_port_guard_exception_codes = 8192;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_FAILURE: mach_port_guard_exception_codes =
    16384;
pub const mach_port_guard_exception_codes_kGUARD_EXC_KERN_RESOURCE:
    mach_port_guard_exception_codes = 32768;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_REPLY:
    mach_port_guard_exception_codes = 65536;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_VOUCHER:
    mach_port_guard_exception_codes = 131072;
pub const mach_port_guard_exception_codes_kGUARD_EXC_SEND_INVALID_RIGHT:
    mach_port_guard_exception_codes = 262144;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_INVALID_NAME:
    mach_port_guard_exception_codes = 524288;
pub const mach_port_guard_exception_codes_kGUARD_EXC_RCV_GUARDED_DESC:
    mach_port_guard_exception_codes = 1048576;
pub const mach_port_guard_exception_codes_kGUARD_EXC_MOD_REFS_NON_FATAL:
    mach_port_guard_exception_codes = 2097152;
pub const mach_port_guard_exception_codes_kGUARD_EXC_IMMOVABLE_NON_FATAL:
    mach_port_guard_exception_codes = 4194304;
pub const mach_port_guard_exception_codes_kGUARD_EXC_REQUIRE_REPLY_PORT_SEMANTICS:
    mach_port_guard_exception_codes = 8388608;
pub type mach_port_guard_exception_codes = ::std::os::raw::c_uint;
pub const kHV_ION_NONE: _bindgen_ty_2 = 0;
pub const kHV_ION_ANY_VALUE: _bindgen_ty_2 = 2;
pub const kHV_ION_ANY_SIZE: _bindgen_ty_2 = 4;
pub const kHV_ION_EXIT_FULL: _bindgen_ty_2 = 8;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub type mach_msg_timeout_t = natural_t;
pub type mach_msg_bits_t = ::std::os::raw::c_uint;
pub type mach_msg_size_t = natural_t;
pub type mach_msg_id_t = integer_t;
pub type mach_msg_priority_t = ::std::os::raw::c_uint;
pub type mach_msg_type_name_t = ::std::os::raw::c_uint;
pub type mach_msg_copy_options_t = ::std::os::raw::c_uint;
pub type mach_msg_guard_flags_t = ::std::os::raw::c_uint;
pub type mach_msg_descriptor_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_type_descriptor_t {
    pub pad1: natural_t,
    pub pad2: mach_msg_size_t,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_type_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_type_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_type_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_type_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_type_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad2) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_type_descriptor_t),
            "::",
            stringify!(pad2)
        )
    );
}
impl mach_msg_type_descriptor_t {
    #[inline]
    pub fn pad3(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_pad3(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad3: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let pad3: u32 = unsafe { ::std::mem::transmute(pad3) };
            pad3 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_port_descriptor_t {
    pub name: mach_port_t,
    pub pad1: mach_msg_size_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_port_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_port_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_port_descriptor_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_port_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_port_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_port_descriptor_t),
            "::",
            stringify!(pad1)
        )
    );
}
impl mach_msg_port_descriptor_t {
    #[inline]
    pub fn pad2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_pad2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad2: ::std::os::raw::c_uint,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let pad2: u32 = unsafe { ::std::mem::transmute(pad2) };
            pad2 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor32_t {
    pub address: u32,
    pub size: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor32_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_descriptor32_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor32_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor32_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor64_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_descriptor64_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor64_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor64_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub size: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_descriptor_t),
            "::",
            stringify!(size)
        )
    );
}
impl mach_msg_ool_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn pad1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_pad1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        pad1: ::std::os::raw::c_uint,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let pad1: u32 = unsafe { ::std::mem::transmute(pad1) };
            pad1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor32_t {
    pub address: u32,
    pub count: mach_msg_size_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor32_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_ports_descriptor32_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor32_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor32_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_ool_ports_descriptor32_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor32_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor32_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor64_t {
    pub address: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor64_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_ports_descriptor64_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor64_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_ool_ports_descriptor64_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor64_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor64_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_ool_ports_descriptor_t {
    pub address: *mut ::std::os::raw::c_void,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_ool_ports_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_ool_ports_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_ool_ports_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_ool_ports_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_ool_ports_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_ool_ports_descriptor_t),
            "::",
            stringify!(count)
        )
    );
}
impl mach_msg_ool_ports_descriptor_t {
    #[inline]
    pub fn deallocate(&self) -> boolean_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_deallocate(&mut self, val: boolean_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn copy(&self) -> mach_msg_copy_options_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_copy(&mut self, val: mach_msg_copy_options_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        deallocate: boolean_t,
        copy: mach_msg_copy_options_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let deallocate: u32 = unsafe { ::std::mem::transmute(deallocate) };
            deallocate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let copy: u32 = unsafe { ::std::mem::transmute(copy) };
            copy as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor32_t {
    pub context: u32,
    pub name: mach_port_name_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor32_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_guarded_port_descriptor32_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor32_t>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(mach_msg_guarded_port_descriptor32_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor32_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor32_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor32_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor32_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor64_t {
    pub context: u64,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor64_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_guarded_port_descriptor64_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor64_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(mach_msg_guarded_port_descriptor64_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor64_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor64_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor64_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor64_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_guarded_port_descriptor_t {
    pub context: mach_port_context_t,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_mach_msg_guarded_port_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_guarded_port_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_guarded_port_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_guarded_port_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_guarded_port_descriptor_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_msg_guarded_port_descriptor_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_guarded_port_descriptor_t),
            "::",
            stringify!(name)
        )
    );
}
impl mach_msg_guarded_port_descriptor_t {
    #[inline]
    pub fn flags(&self) -> mach_msg_guard_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_msg_guard_flags_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn disposition(&self) -> mach_msg_type_name_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_disposition(&mut self, val: mach_msg_type_name_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> mach_msg_descriptor_type_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: mach_msg_descriptor_type_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_msg_guard_flags_t,
        disposition: mach_msg_type_name_t,
        type_: mach_msg_descriptor_type_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let disposition: u32 = unsafe { ::std::mem::transmute(disposition) };
            disposition as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_descriptor_t {
    pub port: mach_msg_port_descriptor_t,
    pub out_of_line: mach_msg_ool_descriptor_t,
    pub ool_ports: mach_msg_ool_ports_descriptor_t,
    pub type_: mach_msg_type_descriptor_t,
    pub guarded_port: mach_msg_guarded_port_descriptor_t,
}
#[test]
fn bindgen_test_layout_mach_msg_descriptor_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_descriptor_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_descriptor_t>(),
        16usize,
        concat!("Size of: ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_descriptor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_descriptor_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_of_line) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(out_of_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ool_ports) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(ool_ports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guarded_port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_descriptor_t),
            "::",
            stringify!(guarded_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_body_t {
    pub msgh_descriptor_count: mach_msg_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_body_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_body_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_body_t>(),
        4usize,
        concat!("Size of: ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_body_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_body_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_descriptor_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_body_t),
            "::",
            stringify!(msgh_descriptor_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_header_t {
    pub msgh_bits: mach_msg_bits_t,
    pub msgh_size: mach_msg_size_t,
    pub msgh_remote_port: mach_port_t,
    pub msgh_local_port: mach_port_t,
    pub msgh_voucher_port: mach_port_name_t,
    pub msgh_id: mach_msg_id_t,
}
#[test]
fn bindgen_test_layout_mach_msg_header_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_header_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_header_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_header_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_header_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_remote_port) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_remote_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_local_port) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_local_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_voucher_port) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_voucher_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_id) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_header_t),
            "::",
            stringify!(msgh_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_base_t {
    pub header: mach_msg_header_t,
    pub body: mach_msg_body_t,
}
#[test]
fn bindgen_test_layout_mach_msg_base_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_base_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_base_t>(),
        28usize,
        concat!("Size of: ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_base_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_base_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_base_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_base_t),
            "::",
            stringify!(body)
        )
    );
}
pub type mach_msg_trailer_type_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_size_t = ::std::os::raw::c_uint;
pub type mach_msg_trailer_info_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
}
#[test]
fn bindgen_test_layout_mach_msg_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_trailer_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_trailer_t>(),
        8usize,
        concat!("Size of: ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_seqno_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
}
#[test]
fn bindgen_test_layout_mach_msg_seqno_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_seqno_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_seqno_trailer_t>(),
        12usize,
        concat!("Size of: ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_seqno_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_seqno_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_seqno_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct security_token_t {
    pub val: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout_security_token_t() {
    const UNINIT: ::std::mem::MaybeUninit<security_token_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<security_token_t>(),
        8usize,
        concat!("Size of: ", stringify!(security_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<security_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(security_token_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(security_token_t),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_security_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_security_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_security_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_security_trailer_t>(),
        20usize,
        concat!("Size of: ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_security_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_security_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_security_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct audit_token_t {
    pub val: [::std::os::raw::c_uint; 8usize],
}
#[test]
fn bindgen_test_layout_audit_token_t() {
    const UNINIT: ::std::mem::MaybeUninit<audit_token_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<audit_token_t>(),
        32usize,
        concat!("Size of: ", stringify!(audit_token_t))
    );
    assert_eq!(
        ::std::mem::align_of::<audit_token_t>(),
        4usize,
        concat!("Alignment of ", stringify!(audit_token_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(audit_token_t),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_audit_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
}
#[test]
fn bindgen_test_layout_mach_msg_audit_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_audit_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_audit_trailer_t>(),
        52usize,
        concat!("Size of: ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_audit_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_audit_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_audit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_audit_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_context_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout_mach_msg_context_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_context_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_context_trailer_t>(),
        60usize,
        concat!("Size of: ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_context_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_context_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_audit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_context) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_context_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_labels_t {
    pub sender: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_msg_labels_t() {
    const UNINIT: ::std::mem::MaybeUninit<msg_labels_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msg_labels_t>(),
        4usize,
        concat!("Size of: ", stringify!(msg_labels_t))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_labels_t>(),
        4usize,
        concat!("Alignment of ", stringify!(msg_labels_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sender) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_labels_t),
            "::",
            stringify!(sender)
        )
    );
}
pub type mach_msg_filter_id = ::std::os::raw::c_int;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_mac_trailer_t {
    pub msgh_trailer_type: mach_msg_trailer_type_t,
    pub msgh_trailer_size: mach_msg_trailer_size_t,
    pub msgh_seqno: mach_port_seqno_t,
    pub msgh_sender: security_token_t,
    pub msgh_audit: audit_token_t,
    pub msgh_context: mach_port_context_t,
    pub msgh_ad: mach_msg_filter_id,
    pub msgh_labels: msg_labels_t,
}
#[test]
fn bindgen_test_layout_mach_msg_mac_trailer_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_mac_trailer_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_mac_trailer_t>(),
        68usize,
        concat!("Size of: ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_mac_trailer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_mac_trailer_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_trailer_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_trailer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_seqno) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_seqno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_sender) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_sender)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_audit) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_audit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_context) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_ad) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_ad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_labels) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_mac_trailer_t),
            "::",
            stringify!(msgh_labels)
        )
    );
}
pub type mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub type mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
extern "C" {
    pub static KERNEL_SECURITY_TOKEN: security_token_t;
}
extern "C" {
    pub static KERNEL_AUDIT_TOKEN: audit_token_t;
}
pub type mach_msg_options_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_send_t {
    pub header: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_send_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_empty_send_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_send_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_send_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_send_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_send_t),
            "::",
            stringify!(header)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_msg_empty_rcv_t {
    pub header: mach_msg_header_t,
    pub trailer: mach_msg_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_rcv_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_empty_rcv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_rcv_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_rcv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_rcv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_rcv_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_rcv_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mach_msg_empty_t {
    pub send: mach_msg_empty_send_t,
    pub rcv: mach_msg_empty_rcv_t,
}
#[test]
fn bindgen_test_layout_mach_msg_empty_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_msg_empty_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_msg_empty_t>(),
        32usize,
        concat!("Size of: ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_msg_empty_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_msg_empty_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_t),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rcv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_msg_empty_t),
            "::",
            stringify!(rcv)
        )
    );
}
pub type mach_msg_type_size_t = natural_t;
pub type mach_msg_type_number_t = natural_t;
pub type mach_msg_option_t = integer_t;
pub type mach_msg_return_t = kern_return_t;
extern "C" {
    pub fn mach_msg_overwrite(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
        rcv_msg: *mut mach_msg_header_t,
        rcv_limit: mach_msg_size_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_msg(
        msg: *mut mach_msg_header_t,
        option: mach_msg_option_t,
        send_size: mach_msg_size_t,
        rcv_size: mach_msg_size_t,
        rcv_name: mach_port_name_t,
        timeout: mach_msg_timeout_t,
        notify: mach_port_name_t,
    ) -> mach_msg_return_t;
}
extern "C" {
    pub fn mach_voucher_deallocate(voucher: mach_port_name_t) -> kern_return_t;
}
pub const HV_CAP_VCPUMAX: _bindgen_ty_3 = 0;
pub const HV_CAP_ADDRSPACEMAX: _bindgen_ty_3 = 1;
#[doc = " @enum       hv_capability_t\n @abstract   Capability IDs"]
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub type hv_capability_t = u64;
pub const HV_VM_SPACE_DEFAULT: _bindgen_ty_4 = 0;
#[doc = " @typedef    hv_vm_space_t\n @abstract   Type of a guest address space"]
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub type hv_vm_space_t = ::std::os::raw::c_uint;
pub const HV_VM_DEFAULT: _bindgen_ty_5 = 0;
pub const HV_VM_SPECIFY_MITIGATIONS: _bindgen_ty_5 = 1;
pub const HV_VM_MITIGATION_A_ENABLE: _bindgen_ty_5 = 2;
pub const HV_VM_MITIGATION_B_ENABLE: _bindgen_ty_5 = 4;
pub const HV_VM_MITIGATION_C_ENABLE: _bindgen_ty_5 = 8;
pub const HV_VM_MITIGATION_D_ENABLE: _bindgen_ty_5 = 16;
pub const HV_VM_MITIGATION_E_ENABLE: _bindgen_ty_5 = 64;
pub const HV_VM_ACCEL_APIC: _bindgen_ty_5 = 1024;
#[doc = " @enum       hv_vm_options_t\n @abstract   Options for hv_vm_create()"]
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type hv_vm_options_t = u64;
pub const HV_VCPU_DEFAULT: _bindgen_ty_6 = 0;
pub const HV_VCPU_ACCEL_RDPMC: _bindgen_ty_6 = 1;
pub const HV_VCPU_TSC_RELATIVE: _bindgen_ty_6 = 2;
#[doc = " @enum       hv_vcpu_options_t\n @abstract   Options for hv_vcpu_create()"]
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub type hv_vcpu_options_t = u64;
pub const HV_MEMORY_READ: _bindgen_ty_7 = 1;
pub const HV_MEMORY_WRITE: _bindgen_ty_7 = 2;
pub const HV_MEMORY_EXEC: _bindgen_ty_7 = 4;
pub const HV_MEMORY_UEXEC: _bindgen_ty_7 = 8;
pub const HV_MEMORY_MAXPROT: _bindgen_ty_7 = 16;
pub const HV_MEMORY_MAXPROT_READ: _bindgen_ty_7 = 32;
pub const HV_MEMORY_MAXPROT_WRITE: _bindgen_ty_7 = 64;
pub const HV_MEMORY_MAXPROT_EXEC: _bindgen_ty_7 = 128;
pub const HV_MEMORY_MAXPROT_UEXEC: _bindgen_ty_7 = 256;
#[doc = " @enum       hv_memory_flags_t\n @abstract   Guest physical memory region permissions for hv_vm_map()\n             and hv_vm_protect()"]
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub type hv_memory_flags_t = u64;
pub const HV_MSR_NONE: _bindgen_ty_8 = 0;
pub const HV_MSR_READ: _bindgen_ty_8 = 1;
pub const HV_MSR_WRITE: _bindgen_ty_8 = 2;
#[doc = " @enum       hv_msr_flags_t\n @abstract   Native MSR permissions for hv_vm_enable_managed_msr()"]
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub type hv_msr_flags_t = u32;
pub const HV_ION_NONE: _bindgen_ty_9 = 0;
pub const HV_ION_ANY_VALUE: _bindgen_ty_9 = 2;
pub const HV_ION_ANY_SIZE: _bindgen_ty_9 = 4;
pub const HV_ION_EXIT_FULL: _bindgen_ty_9 = 8;
#[doc = " @enum       hv_ion_flags_t\n @abstract   Options for hv_vcpu_add_io_notifier()\n @constant   HV_ION_ANY_VALUE    Match on any value\n @constant   HV_ION_ANY_SIZE     Match on any size\n @constant   HV_ION_EXIT_FULL    Return if notification queue is full"]
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub type hv_ion_flags_t = u32;
#[doc = " @typedef    hv_ion_message_t\n @abstract   Mach message sent when an IO notifier fires\n @field      header  Mach message header\n @field      addr    Address of the IO write\n @field      size    Size of the value written\n @field      value   Value written\n @field      trailer Mach message trailer"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hv_ion_message_t {
    pub header: mach_msg_header_t,
    pub addr: u64,
    pub size: u64,
    pub value: u64,
    pub trailer: mach_msg_trailer_t,
}
#[test]
fn bindgen_test_layout_hv_ion_message_t() {
    const UNINIT: ::std::mem::MaybeUninit<hv_ion_message_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hv_ion_message_t>(),
        56usize,
        concat!("Size of: ", stringify!(hv_ion_message_t))
    );
    assert_eq!(
        ::std::mem::align_of::<hv_ion_message_t>(),
        8usize,
        concat!("Alignment of ", stringify!(hv_ion_message_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ion_message_t),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ion_message_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ion_message_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ion_message_t),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hv_ion_message_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[doc = " @typedef    hv_vcpu_id_t\n @abstract   Type of a vCPU ID"]
pub type hv_vcpuid_t = ::std::os::raw::c_uint;
#[doc = " @typedef    hv_uvaddr_t\n @abstract   Type of a user virtual address"]
pub type hv_uvaddr_t = *const ::std::os::raw::c_void;
#[doc = " @typedef    hv_gpaddr_t\n @abstract   Type of a guest physical address"]
pub type hv_gpaddr_t = u64;
pub const hv_vm_exitinfo_t_HV_VM_EXITINFO_VMX: hv_vm_exitinfo_t = 1;
pub const hv_vm_exitinfo_t_HV_VM_EXITINFO_INIT_AP: hv_vm_exitinfo_t = 2;
pub const hv_vm_exitinfo_t_HV_VM_EXITINFO_STARTUP_AP: hv_vm_exitinfo_t = 3;
pub const hv_vm_exitinfo_t_HV_VM_EXITINFO_IOAPIC_EOI: hv_vm_exitinfo_t = 4;
pub const hv_vm_exitinfo_t_HV_VM_EXITINFO_INJECT_EXCP: hv_vm_exitinfo_t = 5;
pub const hv_vm_exitinfo_t_HV_VM_EXITINFO_SMI: hv_vm_exitinfo_t = 6;
pub const hv_vm_exitinfo_t_HV_VM_EXITINFO_APIC_ACCESS_READ: hv_vm_exitinfo_t = 7;
pub type hv_vm_exitinfo_t = u32;
pub const hv_apic_ctrl_t_HV_APIC_CTRL_DEFAULT: hv_apic_ctrl_t = 0;
pub const hv_apic_ctrl_t_HV_APIC_CTRL_EOI_ICR_TPR: hv_apic_ctrl_t = 1;
pub const hv_apic_ctrl_t_HV_APIC_CTRL_GUEST_IDLE: hv_apic_ctrl_t = 2;
pub const hv_apic_ctrl_t_HV_APIC_CTRL_NO_TIMER: hv_apic_ctrl_t = 4;
pub const hv_apic_ctrl_t_HV_APIC_CTRL_IOAPIC_EOI: hv_apic_ctrl_t = 8;
pub type hv_apic_ctrl_t = u64;
pub const hv_apic_lvt_flavor_t_HV_APIC_LVT_FLAVOR_TIMER: hv_apic_lvt_flavor_t = 1;
pub type hv_apic_lvt_flavor_t = u32;
pub const hv_apic_intr_trigger_t_HV_APIC_EDGE_TRIGGER: hv_apic_intr_trigger_t = 0;
pub const hv_apic_intr_trigger_t_HV_APIC_EDGE_TRIGGER_AEOI: hv_apic_intr_trigger_t = 1;
pub const hv_apic_intr_trigger_t_HV_APIC_LEVEL_TRIGGER: hv_apic_intr_trigger_t = 2;
pub type hv_apic_intr_trigger_t = u32;
pub const HV_ALLOCATE_DEFAULT: _bindgen_ty_10 = 0;
#[doc = " @enum       hv_allocate_flags_t\n @abstract   Memory allocation flags"]
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub type hv_allocate_flags_t = u64;
extern "C" {
    #[doc = " @function   hv_vm_allocate\n @abstract   Allocate anonymous memory suitable to be mapped as guest memory\n @param      uvap   Returned virtual address of the allocated memory\n @param      size   Size in bytes of the region to be allocated\n @param      flags  Memory allocation flags\n @result     0 on success or error code\n @discussion\n             The memory is allocated with VM_PROT_DEFAULT permissions\n             This API enables accurate memory accounting of the allocations\n             it creates\n             Size must be a multiple of PAGE_SIZE\n             Memory returned by this API should be deallocated with\n             hv_vm_deallocate"]
    pub fn hv_vm_allocate(
        uvap: *mut *mut ::std::os::raw::c_void,
        size: usize,
        flags: hv_allocate_flags_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_deallocate\n @abstract   Deallocate memory previously allocated by hv_vm_allocate\n @param      uva    Virtual address of the allocated memory\n @param      size   Size in bytes of the region to be deallocated\n @result     0 on success or error code"]
    pub fn hv_vm_deallocate(uva: *mut ::std::os::raw::c_void, size: usize) -> hv_return_t;
}
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub const OSUnknownByteOrder: _bindgen_ty_11 = 0;
pub const OSLittleEndian: _bindgen_ty_11 = 1;
pub const OSBigEndian: _bindgen_ty_11 = 2;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDR_record_t {
    pub mig_vers: ::std::os::raw::c_uchar,
    pub if_vers: ::std::os::raw::c_uchar,
    pub reserved1: ::std::os::raw::c_uchar,
    pub mig_encoding: ::std::os::raw::c_uchar,
    pub int_rep: ::std::os::raw::c_uchar,
    pub char_rep: ::std::os::raw::c_uchar,
    pub float_rep: ::std::os::raw::c_uchar,
    pub reserved2: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_NDR_record_t() {
    const UNINIT: ::std::mem::MaybeUninit<NDR_record_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NDR_record_t>(),
        8usize,
        concat!("Size of: ", stringify!(NDR_record_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NDR_record_t>(),
        1usize,
        concat!("Alignment of ", stringify!(NDR_record_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mig_vers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(mig_vers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).if_vers) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(if_vers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mig_encoding) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(mig_encoding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_rep) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(int_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).char_rep) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(char_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float_rep) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(float_rep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(NDR_record_t),
            "::",
            stringify!(reserved2)
        )
    );
}
extern "C" {
    pub static mut NDR_record: NDR_record_t;
}
pub type notify_port_t = mach_port_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_deleted_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_port_deleted_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_deleted_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_deleted_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_port_deleted_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_deleted_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_port_deleted_notification_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_deleted_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_possible_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_send_possible_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_send_possible_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_send_possible_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_send_possible_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_send_possible_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_send_possible_notification_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_possible_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_port_destroyed_notification_t {
    pub not_header: mach_msg_header_t,
    pub not_body: mach_msg_body_t,
    pub not_port: mach_msg_port_descriptor_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_port_destroyed_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_port_destroyed_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_port_destroyed_notification_t>(),
        60usize,
        concat!("Size of: ", stringify!(mach_port_destroyed_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_port_destroyed_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(mach_port_destroyed_notification_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(not_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_port) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_port_destroyed_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_no_senders_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_count: mach_msg_type_number_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_no_senders_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_no_senders_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_no_senders_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_no_senders_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_no_senders_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_no_senders_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(not_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_no_senders_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_send_once_notification_t {
    pub not_header: mach_msg_header_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_send_once_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_send_once_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_send_once_notification_t>(),
        44usize,
        concat!("Size of: ", stringify!(mach_send_once_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_send_once_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_send_once_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_once_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_send_once_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_dead_name_notification_t {
    pub not_header: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub not_port: mach_port_name_t,
    pub trailer: mach_msg_format_0_trailer_t,
}
#[test]
fn bindgen_test_layout_mach_dead_name_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_dead_name_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_dead_name_notification_t>(),
        56usize,
        concat!("Size of: ", stringify!(mach_dead_name_notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_dead_name_notification_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_dead_name_notification_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(not_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).not_port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(not_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_dead_name_notification_t),
            "::",
            stringify!(trailer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: natural_t,
    pub reactivations: natural_t,
    pub pageins: natural_t,
    pub pageouts: natural_t,
    pub faults: natural_t,
    pub cow_faults: natural_t,
    pub lookups: natural_t,
    pub hits: natural_t,
    pub purgeable_count: natural_t,
    pub purges: natural_t,
    pub speculative_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_statistics() {
    const UNINIT: ::std::mem::MaybeUninit<vm_statistics> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_statistics>(),
        60usize,
        concat!("Size of: ", stringify!(vm_statistics))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_statistics>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_statistics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(free_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(active_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inactive_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(inactive_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wire_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(wire_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_fill_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(zero_fill_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reactivations) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(reactivations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageins) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageouts) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(pageouts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faults) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(faults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cow_faults) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(cow_faults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookups) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(lookups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hits) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(purgeable_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purges) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(purges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speculative_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics),
            "::",
            stringify!(speculative_count)
        )
    );
}
pub type vm_statistics_t = *mut vm_statistics;
pub type vm_statistics_data_t = vm_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_statistics64 {
    pub free_count: natural_t,
    pub active_count: natural_t,
    pub inactive_count: natural_t,
    pub wire_count: natural_t,
    pub zero_fill_count: u64,
    pub reactivations: u64,
    pub pageins: u64,
    pub pageouts: u64,
    pub faults: u64,
    pub cow_faults: u64,
    pub lookups: u64,
    pub hits: u64,
    pub purges: u64,
    pub purgeable_count: natural_t,
    pub speculative_count: natural_t,
    pub decompressions: u64,
    pub compressions: u64,
    pub swapins: u64,
    pub swapouts: u64,
    pub compressor_page_count: natural_t,
    pub throttled_count: natural_t,
    pub external_page_count: natural_t,
    pub internal_page_count: natural_t,
    pub total_uncompressed_pages_in_compressor: u64,
}
#[test]
fn bindgen_test_layout_vm_statistics64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_statistics64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_statistics64>(),
        152usize,
        concat!("Size of: ", stringify!(vm_statistics64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_statistics64>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_statistics64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(free_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(active_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inactive_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(inactive_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wire_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(wire_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_fill_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(zero_fill_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reactivations) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(reactivations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageins) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageouts) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(pageouts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faults) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(faults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cow_faults) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(cow_faults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookups) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(lookups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hits) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purges) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(purges)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_count) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(purgeable_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speculative_count) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(speculative_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decompressions) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(decompressions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressions) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(compressions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapins) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(swapins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapouts) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(swapouts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressor_page_count) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(compressor_page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).throttled_count) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(throttled_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_page_count) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(external_page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_page_count) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(internal_page_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).total_uncompressed_pages_in_compressor) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_statistics64),
            "::",
            stringify!(total_uncompressed_pages_in_compressor)
        )
    );
}
pub type vm_statistics64_t = *mut vm_statistics64;
pub type vm_statistics64_data_t = vm_statistics64;
extern "C" {
    pub fn vm_stats(
        info: *mut ::std::os::raw::c_void,
        count: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_extmod_statistics {
    pub task_for_pid_count: i64,
    pub task_for_pid_caller_count: i64,
    pub thread_creation_count: i64,
    pub thread_creation_caller_count: i64,
    pub thread_set_state_count: i64,
    pub thread_set_state_caller_count: i64,
}
#[test]
fn bindgen_test_layout_vm_extmod_statistics() {
    const UNINIT: ::std::mem::MaybeUninit<vm_extmod_statistics> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_extmod_statistics>(),
        48usize,
        concat!("Size of: ", stringify!(vm_extmod_statistics))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_extmod_statistics>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_extmod_statistics))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_for_pid_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(task_for_pid_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_for_pid_caller_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(task_for_pid_caller_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_creation_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_creation_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_creation_caller_count) as usize - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_creation_caller_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_set_state_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_set_state_count)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).thread_set_state_caller_count) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_extmod_statistics),
            "::",
            stringify!(thread_set_state_caller_count)
        )
    );
}
pub type vm_extmod_statistics_t = *mut vm_extmod_statistics;
pub type vm_extmod_statistics_data_t = vm_extmod_statistics;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_stat {
    pub count: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_vm_purgeable_stat() {
    const UNINIT: ::std::mem::MaybeUninit<vm_purgeable_stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_purgeable_stat>(),
        16usize,
        concat!("Size of: ", stringify!(vm_purgeable_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_purgeable_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_purgeable_stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_stat),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_stat),
            "::",
            stringify!(size)
        )
    );
}
pub type vm_purgeable_stat_t = vm_purgeable_stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_purgeable_info {
    pub fifo_data: [vm_purgeable_stat_t; 8usize],
    pub obsolete_data: vm_purgeable_stat_t,
    pub lifo_data: [vm_purgeable_stat_t; 8usize],
}
#[test]
fn bindgen_test_layout_vm_purgeable_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_purgeable_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_purgeable_info>(),
        272usize,
        concat!("Size of: ", stringify!(vm_purgeable_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_purgeable_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_purgeable_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(fifo_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obsolete_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(obsolete_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lifo_data) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_purgeable_info),
            "::",
            stringify!(lifo_data)
        )
    );
}
pub type vm_purgeable_info_t = *mut vm_purgeable_info;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_DEALLOC_GAP:
    virtual_memory_guard_exception_codes = 1;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_COPYIO_FAILURE:
    virtual_memory_guard_exception_codes = 2;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_INDEX_FAILURE:
    virtual_memory_guard_exception_codes = 4;
pub const virtual_memory_guard_exception_codes_kGUARD_EXC_RECLAIM_DEALLOCATE_FAILURE:
    virtual_memory_guard_exception_codes = 8;
pub type virtual_memory_guard_exception_codes = ::std::os::raw::c_uint;
pub type cpu_type_t = integer_t;
pub type cpu_subtype_t = integer_t;
pub type cpu_threadtype_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct time_value {
    pub seconds: integer_t,
    pub microseconds: integer_t,
}
#[test]
fn bindgen_test_layout_time_value() {
    const UNINIT: ::std::mem::MaybeUninit<time_value> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<time_value>(),
        8usize,
        concat!("Size of: ", stringify!(time_value))
    );
    assert_eq!(
        ::std::mem::align_of::<time_value>(),
        4usize,
        concat!("Alignment of ", stringify!(time_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seconds) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(time_value),
            "::",
            stringify!(seconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).microseconds) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(time_value),
            "::",
            stringify!(microseconds)
        )
    );
}
pub type time_value_t = time_value;
pub type host_info_t = *mut integer_t;
pub type host_info64_t = *mut integer_t;
pub type host_info_data_t = [integer_t; 1024usize];
pub type kernel_version_t = [::std::os::raw::c_char; 512usize];
pub type kernel_boot_info_t = [::std::os::raw::c_char; 4096usize];
pub type host_flavor_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_can_has_debugger_info {
    pub can_has_debugger: boolean_t,
}
#[test]
fn bindgen_test_layout_host_can_has_debugger_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_can_has_debugger_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_can_has_debugger_info>(),
        4usize,
        concat!("Size of: ", stringify!(host_can_has_debugger_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_can_has_debugger_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_can_has_debugger_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_has_debugger) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_can_has_debugger_info),
            "::",
            stringify!(can_has_debugger)
        )
    );
}
pub type host_can_has_debugger_info_data_t = host_can_has_debugger_info;
pub type host_can_has_debugger_info_t = *mut host_can_has_debugger_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct host_basic_info {
    pub max_cpus: integer_t,
    pub avail_cpus: integer_t,
    pub memory_size: natural_t,
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub cpu_threadtype: cpu_threadtype_t,
    pub physical_cpu: integer_t,
    pub physical_cpu_max: integer_t,
    pub logical_cpu: integer_t,
    pub logical_cpu_max: integer_t,
    pub max_mem: u64,
}
#[test]
fn bindgen_test_layout_host_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_basic_info>(),
        48usize,
        concat!("Size of: ", stringify!(host_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cpus) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(max_cpus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avail_cpus) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(avail_cpus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(memory_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_subtype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(cpu_subtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_threadtype) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(cpu_threadtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physical_cpu) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(physical_cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physical_cpu_max) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(physical_cpu_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logical_cpu) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(logical_cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logical_cpu_max) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(logical_cpu_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(host_basic_info),
            "::",
            stringify!(max_mem)
        )
    );
}
pub type host_basic_info_data_t = host_basic_info;
pub type host_basic_info_t = *mut host_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_sched_info {
    pub min_timeout: integer_t,
    pub min_quantum: integer_t,
}
#[test]
fn bindgen_test_layout_host_sched_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_sched_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_sched_info>(),
        8usize,
        concat!("Size of: ", stringify!(host_sched_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_sched_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_sched_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_timeout) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_sched_info),
            "::",
            stringify!(min_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_quantum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_sched_info),
            "::",
            stringify!(min_quantum)
        )
    );
}
pub type host_sched_info_data_t = host_sched_info;
pub type host_sched_info_t = *mut host_sched_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kernel_resource_sizes {
    pub task: natural_t,
    pub thread: natural_t,
    pub port: natural_t,
    pub memory_region: natural_t,
    pub memory_object: natural_t,
}
#[test]
fn bindgen_test_layout_kernel_resource_sizes() {
    const UNINIT: ::std::mem::MaybeUninit<kernel_resource_sizes> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kernel_resource_sizes>(),
        20usize,
        concat!("Size of: ", stringify!(kernel_resource_sizes))
    );
    assert_eq!(
        ::std::mem::align_of::<kernel_resource_sizes>(),
        4usize,
        concat!("Alignment of ", stringify!(kernel_resource_sizes))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(task)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_region) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(memory_region)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory_object) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kernel_resource_sizes),
            "::",
            stringify!(memory_object)
        )
    );
}
pub type kernel_resource_sizes_data_t = kernel_resource_sizes;
pub type kernel_resource_sizes_t = *mut kernel_resource_sizes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_priority_info {
    pub kernel_priority: integer_t,
    pub system_priority: integer_t,
    pub server_priority: integer_t,
    pub user_priority: integer_t,
    pub depress_priority: integer_t,
    pub idle_priority: integer_t,
    pub minimum_priority: integer_t,
    pub maximum_priority: integer_t,
}
#[test]
fn bindgen_test_layout_host_priority_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_priority_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_priority_info>(),
        32usize,
        concat!("Size of: ", stringify!(host_priority_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_priority_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_priority_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kernel_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(kernel_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_priority) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(system_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server_priority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(server_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(user_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depress_priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(depress_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).idle_priority) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(idle_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minimum_priority) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(minimum_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum_priority) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(host_priority_info),
            "::",
            stringify!(maximum_priority)
        )
    );
}
pub type host_priority_info_data_t = host_priority_info;
pub type host_priority_info_t = *mut host_priority_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_load_info {
    pub avenrun: [integer_t; 3usize],
    pub mach_factor: [integer_t; 3usize],
}
#[test]
fn bindgen_test_layout_host_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_load_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_load_info>(),
        24usize,
        concat!("Size of: ", stringify!(host_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_load_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avenrun) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_load_info),
            "::",
            stringify!(avenrun)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mach_factor) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(host_load_info),
            "::",
            stringify!(mach_factor)
        )
    );
}
pub type host_load_info_data_t = host_load_info;
pub type host_load_info_t = *mut host_load_info;
pub type host_purgable_info_data_t = vm_purgeable_info;
pub type host_purgable_info_t = *mut vm_purgeable_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_cpu_load_info {
    pub cpu_ticks: [natural_t; 4usize],
}
#[test]
fn bindgen_test_layout_host_cpu_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<host_cpu_load_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_cpu_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(host_cpu_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<host_cpu_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(host_cpu_load_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_ticks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_cpu_load_info),
            "::",
            stringify!(cpu_ticks)
        )
    );
}
pub type host_cpu_load_info_data_t = host_cpu_load_info;
pub type host_cpu_load_info_t = *mut host_cpu_load_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct host_preferred_user_arch {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
}
#[test]
fn bindgen_test_layout_host_preferred_user_arch() {
    const UNINIT: ::std::mem::MaybeUninit<host_preferred_user_arch> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<host_preferred_user_arch>(),
        8usize,
        concat!("Size of: ", stringify!(host_preferred_user_arch))
    );
    assert_eq!(
        ::std::mem::align_of::<host_preferred_user_arch>(),
        4usize,
        concat!("Alignment of ", stringify!(host_preferred_user_arch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(host_preferred_user_arch),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_subtype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(host_preferred_user_arch),
            "::",
            stringify!(cpu_subtype)
        )
    );
}
pub type host_preferred_user_arch_data_t = host_preferred_user_arch;
pub type host_preferred_user_arch_t = *mut host_preferred_user_arch;
pub type vm_prot_t = ::std::os::raw::c_int;
pub type vm_sync_t = ::std::os::raw::c_uint;
pub type pointer_t = vm_offset_t;
pub type vm_address_t = vm_offset_t;
pub type addr64_t = u64;
pub type reg64_t = u32;
pub type ppnum_t = u32;
pub type vm_map_t = mach_port_t;
pub type vm_map_read_t = mach_port_t;
pub type vm_map_inspect_t = mach_port_t;
pub type upl_t = mach_port_t;
pub type vm_named_entry_t = mach_port_t;
pub type vm_object_offset_t = u64;
pub type vm_object_size_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range {
    pub min_address: mach_vm_offset_t,
    pub max_address: mach_vm_offset_t,
}
#[test]
fn bindgen_test_layout_mach_vm_range() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_range> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_range>(),
        16usize,
        concat!("Size of: ", stringify!(mach_vm_range))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_range>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_vm_range))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_range),
            "::",
            stringify!(min_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_address) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_range),
            "::",
            stringify!(max_address)
        )
    );
}
pub type mach_vm_range_t = *mut mach_vm_range;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_INVALID: mach_vm_range_flavor_t = 0;
pub const mach_vm_range_flavor_t_MACH_VM_RANGE_FLAVOR_V1: mach_vm_range_flavor_t = 1;
pub type mach_vm_range_flavor_t = u32;
pub const mach_vm_range_flags_t_MACH_VM_RANGE_NONE: mach_vm_range_flags_t = 0;
pub type mach_vm_range_flags_t = u64;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DEFAULT: mach_vm_range_tag_t = 0;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_DATA: mach_vm_range_tag_t = 1;
pub const mach_vm_range_tag_t_MACH_VM_RANGE_FIXED: mach_vm_range_tag_t = 2;
pub type mach_vm_range_tag_t = u16;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_range_recipe_v1_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub range: mach_vm_range,
}
#[test]
fn bindgen_test_layout_mach_vm_range_recipe_v1_t() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_range_recipe_v1_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_range_recipe_v1_t>(),
        24usize,
        concat!("Size of: ", stringify!(mach_vm_range_recipe_v1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_range_recipe_v1_t>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_vm_range_recipe_v1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_range_recipe_v1_t),
            "::",
            stringify!(range)
        )
    );
}
impl mach_vm_range_recipe_v1_t {
    #[inline]
    pub fn flags(&self) -> mach_vm_range_flags_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 48u8) as u64) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: mach_vm_range_flags_t) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 48u8, val as u64)
        }
    }
    #[inline]
    pub fn range_tag(&self) -> mach_vm_range_tag_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_range_tag(&mut self, val: mach_vm_range_tag_t) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn vm_tag(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_vm_tag(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: mach_vm_range_flags_t,
        range_tag: mach_vm_range_tag_t,
        vm_tag: u8,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 48u8, {
            let flags: u64 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(48usize, 8u8, {
            let range_tag: u16 = unsafe { ::std::mem::transmute(range_tag) };
            range_tag as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let vm_tag: u8 = unsafe { ::std::mem::transmute(vm_tag) };
            vm_tag as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type mach_vm_range_recipe_t = mach_vm_range_recipe_v1_t;
pub type mach_vm_range_recipes_raw_t = *mut u8;
pub type memory_object_offset_t = ::std::os::raw::c_ulonglong;
pub type memory_object_size_t = ::std::os::raw::c_ulonglong;
pub type memory_object_cluster_size_t = natural_t;
pub type memory_object_fault_info_t = *mut natural_t;
pub type vm_object_id_t = ::std::os::raw::c_ulonglong;
pub type memory_object_t = mach_port_t;
pub type memory_object_control_t = mach_port_t;
pub type memory_object_array_t = *mut memory_object_t;
pub type memory_object_name_t = mach_port_t;
pub type memory_object_default_t = mach_port_t;
pub type memory_object_copy_strategy_t = ::std::os::raw::c_int;
pub type memory_object_return_t = ::std::os::raw::c_int;
pub type memory_object_info_t = *mut ::std::os::raw::c_int;
pub type memory_object_flavor_t = ::std::os::raw::c_int;
pub type memory_object_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_perf_info {
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_perf_info() {
    const UNINIT: ::std::mem::MaybeUninit<memory_object_perf_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memory_object_perf_info>(),
        8usize,
        concat!("Size of: ", stringify!(memory_object_perf_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_perf_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_perf_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cluster_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_perf_info),
            "::",
            stringify!(cluster_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).may_cache) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_perf_info),
            "::",
            stringify!(may_cache)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_attr_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub cluster_size: memory_object_cluster_size_t,
    pub may_cache_object: boolean_t,
    pub temporary: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_attr_info() {
    const UNINIT: ::std::mem::MaybeUninit<memory_object_attr_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memory_object_attr_info>(),
        16usize,
        concat!("Size of: ", stringify!(memory_object_attr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_attr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_attr_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_strategy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(copy_strategy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cluster_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(cluster_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).may_cache_object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(may_cache_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temporary) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_attr_info),
            "::",
            stringify!(temporary)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct memory_object_behave_info {
    pub copy_strategy: memory_object_copy_strategy_t,
    pub temporary: boolean_t,
    pub invalidate: boolean_t,
    pub silent_overwrite: boolean_t,
    pub advisory_pageout: boolean_t,
}
#[test]
fn bindgen_test_layout_memory_object_behave_info() {
    const UNINIT: ::std::mem::MaybeUninit<memory_object_behave_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<memory_object_behave_info>(),
        20usize,
        concat!("Size of: ", stringify!(memory_object_behave_info))
    );
    assert_eq!(
        ::std::mem::align_of::<memory_object_behave_info>(),
        4usize,
        concat!("Alignment of ", stringify!(memory_object_behave_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).copy_strategy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(copy_strategy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).temporary) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(temporary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalidate) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(invalidate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silent_overwrite) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(silent_overwrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advisory_pageout) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(memory_object_behave_info),
            "::",
            stringify!(advisory_pageout)
        )
    );
}
pub type memory_object_behave_info_t = *mut memory_object_behave_info;
pub type memory_object_behave_info_data_t = memory_object_behave_info;
pub type memory_object_perf_info_t = *mut memory_object_perf_info;
pub type memory_object_perf_info_data_t = memory_object_perf_info;
pub type memory_object_attr_info_t = *mut memory_object_attr_info;
pub type memory_object_attr_info_data_t = memory_object_attr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_thread_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__eax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ebx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ecx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ecx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__edx) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__edi) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__esi) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ebp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__esp) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__eflags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__eip) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[repr(align(2))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_mmst_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mmst_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_reg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mmst_rsrv) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_rsrv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_xmm_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__xmm_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_xmm_reg),
            "::",
            stringify!(__xmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_ymm_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ymm_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ymm_reg),
            "::",
            stringify!(__ymm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_zmm_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__zmm_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_zmm_reg),
            "::",
            stringify!(__zmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_opmask_reg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opmask_reg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_opmask_reg),
            "::",
            stringify!(__opmask_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_float_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_avx_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_avx512_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_i386_exception_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_debug_state32> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_instruction_state {
    pub __insn_stream_valid_bytes: ::std::os::raw::c_int,
    pub __insn_offset: ::std::os::raw::c_int,
    pub __out_of_synch: ::std::os::raw::c_int,
    pub __insn_bytes: [__uint8_t; 2380usize],
    pub __insn_cacheline: [__uint8_t; 64usize],
}
#[test]
fn bindgen_test_layout___x86_instruction_state() {
    const UNINIT: ::std::mem::MaybeUninit<__x86_instruction_state> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__x86_instruction_state>(),
        2456usize,
        concat!("Size of: ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_instruction_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_instruction_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_stream_valid_bytes) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_stream_valid_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__out_of_synch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__out_of_synch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_bytes) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__insn_cacheline) as usize - ptr as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_instruction_state),
            "::",
            stringify!(__insn_cacheline)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_record {
    pub __from_ip: __uint64_t,
    pub __to_ip: __uint64_t,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout___last_branch_record() {
    const UNINIT: ::std::mem::MaybeUninit<__last_branch_record> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__last_branch_record>(),
        24usize,
        concat!("Size of: ", stringify!(__last_branch_record))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_record>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_record))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__from_ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_record),
            "::",
            stringify!(__from_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__to_ip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_record),
            "::",
            stringify!(__to_ip)
        )
    );
}
impl __last_branch_record {
    #[inline]
    pub fn __mispredict(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___mispredict(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tsx_abort(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___tsx_abort(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __in_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___in_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set___cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __mispredict: __uint32_t,
        __tsx_abort: __uint32_t,
        __in_tsx: __uint32_t,
        __cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __mispredict: u32 = unsafe { ::std::mem::transmute(__mispredict) };
            __mispredict as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __tsx_abort: u32 = unsafe { ::std::mem::transmute(__tsx_abort) };
            __tsx_abort as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __in_tsx: u32 = unsafe { ::std::mem::transmute(__in_tsx) };
            __in_tsx as u64
        });
        __bindgen_bitfield_unit.set(3usize, 16u8, {
            let __cycle_count: u32 = unsafe { ::std::mem::transmute(__cycle_count) };
            __cycle_count as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __last_branch_state {
    pub __lbr_count: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __lbrs: [__last_branch_record; 32usize],
}
#[test]
fn bindgen_test_layout___last_branch_state() {
    const UNINIT: ::std::mem::MaybeUninit<__last_branch_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__last_branch_state>(),
        776usize,
        concat!("Size of: ", stringify!(__last_branch_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__last_branch_state>(),
        8usize,
        concat!("Alignment of ", stringify!(__last_branch_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lbr_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_state),
            "::",
            stringify!(__lbr_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lbrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__last_branch_state),
            "::",
            stringify!(__lbrs)
        )
    );
}
impl __last_branch_state {
    #[inline]
    pub fn __lbr_supported_tsx(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_tsx(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __lbr_supported_cycle_count(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___lbr_supported_cycle_count(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __reserved(&self) -> __uint32_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set___reserved(&mut self, val: __uint32_t) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __lbr_supported_tsx: __uint32_t,
        __lbr_supported_cycle_count: __uint32_t,
        __reserved: __uint32_t,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __lbr_supported_tsx: u32 = unsafe { ::std::mem::transmute(__lbr_supported_tsx) };
            __lbr_supported_tsx as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __lbr_supported_cycle_count: u32 =
                unsafe { ::std::mem::transmute(__lbr_supported_cycle_count) };
            __lbr_supported_cycle_count as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let __reserved: u32 = unsafe { ::std::mem::transmute(__reserved) };
            __reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __x86_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___x86_pagein_state() {
    const UNINIT: ::std::mem::MaybeUninit<__x86_pagein_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__x86_pagein_state>(),
        4usize,
        concat!("Size of: ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__x86_pagein_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__x86_pagein_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pagein_error) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__x86_pagein_state),
            "::",
            stringify!(__pagein_error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_thread_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rbx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rcx) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rcx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rdx) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rdi) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rsi) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rbp) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rsp) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r8) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r9) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r10) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r11) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r12) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r13) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r14) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__r15) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rip) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rflags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fs) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gs) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_full_state64 {
    pub __ss64: __darwin_x86_thread_state64,
    pub __ds: __uint64_t,
    pub __es: __uint64_t,
    pub __ss: __uint64_t,
    pub __gsbase: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_full_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_thread_full_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_full_state64>(),
        200usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_full_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_full_state64>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__darwin_x86_thread_full_state64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ds) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__es) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__gsbase) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_full_state64),
            "::",
            stringify!(__gsbase)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_float_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_avx_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_avx512_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fcw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fsw) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ftw) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv1) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_fop) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_cs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv2) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_dp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ds) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv3) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_mxcsrmask) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm0) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm2) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm3) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm4) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm5) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm6) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_stmm7) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm0) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm1) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm2) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm3) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm4) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm5) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm6) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm7) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm8) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm9) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm10) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm11) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm12) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm13) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm14) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_xmm15) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_rsrv4) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_reserved1) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__avx_reserved1) as usize - ptr as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh0) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh1) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh2) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh3) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh4) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh5) as usize - ptr as usize },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh6) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh7) as usize - ptr as usize },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh8) as usize - ptr as usize },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh9) as usize - ptr as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh10) as usize - ptr as usize },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh11) as usize - ptr as usize },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh12) as usize - ptr as usize },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh13) as usize - ptr as usize },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh14) as usize - ptr as usize },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_ymmh15) as usize - ptr as usize },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k0) as usize - ptr as usize },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k1) as usize - ptr as usize },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k2) as usize - ptr as usize },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k3) as usize - ptr as usize },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k4) as usize - ptr as usize },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k5) as usize - ptr as usize },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k6) as usize - ptr as usize },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_k7) as usize - ptr as usize },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh0) as usize - ptr as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh1) as usize - ptr as usize },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh2) as usize - ptr as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh3) as usize - ptr as usize },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh4) as usize - ptr as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh5) as usize - ptr as usize },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh6) as usize - ptr as usize },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh7) as usize - ptr as usize },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh8) as usize - ptr as usize },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh9) as usize - ptr as usize },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh9)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh10) as usize - ptr as usize },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh11) as usize - ptr as usize },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh11)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh12) as usize - ptr as usize },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh12)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh13) as usize - ptr as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh13)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh14) as usize - ptr as usize },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh14)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmmh15) as usize - ptr as usize },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh15)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm16) as usize - ptr as usize },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm17) as usize - ptr as usize },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm17)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm18) as usize - ptr as usize },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm18)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm19) as usize - ptr as usize },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm19)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm20) as usize - ptr as usize },
        1676usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm20)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm21) as usize - ptr as usize },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm21)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm22) as usize - ptr as usize },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm22)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm23) as usize - ptr as usize },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm23)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm24) as usize - ptr as usize },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm24)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm25) as usize - ptr as usize },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm25)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm26) as usize - ptr as usize },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm26)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm27) as usize - ptr as usize },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm27)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm28) as usize - ptr as usize },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm28)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm29) as usize - ptr as usize },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm29)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm30) as usize - ptr as usize },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm30)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fpu_zmm31) as usize - ptr as usize },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm31)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_exception_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__trapno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cpu) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__err) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__faultvaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_debug_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr5) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr6) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__dr7) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_x86_cpmu_state64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_state_hdr {
    pub flavor: u32,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_x86_state_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<x86_state_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_state_hdr>(),
        8usize,
        concat!("Size of: ", stringify!(x86_state_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_state_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_state_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_state_hdr),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_state_hdr),
            "::",
            stringify!(count)
        )
    );
}
pub type x86_state_hdr_t = x86_state_hdr;
pub type i386_thread_state_t = __darwin_i386_thread_state;
pub type x86_thread_state32_t = __darwin_i386_thread_state;
pub type i386_float_state_t = __darwin_i386_float_state;
pub type x86_float_state32_t = __darwin_i386_float_state;
pub type x86_avx_state32_t = __darwin_i386_avx_state;
pub type x86_avx512_state32_t = __darwin_i386_avx512_state;
pub type i386_exception_state_t = __darwin_i386_exception_state;
pub type x86_exception_state32_t = __darwin_i386_exception_state;
pub type x86_debug_state32_t = __darwin_x86_debug_state32;
pub type x86_thread_state64_t = __darwin_x86_thread_state64;
pub type x86_thread_full_state64_t = __darwin_x86_thread_full_state64;
pub type x86_float_state64_t = __darwin_x86_float_state64;
pub type x86_avx_state64_t = __darwin_x86_avx_state64;
pub type x86_avx512_state64_t = __darwin_x86_avx512_state64;
pub type x86_exception_state64_t = __darwin_x86_exception_state64;
pub type x86_debug_state64_t = __darwin_x86_debug_state64;
pub type x86_pagein_state_t = __x86_pagein_state;
pub type x86_instruction_state_t = __x86_instruction_state;
pub type last_branch_state_t = __last_branch_state;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_thread_state {
    pub tsh: x86_state_hdr_t,
    pub uts: x86_thread_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_thread_state__bindgen_ty_1 {
    pub ts32: x86_thread_state32_t,
    pub ts64: x86_thread_state64_t,
}
#[test]
fn bindgen_test_layout_x86_thread_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_thread_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_thread_state__bindgen_ty_1>(),
        168usize,
        concat!("Size of: ", stringify!(x86_thread_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_thread_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_thread_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state__bindgen_ty_1),
            "::",
            stringify!(ts32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state__bindgen_ty_1),
            "::",
            stringify!(ts64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_thread_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_thread_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_thread_state>(),
        176usize,
        concat!("Size of: ", stringify!(x86_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_thread_state>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_thread_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tsh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state),
            "::",
            stringify!(tsh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_thread_state),
            "::",
            stringify!(uts)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_float_state {
    pub fsh: x86_state_hdr_t,
    pub ufs: x86_float_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_float_state__bindgen_ty_1 {
    pub fs32: x86_float_state32_t,
    pub fs64: x86_float_state64_t,
}
#[test]
fn bindgen_test_layout_x86_float_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_float_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_float_state__bindgen_ty_1>(),
        524usize,
        concat!("Size of: ", stringify!(x86_float_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_float_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_float_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state__bindgen_ty_1),
            "::",
            stringify!(fs32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fs64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state__bindgen_ty_1),
            "::",
            stringify!(fs64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_float_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_float_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_float_state>(),
        532usize,
        concat!("Size of: ", stringify!(x86_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_float_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state),
            "::",
            stringify!(fsh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ufs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_float_state),
            "::",
            stringify!(ufs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_exception_state {
    pub esh: x86_state_hdr_t,
    pub ues: x86_exception_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_exception_state__bindgen_ty_1 {
    pub es32: x86_exception_state32_t,
    pub es64: x86_exception_state64_t,
}
#[test]
fn bindgen_test_layout_x86_exception_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_exception_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_exception_state__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(x86_exception_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_exception_state__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(x86_exception_state__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).es32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state__bindgen_ty_1),
            "::",
            stringify!(es32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).es64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state__bindgen_ty_1),
            "::",
            stringify!(es64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_exception_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_exception_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_exception_state>(),
        24usize,
        concat!("Size of: ", stringify!(x86_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_exception_state>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_exception_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state),
            "::",
            stringify!(esh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ues) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_exception_state),
            "::",
            stringify!(ues)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_debug_state {
    pub dsh: x86_state_hdr_t,
    pub uds: x86_debug_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_debug_state__bindgen_ty_1 {
    pub ds32: x86_debug_state32_t,
    pub ds64: x86_debug_state64_t,
}
#[test]
fn bindgen_test_layout_x86_debug_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_debug_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_debug_state__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(x86_debug_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_debug_state__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_debug_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state__bindgen_ty_1),
            "::",
            stringify!(ds32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state__bindgen_ty_1),
            "::",
            stringify!(ds64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_debug_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_debug_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_debug_state>(),
        72usize,
        concat!("Size of: ", stringify!(x86_debug_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_debug_state>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_debug_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dsh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state),
            "::",
            stringify!(dsh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_debug_state),
            "::",
            stringify!(uds)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx_state {
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx_state__bindgen_ty_1 {
    pub as32: x86_avx_state32_t,
    pub as64: x86_avx_state64_t,
}
#[test]
fn bindgen_test_layout_x86_avx_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_avx_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_avx_state__bindgen_ty_1>(),
        844usize,
        concat!("Size of: ", stringify!(x86_avx_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state__bindgen_ty_1),
            "::",
            stringify!(as32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state__bindgen_ty_1),
            "::",
            stringify!(as64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_avx_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_avx_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_avx_state>(),
        852usize,
        concat!("Size of: ", stringify!(x86_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state),
            "::",
            stringify!(ash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ufs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx_state),
            "::",
            stringify!(ufs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct x86_avx512_state {
    pub ash: x86_state_hdr_t,
    pub ufs: x86_avx512_state__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union x86_avx512_state__bindgen_ty_1 {
    pub as32: x86_avx512_state32_t,
    pub as64: x86_avx512_state64_t,
}
#[test]
fn bindgen_test_layout_x86_avx512_state__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<x86_avx512_state__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_avx512_state__bindgen_ty_1>(),
        2444usize,
        concat!("Size of: ", stringify!(x86_avx512_state__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx512_state__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx512_state__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state__bindgen_ty_1),
            "::",
            stringify!(as32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).as64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state__bindgen_ty_1),
            "::",
            stringify!(as64)
        )
    );
}
#[test]
fn bindgen_test_layout_x86_avx512_state() {
    const UNINIT: ::std::mem::MaybeUninit<x86_avx512_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<x86_avx512_state>(),
        2452usize,
        concat!("Size of: ", stringify!(x86_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<x86_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(x86_avx512_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state),
            "::",
            stringify!(ash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ufs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_avx512_state),
            "::",
            stringify!(ufs)
        )
    );
}
pub type x86_thread_state_t = x86_thread_state;
pub type x86_float_state_t = x86_float_state;
pub type x86_exception_state_t = x86_exception_state;
pub type x86_debug_state_t = x86_debug_state;
pub type x86_avx_state_t = x86_avx_state;
pub type x86_avx512_state_t = x86_avx512_state;
pub type thread_state_t = *mut natural_t;
pub type thread_state_data_t = [natural_t; 1296usize];
pub type thread_state_flavor_t = ::std::os::raw::c_int;
pub type thread_state_flavor_array_t = *mut thread_state_flavor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space {
    pub iis_genno_mask: natural_t,
    pub iis_table_size: natural_t,
    pub iis_table_next: natural_t,
    pub iis_tree_size: natural_t,
    pub iis_tree_small: natural_t,
    pub iis_tree_hash: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_space() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_space> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_space>(),
        24usize,
        concat!("Size of: ", stringify!(ipc_info_space))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_space>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_space))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_genno_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_genno_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_table_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_table_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_table_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_table_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_tree_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_tree_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_tree_small) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_tree_small)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iis_tree_hash) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space),
            "::",
            stringify!(iis_tree_hash)
        )
    );
}
pub type ipc_info_space_t = ipc_info_space;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_space_basic {
    pub iisb_genno_mask: natural_t,
    pub iisb_table_size: natural_t,
    pub iisb_table_next: natural_t,
    pub iisb_table_inuse: natural_t,
    pub iisb_reserved: [natural_t; 2usize],
}
#[test]
fn bindgen_test_layout_ipc_info_space_basic() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_space_basic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_space_basic>(),
        24usize,
        concat!("Size of: ", stringify!(ipc_info_space_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_space_basic>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_space_basic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_genno_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_genno_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_table_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_table_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_table_inuse) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_table_inuse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iisb_reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_space_basic),
            "::",
            stringify!(iisb_reserved)
        )
    );
}
pub type ipc_info_space_basic_t = ipc_info_space_basic;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_name {
    pub iin_name: mach_port_name_t,
    pub iin_collision: integer_t,
    pub iin_type: mach_port_type_t,
    pub iin_urefs: mach_port_urefs_t,
    pub iin_object: natural_t,
    pub iin_next: natural_t,
    pub iin_hash: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_name() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_name>(),
        28usize,
        concat!("Size of: ", stringify!(ipc_info_name))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_name>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_collision) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_collision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_urefs) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_urefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_object) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_next) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iin_hash) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_name),
            "::",
            stringify!(iin_hash)
        )
    );
}
pub type ipc_info_name_t = ipc_info_name;
pub type ipc_info_name_array_t = *mut ipc_info_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_tree_name {
    pub iitn_name: ipc_info_name_t,
    pub iitn_lchild: mach_port_name_t,
    pub iitn_rchild: mach_port_name_t,
}
#[test]
fn bindgen_test_layout_ipc_info_tree_name() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_tree_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_tree_name>(),
        36usize,
        concat!("Size of: ", stringify!(ipc_info_tree_name))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_tree_name>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_tree_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iitn_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_tree_name),
            "::",
            stringify!(iitn_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iitn_lchild) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_tree_name),
            "::",
            stringify!(iitn_lchild)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iitn_rchild) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_tree_name),
            "::",
            stringify!(iitn_rchild)
        )
    );
}
pub type ipc_info_tree_name_t = ipc_info_tree_name;
pub type ipc_info_tree_name_array_t = *mut ipc_info_tree_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ipc_info_port {
    pub iip_port_object: natural_t,
    pub iip_receiver_object: natural_t,
}
#[test]
fn bindgen_test_layout_ipc_info_port() {
    const UNINIT: ::std::mem::MaybeUninit<ipc_info_port> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipc_info_port>(),
        8usize,
        concat!("Size of: ", stringify!(ipc_info_port))
    );
    assert_eq!(
        ::std::mem::align_of::<ipc_info_port>(),
        4usize,
        concat!("Alignment of ", stringify!(ipc_info_port))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iip_port_object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_port),
            "::",
            stringify!(iip_port_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iip_receiver_object) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ipc_info_port),
            "::",
            stringify!(iip_receiver_object)
        )
    );
}
pub type ipc_info_port_t = ipc_info_port;
pub type exception_handler_info_array_t = *mut ipc_info_port_t;
pub type exception_type_t = ::std::os::raw::c_int;
pub type exception_data_type_t = integer_t;
pub type mach_exception_data_type_t = i64;
pub type exception_behavior_t = ::std::os::raw::c_int;
pub type exception_data_t = *mut exception_data_type_t;
pub type mach_exception_data_t = *mut mach_exception_data_type_t;
pub type exception_mask_t = ::std::os::raw::c_uint;
pub type exception_mask_array_t = *mut exception_mask_t;
pub type exception_behavior_array_t = *mut exception_behavior_t;
pub type exception_flavor_array_t = *mut thread_state_flavor_t;
pub type exception_port_array_t = *mut mach_port_t;
pub type exception_port_info_array_t = *mut ipc_info_port_t;
pub type mach_exception_code_t = mach_exception_data_type_t;
pub type mach_exception_subcode_t = mach_exception_data_type_t;
pub type uuid_t = __darwin_uuid_t;
pub type mach_voucher_t = mach_port_t;
pub type mach_voucher_name_t = mach_port_name_t;
pub type mach_voucher_name_array_t = *mut mach_voucher_name_t;
pub type ipc_voucher_t = mach_voucher_t;
pub type mach_voucher_selector_t = u32;
pub type mach_voucher_attr_key_t = u32;
pub type mach_voucher_attr_key_array_t = *mut mach_voucher_attr_key_t;
pub type mach_voucher_attr_content_t = *mut u8;
pub type mach_voucher_attr_content_size_t = u32;
pub type mach_voucher_attr_command_t = u32;
pub type mach_voucher_attr_recipe_command_t = u32;
pub type mach_voucher_attr_recipe_command_array_t = *mut mach_voucher_attr_recipe_command_t;
#[repr(C, packed)]
pub struct mach_voucher_attr_recipe_data {
    pub key: mach_voucher_attr_key_t,
    pub command: mach_voucher_attr_recipe_command_t,
    pub previous_voucher: mach_voucher_name_t,
    pub content_size: mach_voucher_attr_content_size_t,
    pub content: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_mach_voucher_attr_recipe_data() {
    const UNINIT: ::std::mem::MaybeUninit<mach_voucher_attr_recipe_data> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_voucher_attr_recipe_data>(),
        16usize,
        concat!("Size of: ", stringify!(mach_voucher_attr_recipe_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_voucher_attr_recipe_data>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_voucher_attr_recipe_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).previous_voucher) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(previous_voucher)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(content_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_voucher_attr_recipe_data),
            "::",
            stringify!(content)
        )
    );
}
pub type mach_voucher_attr_recipe_data_t = mach_voucher_attr_recipe_data;
pub type mach_voucher_attr_recipe_t = *mut mach_voucher_attr_recipe_data_t;
pub type mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_t = *mut u8;
pub type mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub type mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_manager_t = mach_port_t;
pub type mach_voucher_attr_control_t = mach_port_t;
pub type ipc_voucher_attr_manager_t = mach_port_t;
pub type ipc_voucher_attr_control_t = mach_port_t;
pub type mach_voucher_attr_value_handle_t = u64;
pub type mach_voucher_attr_value_handle_array_t = *mut mach_voucher_attr_value_handle_t;
pub type mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub type mach_voucher_attr_value_reference_t = u32;
pub type mach_voucher_attr_value_flags_t = u32;
pub type mach_voucher_attr_control_flags_t = u32;
pub type mach_voucher_attr_importance_refs = u32;
pub type processor_info_t = *mut integer_t;
pub type processor_info_array_t = *mut integer_t;
pub type processor_info_data_t = [integer_t; 1024usize];
pub type processor_set_info_t = *mut integer_t;
pub type processor_set_info_data_t = [integer_t; 1024usize];
pub type processor_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct processor_basic_info {
    pub cpu_type: cpu_type_t,
    pub cpu_subtype: cpu_subtype_t,
    pub running: boolean_t,
    pub slot_num: ::std::os::raw::c_int,
    pub __bindgen_anon_1: processor_basic_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union processor_basic_info__bindgen_ty_1 {
    pub is_master: boolean_t,
    pub is_main: boolean_t,
}
#[test]
fn bindgen_test_layout_processor_basic_info__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<processor_basic_info__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_basic_info__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(processor_basic_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_basic_info__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(processor_basic_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_master) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info__bindgen_ty_1),
            "::",
            stringify!(is_master)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_main) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info__bindgen_ty_1),
            "::",
            stringify!(is_main)
        )
    );
}
#[test]
fn bindgen_test_layout_processor_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_basic_info>(),
        20usize,
        concat!("Size of: ", stringify!(processor_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(cpu_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_subtype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(cpu_subtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slot_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_basic_info),
            "::",
            stringify!(slot_num)
        )
    );
}
pub type processor_basic_info_data_t = processor_basic_info;
pub type processor_basic_info_t = *mut processor_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_cpu_load_info {
    pub cpu_ticks: [::std::os::raw::c_uint; 4usize],
}
#[test]
fn bindgen_test_layout_processor_cpu_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_cpu_load_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_cpu_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(processor_cpu_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_cpu_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_cpu_load_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_ticks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_cpu_load_info),
            "::",
            stringify!(cpu_ticks)
        )
    );
}
pub type processor_cpu_load_info_data_t = processor_cpu_load_info;
pub type processor_cpu_load_info_t = *mut processor_cpu_load_info;
pub type processor_set_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_basic_info {
    pub processor_count: ::std::os::raw::c_int,
    pub default_policy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_processor_set_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_set_basic_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_set_basic_info>(),
        8usize,
        concat!("Size of: ", stringify!(processor_set_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_set_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_set_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).processor_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_basic_info),
            "::",
            stringify!(processor_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).default_policy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_basic_info),
            "::",
            stringify!(default_policy)
        )
    );
}
pub type processor_set_basic_info_data_t = processor_set_basic_info;
pub type processor_set_basic_info_t = *mut processor_set_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct processor_set_load_info {
    pub task_count: ::std::os::raw::c_int,
    pub thread_count: ::std::os::raw::c_int,
    pub load_average: integer_t,
    pub mach_factor: integer_t,
}
#[test]
fn bindgen_test_layout_processor_set_load_info() {
    const UNINIT: ::std::mem::MaybeUninit<processor_set_load_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<processor_set_load_info>(),
        16usize,
        concat!("Size of: ", stringify!(processor_set_load_info))
    );
    assert_eq!(
        ::std::mem::align_of::<processor_set_load_info>(),
        4usize,
        concat!("Alignment of ", stringify!(processor_set_load_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(task_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(thread_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_average) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(load_average)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mach_factor) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(processor_set_load_info),
            "::",
            stringify!(mach_factor)
        )
    );
}
pub type processor_set_load_info_data_t = processor_set_load_info;
pub type processor_set_load_info_t = *mut processor_set_load_info;
pub type policy_t = ::std::os::raw::c_int;
pub type policy_info_t = *mut integer_t;
pub type policy_base_t = *mut integer_t;
pub type policy_limit_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_base {
    pub base_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_base() {
    const UNINIT: ::std::mem::MaybeUninit<policy_timeshare_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_base>(),
        4usize,
        concat!("Size of: ", stringify!(policy_timeshare_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_base),
            "::",
            stringify!(base_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_limit() {
    const UNINIT: ::std::mem::MaybeUninit<policy_timeshare_limit> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_timeshare_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_limit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_timeshare_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub cur_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_timeshare_info() {
    const UNINIT: ::std::mem::MaybeUninit<policy_timeshare_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_timeshare_info>(),
        20usize,
        concat!("Size of: ", stringify!(policy_timeshare_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_timeshare_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_timeshare_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_priority) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(cur_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depressed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depress_priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_timeshare_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_timeshare_base_t = *mut policy_timeshare_base;
pub type policy_timeshare_limit_t = *mut policy_timeshare_limit;
pub type policy_timeshare_info_t = *mut policy_timeshare_info;
pub type policy_timeshare_base_data_t = policy_timeshare_base;
pub type policy_timeshare_limit_data_t = policy_timeshare_limit;
pub type policy_timeshare_info_data_t = policy_timeshare_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_base {
    pub base_priority: integer_t,
    pub quantum: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_base() {
    const UNINIT: ::std::mem::MaybeUninit<policy_rr_base> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_rr_base>(),
        8usize,
        concat!("Size of: ", stringify!(policy_rr_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_base),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_base),
            "::",
            stringify!(quantum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_limit() {
    const UNINIT: ::std::mem::MaybeUninit<policy_rr_limit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_rr_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_rr_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_limit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_rr_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub quantum: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_rr_info() {
    const UNINIT: ::std::mem::MaybeUninit<policy_rr_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_rr_info>(),
        20usize,
        concat!("Size of: ", stringify!(policy_rr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_rr_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_rr_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(quantum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depressed) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depress_priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_rr_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_rr_base_t = *mut policy_rr_base;
pub type policy_rr_limit_t = *mut policy_rr_limit;
pub type policy_rr_info_t = *mut policy_rr_info;
pub type policy_rr_base_data_t = policy_rr_base;
pub type policy_rr_limit_data_t = policy_rr_limit;
pub type policy_rr_info_data_t = policy_rr_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_base {
    pub base_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_base() {
    const UNINIT: ::std::mem::MaybeUninit<policy_fifo_base> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_base>(),
        4usize,
        concat!("Size of: ", stringify!(policy_fifo_base))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_base>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_base),
            "::",
            stringify!(base_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_limit {
    pub max_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_limit() {
    const UNINIT: ::std::mem::MaybeUninit<policy_fifo_limit> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_limit>(),
        4usize,
        concat!("Size of: ", stringify!(policy_fifo_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_limit>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_limit))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_limit),
            "::",
            stringify!(max_priority)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_fifo_info {
    pub max_priority: integer_t,
    pub base_priority: integer_t,
    pub depressed: boolean_t,
    pub depress_priority: integer_t,
}
#[test]
fn bindgen_test_layout_policy_fifo_info() {
    const UNINIT: ::std::mem::MaybeUninit<policy_fifo_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_fifo_info>(),
        16usize,
        concat!("Size of: ", stringify!(policy_fifo_info))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_fifo_info>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_fifo_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(max_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_priority) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(base_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depressed) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(depressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depress_priority) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_fifo_info),
            "::",
            stringify!(depress_priority)
        )
    );
}
pub type policy_fifo_base_t = *mut policy_fifo_base;
pub type policy_fifo_limit_t = *mut policy_fifo_limit;
pub type policy_fifo_info_t = *mut policy_fifo_info;
pub type policy_fifo_base_data_t = policy_fifo_base;
pub type policy_fifo_limit_data_t = policy_fifo_limit;
pub type policy_fifo_info_data_t = policy_fifo_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_bases {
    pub ts: policy_timeshare_base_data_t,
    pub rr: policy_rr_base_data_t,
    pub fifo: policy_fifo_base_data_t,
}
#[test]
fn bindgen_test_layout_policy_bases() {
    const UNINIT: ::std::mem::MaybeUninit<policy_bases> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_bases>(),
        16usize,
        concat!("Size of: ", stringify!(policy_bases))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_bases>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_bases))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_bases),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_bases),
            "::",
            stringify!(rr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_bases),
            "::",
            stringify!(fifo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_limits {
    pub ts: policy_timeshare_limit_data_t,
    pub rr: policy_rr_limit_data_t,
    pub fifo: policy_fifo_limit_data_t,
}
#[test]
fn bindgen_test_layout_policy_limits() {
    const UNINIT: ::std::mem::MaybeUninit<policy_limits> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_limits>(),
        12usize,
        concat!("Size of: ", stringify!(policy_limits))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_limits>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_limits))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_limits),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_limits),
            "::",
            stringify!(rr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_limits),
            "::",
            stringify!(fifo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct policy_infos {
    pub ts: policy_timeshare_info_data_t,
    pub rr: policy_rr_info_data_t,
    pub fifo: policy_fifo_info_data_t,
}
#[test]
fn bindgen_test_layout_policy_infos() {
    const UNINIT: ::std::mem::MaybeUninit<policy_infos> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<policy_infos>(),
        56usize,
        concat!("Size of: ", stringify!(policy_infos))
    );
    assert_eq!(
        ::std::mem::align_of::<policy_infos>(),
        4usize,
        concat!("Alignment of ", stringify!(policy_infos))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_infos),
            "::",
            stringify!(ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_infos),
            "::",
            stringify!(rr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fifo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(policy_infos),
            "::",
            stringify!(fifo)
        )
    );
}
pub type policy_base_data_t = policy_bases;
pub type policy_limit_data_t = policy_limits;
pub type policy_info_data_t = policy_infos;
pub type task_flavor_t = natural_t;
pub type task_info_t = *mut integer_t;
pub type task_info_data_t = [integer_t; 1024usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_32 {
    pub suspend_count: integer_t,
    pub virtual_size: natural_t,
    pub resident_size: natural_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info_32() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info_32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info_32>(),
        32usize,
        concat!("Size of: ", stringify!(task_basic_info_32))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info_32>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info_32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_32),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_32_data_t = task_basic_info_32;
pub type task_basic_info_32_t = *mut task_basic_info_32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info_64 {
    pub suspend_count: integer_t,
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info_64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info_64>(),
        40usize,
        concat!("Size of: ", stringify!(task_basic_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info_64),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_64_data_t = task_basic_info_64;
pub type task_basic_info_64_t = *mut task_basic_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_basic_info {
    pub suspend_count: integer_t,
    pub virtual_size: vm_size_t,
    pub resident_size: vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
}
#[test]
fn bindgen_test_layout_task_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_basic_info>(),
        40usize,
        concat!("Size of: ", stringify!(task_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(task_basic_info),
            "::",
            stringify!(policy)
        )
    );
}
pub type task_basic_info_data_t = task_basic_info;
pub type task_basic_info_t = *mut task_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_events_info {
    pub faults: integer_t,
    pub pageins: integer_t,
    pub cow_faults: integer_t,
    pub messages_sent: integer_t,
    pub messages_received: integer_t,
    pub syscalls_mach: integer_t,
    pub syscalls_unix: integer_t,
    pub csw: integer_t,
}
#[test]
fn bindgen_test_layout_task_events_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_events_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_events_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_events_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_events_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_events_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faults) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(faults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pageins) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(pageins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cow_faults) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(cow_faults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messages_sent) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(messages_sent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).messages_received) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(messages_received)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syscalls_mach) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(syscalls_mach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).syscalls_unix) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(syscalls_unix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).csw) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(task_events_info),
            "::",
            stringify!(csw)
        )
    );
}
pub type task_events_info_data_t = task_events_info;
pub type task_events_info_t = *mut task_events_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_thread_times_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
}
#[test]
fn bindgen_test_layout_task_thread_times_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_thread_times_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_thread_times_info>(),
        16usize,
        concat!("Size of: ", stringify!(task_thread_times_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_thread_times_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_thread_times_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_thread_times_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_thread_times_info),
            "::",
            stringify!(system_time)
        )
    );
}
pub type task_thread_times_info_data_t = task_thread_times_info;
pub type task_thread_times_info_t = *mut task_thread_times_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_absolutetime_info {
    pub total_user: u64,
    pub total_system: u64,
    pub threads_user: u64,
    pub threads_system: u64,
}
#[test]
fn bindgen_test_layout_task_absolutetime_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_absolutetime_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_absolutetime_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_absolutetime_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_absolutetime_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_absolutetime_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(total_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_system) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(total_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threads_user) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(threads_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).threads_system) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_absolutetime_info),
            "::",
            stringify!(threads_system)
        )
    );
}
pub type task_absolutetime_info_data_t = task_absolutetime_info;
pub type task_absolutetime_info_t = *mut task_absolutetime_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_kernelmemory_info {
    pub total_palloc: u64,
    pub total_pfree: u64,
    pub total_salloc: u64,
    pub total_sfree: u64,
}
#[test]
fn bindgen_test_layout_task_kernelmemory_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_kernelmemory_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_kernelmemory_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_kernelmemory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_kernelmemory_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_kernelmemory_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_palloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_palloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_pfree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_pfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_salloc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_salloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_sfree) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_kernelmemory_info),
            "::",
            stringify!(total_sfree)
        )
    );
}
pub type task_kernelmemory_info_data_t = task_kernelmemory_info;
pub type task_kernelmemory_info_t = *mut task_kernelmemory_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_affinity_tag_info {
    pub set_count: integer_t,
    pub min: integer_t,
    pub max: integer_t,
    pub task_count: integer_t,
}
#[test]
fn bindgen_test_layout_task_affinity_tag_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_affinity_tag_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_affinity_tag_info>(),
        16usize,
        concat!("Size of: ", stringify!(task_affinity_tag_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_affinity_tag_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_affinity_tag_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).set_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(set_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_affinity_tag_info),
            "::",
            stringify!(task_count)
        )
    );
}
pub type task_affinity_tag_info_data_t = task_affinity_tag_info;
pub type task_affinity_tag_info_t = *mut task_affinity_tag_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_dyld_info {
    pub all_image_info_addr: mach_vm_address_t,
    pub all_image_info_size: mach_vm_size_t,
    pub all_image_info_format: integer_t,
}
#[test]
fn bindgen_test_layout_task_dyld_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_dyld_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_dyld_info>(),
        20usize,
        concat!("Size of: ", stringify!(task_dyld_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_dyld_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_dyld_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_image_info_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_image_info_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_image_info_format) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_dyld_info),
            "::",
            stringify!(all_image_info_format)
        )
    );
}
pub type task_dyld_info_data_t = task_dyld_info;
pub type task_dyld_info_t = *mut task_dyld_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_extmod_info {
    pub task_uuid: [::std::os::raw::c_uchar; 16usize],
    pub extmod_statistics: vm_extmod_statistics_data_t,
}
#[test]
fn bindgen_test_layout_task_extmod_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_extmod_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_extmod_info>(),
        64usize,
        concat!("Size of: ", stringify!(task_extmod_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_extmod_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_extmod_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_extmod_info),
            "::",
            stringify!(task_uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extmod_statistics) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_extmod_info),
            "::",
            stringify!(extmod_statistics)
        )
    );
}
pub type task_extmod_info_data_t = task_extmod_info;
pub type task_extmod_info_t = *mut task_extmod_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_task_basic_info {
    pub virtual_size: mach_vm_size_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_max: mach_vm_size_t,
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub policy: policy_t,
    pub suspend_count: integer_t,
}
#[test]
fn bindgen_test_layout_mach_task_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_task_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_task_basic_info>(),
        48usize,
        concat!("Size of: ", stringify!(mach_task_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_task_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_task_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size_max) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(resident_size_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_task_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
}
pub type mach_task_basic_info_data_t = mach_task_basic_info;
pub type mach_task_basic_info_t = *mut mach_task_basic_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info {
    pub total_user: u64,
    pub total_system: u64,
    pub task_interrupt_wakeups: u64,
    pub task_platform_idle_wakeups: u64,
    pub task_timer_wakeups_bin_1: u64,
    pub task_timer_wakeups_bin_2: u64,
}
#[test]
fn bindgen_test_layout_task_power_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_power_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_power_info>(),
        48usize,
        concat!("Size of: ", stringify!(task_power_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_power_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_power_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_user) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(total_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_system) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(total_system)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_interrupt_wakeups) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_interrupt_wakeups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_platform_idle_wakeups) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_platform_idle_wakeups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_timer_wakeups_bin_1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_timer_wakeups_bin_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_timer_wakeups_bin_2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info),
            "::",
            stringify!(task_timer_wakeups_bin_2)
        )
    );
}
pub type task_power_info_data_t = task_power_info;
pub type task_power_info_t = *mut task_power_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_vm_info {
    pub virtual_size: mach_vm_size_t,
    pub region_count: integer_t,
    pub page_size: integer_t,
    pub resident_size: mach_vm_size_t,
    pub resident_size_peak: mach_vm_size_t,
    pub device: mach_vm_size_t,
    pub device_peak: mach_vm_size_t,
    pub internal: mach_vm_size_t,
    pub internal_peak: mach_vm_size_t,
    pub external: mach_vm_size_t,
    pub external_peak: mach_vm_size_t,
    pub reusable: mach_vm_size_t,
    pub reusable_peak: mach_vm_size_t,
    pub purgeable_volatile_pmap: mach_vm_size_t,
    pub purgeable_volatile_resident: mach_vm_size_t,
    pub purgeable_volatile_virtual: mach_vm_size_t,
    pub compressed: mach_vm_size_t,
    pub compressed_peak: mach_vm_size_t,
    pub compressed_lifetime: mach_vm_size_t,
    pub phys_footprint: mach_vm_size_t,
    pub min_address: mach_vm_address_t,
    pub max_address: mach_vm_address_t,
    pub ledger_phys_footprint_peak: i64,
    pub ledger_purgeable_nonvolatile: i64,
    pub ledger_purgeable_novolatile_compressed: i64,
    pub ledger_purgeable_volatile: i64,
    pub ledger_purgeable_volatile_compressed: i64,
    pub ledger_tag_network_nonvolatile: i64,
    pub ledger_tag_network_nonvolatile_compressed: i64,
    pub ledger_tag_network_volatile: i64,
    pub ledger_tag_network_volatile_compressed: i64,
    pub ledger_tag_media_footprint: i64,
    pub ledger_tag_media_footprint_compressed: i64,
    pub ledger_tag_media_nofootprint: i64,
    pub ledger_tag_media_nofootprint_compressed: i64,
    pub ledger_tag_graphics_footprint: i64,
    pub ledger_tag_graphics_footprint_compressed: i64,
    pub ledger_tag_graphics_nofootprint: i64,
    pub ledger_tag_graphics_nofootprint_compressed: i64,
    pub ledger_tag_neural_footprint: i64,
    pub ledger_tag_neural_footprint_compressed: i64,
    pub ledger_tag_neural_nofootprint: i64,
    pub ledger_tag_neural_nofootprint_compressed: i64,
    pub limit_bytes_remaining: u64,
    pub decompressions: integer_t,
    pub ledger_swapins: i64,
}
#[test]
fn bindgen_test_layout_task_vm_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_vm_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_vm_info>(),
        356usize,
        concat!("Size of: ", stringify!(task_vm_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_vm_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_vm_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).virtual_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(virtual_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).region_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(region_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_size) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(page_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(resident_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resident_size_peak) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(resident_size_peak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_peak) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(device_peak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(internal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internal_peak) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(internal_peak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(external)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_peak) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(external_peak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reusable) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(reusable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reusable_peak) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(reusable_peak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_volatile_pmap) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_pmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_volatile_resident) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purgeable_volatile_virtual) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(purgeable_volatile_virtual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressed) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressed_peak) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed_peak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compressed_lifetime) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(compressed_lifetime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phys_footprint) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(phys_footprint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_address) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(min_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_address) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(max_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_phys_footprint_peak) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_phys_footprint_peak)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_nonvolatile) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_nonvolatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_novolatile_compressed) as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_novolatile_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_purgeable_volatile) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_volatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_purgeable_volatile_compressed) as usize
                - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_purgeable_volatile_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_network_nonvolatile) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_nonvolatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_network_nonvolatile_compressed) as usize
                - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_nonvolatile_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_tag_network_volatile) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_volatile)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_network_volatile_compressed) as usize
                - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_network_volatile_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_tag_media_footprint) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_footprint_compressed) as usize
                - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_nofootprint) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_media_nofootprint_compressed) as usize
                - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_media_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_footprint) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_footprint_compressed) as usize
                - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_nofootprint) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_graphics_nofootprint_compressed) as usize
                - ptr as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_graphics_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_tag_neural_footprint) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_footprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_neural_footprint_compressed) as usize
                - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_footprint_compressed)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_neural_nofootprint) as usize - ptr as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_nofootprint)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ledger_tag_neural_nofootprint_compressed) as usize
                - ptr as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_tag_neural_nofootprint_compressed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limit_bytes_remaining) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(limit_bytes_remaining)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decompressions) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(decompressions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledger_swapins) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(task_vm_info),
            "::",
            stringify!(ledger_swapins)
        )
    );
}
pub type task_vm_info_data_t = task_vm_info;
pub type task_vm_info_t = *mut task_vm_info;
pub type task_purgable_info_t = vm_purgeable_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_trace_memory_info {
    pub user_memory_address: u64,
    pub buffer_size: u64,
    pub mailbox_array_size: u64,
}
#[test]
fn bindgen_test_layout_task_trace_memory_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_trace_memory_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_trace_memory_info>(),
        24usize,
        concat!("Size of: ", stringify!(task_trace_memory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_trace_memory_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_trace_memory_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_memory_address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(user_memory_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(buffer_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mailbox_array_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_trace_memory_info),
            "::",
            stringify!(mailbox_array_size)
        )
    );
}
pub type task_trace_memory_info_data_t = task_trace_memory_info;
pub type task_trace_memory_info_t = *mut task_trace_memory_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_wait_state_info {
    pub total_wait_state_time: u64,
    pub total_wait_sfi_state_time: u64,
    pub _reserved: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_task_wait_state_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_wait_state_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_wait_state_info>(),
        32usize,
        concat!("Size of: ", stringify!(task_wait_state_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_wait_state_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_wait_state_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_wait_state_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(total_wait_state_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_wait_sfi_state_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(total_wait_sfi_state_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_wait_state_info),
            "::",
            stringify!(_reserved)
        )
    );
}
pub type task_wait_state_info_data_t = task_wait_state_info;
pub type task_wait_state_info_t = *mut task_wait_state_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct gpu_energy_data {
    pub task_gpu_utilisation: u64,
    pub task_gpu_stat_reserved0: u64,
    pub task_gpu_stat_reserved1: u64,
    pub task_gpu_stat_reserved2: u64,
}
#[test]
fn bindgen_test_layout_gpu_energy_data() {
    const UNINIT: ::std::mem::MaybeUninit<gpu_energy_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<gpu_energy_data>(),
        32usize,
        concat!("Size of: ", stringify!(gpu_energy_data))
    );
    assert_eq!(
        ::std::mem::align_of::<gpu_energy_data>(),
        4usize,
        concat!("Alignment of ", stringify!(gpu_energy_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_gpu_utilisation) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_utilisation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_gpu_stat_reserved0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_gpu_stat_reserved1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_gpu_stat_reserved2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gpu_energy_data),
            "::",
            stringify!(task_gpu_stat_reserved2)
        )
    );
}
pub type gpu_energy_data_t = *mut gpu_energy_data;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct task_power_info_v2 {
    pub cpu_energy: task_power_info_data_t,
    pub gpu_energy: gpu_energy_data,
    pub task_ptime: u64,
    pub task_pset_switches: u64,
}
#[test]
fn bindgen_test_layout_task_power_info_v2() {
    const UNINIT: ::std::mem::MaybeUninit<task_power_info_v2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_power_info_v2>(),
        96usize,
        concat!("Size of: ", stringify!(task_power_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<task_power_info_v2>(),
        4usize,
        concat!("Alignment of ", stringify!(task_power_info_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_energy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(cpu_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gpu_energy) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(gpu_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_ptime) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(task_ptime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_pset_switches) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(task_power_info_v2),
            "::",
            stringify!(task_pset_switches)
        )
    );
}
pub type task_power_info_v2_data_t = task_power_info_v2;
pub type task_power_info_v2_t = *mut task_power_info_v2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_flags_info {
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_task_flags_info() {
    const UNINIT: ::std::mem::MaybeUninit<task_flags_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_flags_info>(),
        4usize,
        concat!("Size of: ", stringify!(task_flags_info))
    );
    assert_eq!(
        ::std::mem::align_of::<task_flags_info>(),
        4usize,
        concat!("Alignment of ", stringify!(task_flags_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_flags_info),
            "::",
            stringify!(flags)
        )
    );
}
pub type task_flags_info_data_t = task_flags_info;
pub type task_flags_info_t = *mut task_flags_info;
pub type task_exc_guard_behavior_t = u32;
pub type task_corpse_forking_behavior_t = u32;
pub type task_inspect_flavor_t = natural_t;
pub const task_inspect_flavor_TASK_INSPECT_BASIC_COUNTS: task_inspect_flavor = 1;
pub type task_inspect_flavor = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_inspect_basic_counts {
    pub instructions: u64,
    pub cycles: u64,
}
#[test]
fn bindgen_test_layout_task_inspect_basic_counts() {
    const UNINIT: ::std::mem::MaybeUninit<task_inspect_basic_counts> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_inspect_basic_counts>(),
        16usize,
        concat!("Size of: ", stringify!(task_inspect_basic_counts))
    );
    assert_eq!(
        ::std::mem::align_of::<task_inspect_basic_counts>(),
        8usize,
        concat!("Alignment of ", stringify!(task_inspect_basic_counts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).instructions) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_inspect_basic_counts),
            "::",
            stringify!(instructions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cycles) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_inspect_basic_counts),
            "::",
            stringify!(cycles)
        )
    );
}
pub type task_inspect_basic_counts_data_t = task_inspect_basic_counts;
pub type task_inspect_basic_counts_t = *mut task_inspect_basic_counts;
pub type task_inspect_info_t = *mut integer_t;
pub type task_policy_flavor_t = natural_t;
pub type task_policy_t = *mut integer_t;
pub const task_role_TASK_RENICED: task_role = -1;
pub const task_role_TASK_UNSPECIFIED: task_role = 0;
pub const task_role_TASK_FOREGROUND_APPLICATION: task_role = 1;
pub const task_role_TASK_BACKGROUND_APPLICATION: task_role = 2;
pub const task_role_TASK_CONTROL_APPLICATION: task_role = 3;
pub const task_role_TASK_GRAPHICS_SERVER: task_role = 4;
pub const task_role_TASK_THROTTLE_APPLICATION: task_role = 5;
pub const task_role_TASK_NONUI_APPLICATION: task_role = 6;
pub const task_role_TASK_DEFAULT_APPLICATION: task_role = 7;
pub const task_role_TASK_DARWINBG_APPLICATION: task_role = 8;
pub type task_role = ::std::os::raw::c_int;
pub use self::task_role as task_role_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_category_policy {
    pub role: task_role_t,
}
#[test]
fn bindgen_test_layout_task_category_policy() {
    const UNINIT: ::std::mem::MaybeUninit<task_category_policy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_category_policy>(),
        4usize,
        concat!("Size of: ", stringify!(task_category_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<task_category_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(task_category_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).role) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_category_policy),
            "::",
            stringify!(role)
        )
    );
}
pub type task_category_policy_data_t = task_category_policy;
pub type task_category_policy_t = *mut task_category_policy;
pub const task_latency_qos_LATENCY_QOS_TIER_UNSPECIFIED: task_latency_qos = 0;
pub const task_latency_qos_LATENCY_QOS_TIER_0: task_latency_qos = 16711681;
pub const task_latency_qos_LATENCY_QOS_TIER_1: task_latency_qos = 16711682;
pub const task_latency_qos_LATENCY_QOS_TIER_2: task_latency_qos = 16711683;
pub const task_latency_qos_LATENCY_QOS_TIER_3: task_latency_qos = 16711684;
pub const task_latency_qos_LATENCY_QOS_TIER_4: task_latency_qos = 16711685;
pub const task_latency_qos_LATENCY_QOS_TIER_5: task_latency_qos = 16711686;
pub type task_latency_qos = ::std::os::raw::c_uint;
pub type task_latency_qos_t = integer_t;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_UNSPECIFIED: task_throughput_qos = 0;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_0: task_throughput_qos = 16646145;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_1: task_throughput_qos = 16646146;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_2: task_throughput_qos = 16646147;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_3: task_throughput_qos = 16646148;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_4: task_throughput_qos = 16646149;
pub const task_throughput_qos_THROUGHPUT_QOS_TIER_5: task_throughput_qos = 16646150;
pub type task_throughput_qos = ::std::os::raw::c_uint;
pub type task_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_qos_policy {
    pub task_latency_qos_tier: task_latency_qos_t,
    pub task_throughput_qos_tier: task_throughput_qos_t,
}
#[test]
fn bindgen_test_layout_task_qos_policy() {
    const UNINIT: ::std::mem::MaybeUninit<task_qos_policy> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_qos_policy>(),
        8usize,
        concat!("Size of: ", stringify!(task_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<task_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(task_qos_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_latency_qos_tier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_qos_policy),
            "::",
            stringify!(task_latency_qos_tier)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).task_throughput_qos_tier) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(task_qos_policy),
            "::",
            stringify!(task_throughput_qos_tier)
        )
    );
}
pub type task_qos_policy_t = *mut task_qos_policy;
pub type task_special_port_t = ::std::os::raw::c_int;
pub type thread_flavor_t = natural_t;
pub type thread_info_t = *mut integer_t;
pub type thread_info_data_t = [integer_t; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_basic_info {
    pub user_time: time_value_t,
    pub system_time: time_value_t,
    pub cpu_usage: integer_t,
    pub policy: policy_t,
    pub run_state: integer_t,
    pub flags: integer_t,
    pub suspend_count: integer_t,
    pub sleep_time: integer_t,
}
#[test]
fn bindgen_test_layout_thread_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<thread_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_basic_info>(),
        40usize,
        concat!("Size of: ", stringify!(thread_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpu_usage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(cpu_usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).policy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).run_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(run_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suspend_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(suspend_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sleep_time) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_basic_info),
            "::",
            stringify!(sleep_time)
        )
    );
}
pub type thread_basic_info_data_t = thread_basic_info;
pub type thread_basic_info_t = *mut thread_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_identifier_info {
    pub thread_id: u64,
    pub thread_handle: u64,
    pub dispatch_qaddr: u64,
}
#[test]
fn bindgen_test_layout_thread_identifier_info() {
    const UNINIT: ::std::mem::MaybeUninit<thread_identifier_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_identifier_info>(),
        24usize,
        concat!("Size of: ", stringify!(thread_identifier_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_identifier_info>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_identifier_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(thread_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dispatch_qaddr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_identifier_info),
            "::",
            stringify!(dispatch_qaddr)
        )
    );
}
pub type thread_identifier_info_data_t = thread_identifier_info;
pub type thread_identifier_info_t = *mut thread_identifier_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_info {
    pub pth_user_time: u64,
    pub pth_system_time: u64,
    pub pth_cpu_usage: i32,
    pub pth_policy: i32,
    pub pth_run_state: i32,
    pub pth_flags: i32,
    pub pth_sleep_time: i32,
    pub pth_curpri: i32,
    pub pth_priority: i32,
    pub pth_maxpriority: i32,
    pub pth_name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_thread_extended_info() {
    const UNINIT: ::std::mem::MaybeUninit<thread_extended_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_extended_info>(),
        112usize,
        concat!("Size of: ", stringify!(thread_extended_info))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_extended_info>(),
        8usize,
        concat!("Alignment of ", stringify!(thread_extended_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_user_time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_user_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_system_time) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_system_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_cpu_usage) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_cpu_usage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_policy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_policy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_run_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_run_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_flags) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_sleep_time) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_sleep_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_curpri) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_curpri)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_priority) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_maxpriority) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_maxpriority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pth_name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_info),
            "::",
            stringify!(pth_name)
        )
    );
}
pub type thread_extended_info_data_t = thread_extended_info;
pub type thread_extended_info_t = *mut thread_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_entry {
    pub count: u64,
    pub size: u64,
}
#[test]
fn bindgen_test_layout_io_stat_entry() {
    const UNINIT: ::std::mem::MaybeUninit<io_stat_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stat_entry>(),
        16usize,
        concat!("Size of: ", stringify!(io_stat_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stat_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stat_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_entry),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_entry),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct io_stat_info {
    pub disk_reads: io_stat_entry,
    pub io_priority: [io_stat_entry; 4usize],
    pub paging: io_stat_entry,
    pub metadata: io_stat_entry,
    pub total_io: io_stat_entry,
}
#[test]
fn bindgen_test_layout_io_stat_info() {
    const UNINIT: ::std::mem::MaybeUninit<io_stat_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<io_stat_info>(),
        128usize,
        concat!("Size of: ", stringify!(io_stat_info))
    );
    assert_eq!(
        ::std::mem::align_of::<io_stat_info>(),
        8usize,
        concat!("Alignment of ", stringify!(io_stat_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disk_reads) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(disk_reads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_priority) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(io_priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paging) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(paging)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_io) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(io_stat_info),
            "::",
            stringify!(total_io)
        )
    );
}
pub type io_stat_info_t = *mut io_stat_info;
pub type thread_policy_flavor_t = natural_t;
pub type thread_policy_t = *mut integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_standard_policy {
    pub no_data: natural_t,
}
#[test]
fn bindgen_test_layout_thread_standard_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_standard_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_standard_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_standard_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_standard_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_standard_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_standard_policy),
            "::",
            stringify!(no_data)
        )
    );
}
pub type thread_standard_policy_data_t = thread_standard_policy;
pub type thread_standard_policy_t = *mut thread_standard_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_extended_policy {
    pub timeshare: boolean_t,
}
#[test]
fn bindgen_test_layout_thread_extended_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_extended_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_extended_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_extended_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_extended_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_extended_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeshare) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_extended_policy),
            "::",
            stringify!(timeshare)
        )
    );
}
pub type thread_extended_policy_data_t = thread_extended_policy;
pub type thread_extended_policy_t = *mut thread_extended_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_time_constraint_policy {
    pub period: u32,
    pub computation: u32,
    pub constraint: u32,
    pub preemptible: boolean_t,
}
#[test]
fn bindgen_test_layout_thread_time_constraint_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_time_constraint_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_time_constraint_policy>(),
        16usize,
        concat!("Size of: ", stringify!(thread_time_constraint_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_time_constraint_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_time_constraint_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).computation) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(computation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constraint) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(constraint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preemptible) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_time_constraint_policy),
            "::",
            stringify!(preemptible)
        )
    );
}
pub type thread_time_constraint_policy_data_t = thread_time_constraint_policy;
pub type thread_time_constraint_policy_t = *mut thread_time_constraint_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_precedence_policy {
    pub importance: integer_t,
}
#[test]
fn bindgen_test_layout_thread_precedence_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_precedence_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_precedence_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_precedence_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_precedence_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_precedence_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).importance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_precedence_policy),
            "::",
            stringify!(importance)
        )
    );
}
pub type thread_precedence_policy_data_t = thread_precedence_policy;
pub type thread_precedence_policy_t = *mut thread_precedence_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_affinity_policy {
    pub affinity_tag: integer_t,
}
#[test]
fn bindgen_test_layout_thread_affinity_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_affinity_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_affinity_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_affinity_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_affinity_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_affinity_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).affinity_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_affinity_policy),
            "::",
            stringify!(affinity_tag)
        )
    );
}
pub type thread_affinity_policy_data_t = thread_affinity_policy;
pub type thread_affinity_policy_t = *mut thread_affinity_policy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_background_policy {
    pub priority: integer_t,
}
#[test]
fn bindgen_test_layout_thread_background_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_background_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_background_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_background_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_background_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_background_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_background_policy),
            "::",
            stringify!(priority)
        )
    );
}
pub type thread_background_policy_data_t = thread_background_policy;
pub type thread_background_policy_t = *mut thread_background_policy;
pub type thread_latency_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_latency_qos_policy {
    pub thread_latency_qos_tier: thread_latency_qos_t,
}
#[test]
fn bindgen_test_layout_thread_latency_qos_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_latency_qos_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_latency_qos_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_latency_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_latency_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_latency_qos_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_latency_qos_tier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_latency_qos_policy),
            "::",
            stringify!(thread_latency_qos_tier)
        )
    );
}
pub type thread_latency_qos_policy_data_t = thread_latency_qos_policy;
pub type thread_latency_qos_policy_t = *mut thread_latency_qos_policy;
pub type thread_throughput_qos_t = integer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct thread_throughput_qos_policy {
    pub thread_throughput_qos_tier: thread_throughput_qos_t,
}
#[test]
fn bindgen_test_layout_thread_throughput_qos_policy() {
    const UNINIT: ::std::mem::MaybeUninit<thread_throughput_qos_policy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<thread_throughput_qos_policy>(),
        4usize,
        concat!("Size of: ", stringify!(thread_throughput_qos_policy))
    );
    assert_eq!(
        ::std::mem::align_of::<thread_throughput_qos_policy>(),
        4usize,
        concat!("Alignment of ", stringify!(thread_throughput_qos_policy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thread_throughput_qos_tier) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(thread_throughput_qos_policy),
            "::",
            stringify!(thread_throughput_qos_tier)
        )
    );
}
pub type thread_throughput_qos_policy_data_t = thread_throughput_qos_policy;
pub type thread_throughput_qos_policy_t = *mut thread_throughput_qos_policy;
pub type alarm_type_t = ::std::os::raw::c_int;
pub type sleep_type_t = ::std::os::raw::c_int;
pub type clock_id_t = ::std::os::raw::c_int;
pub type clock_flavor_t = ::std::os::raw::c_int;
pub type clock_attr_t = *mut ::std::os::raw::c_int;
pub type clock_res_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_timespec {
    pub tv_sec: ::std::os::raw::c_uint,
    pub tv_nsec: clock_res_t,
}
#[test]
fn bindgen_test_layout_mach_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<mach_timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_timespec>(),
        8usize,
        concat!("Size of: ", stringify!(mach_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_timespec>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type mach_timespec_t = mach_timespec;
pub type vm_machine_attribute_t = ::std::os::raw::c_uint;
pub type vm_machine_attribute_val_t = ::std::os::raw::c_int;
pub type vm_inherit_t = ::std::os::raw::c_uint;
pub type vm_purgable_t = ::std::os::raw::c_int;
pub type vm_behavior_t = ::std::os::raw::c_int;
extern "C" {
    pub static mut vm_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_page_shift: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut vm_kernel_page_size: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_mask: vm_size_t;
}
extern "C" {
    pub static mut vm_kernel_page_shift: ::std::os::raw::c_int;
}
pub type vm32_object_id_t = u32;
pub type vm_region_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_t = *mut ::std::os::raw::c_int;
pub type vm_region_recurse_info_64_t = *mut ::std::os::raw::c_int;
pub type vm_region_flavor_t = ::std::os::raw::c_int;
pub type vm_region_info_data_t = [::std::os::raw::c_int; 1024usize];
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: memory_object_offset_t,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_basic_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_basic_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_basic_info_64>(),
        36usize,
        concat!("Size of: ", stringify!(vm_region_basic_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_basic_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_basic_info_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_basic_info_64_t = *mut vm_region_basic_info_64;
pub type vm_region_basic_info_data_64_t = vm_region_basic_info_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_basic_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub shared: boolean_t,
    pub reserved: boolean_t,
    pub offset: u32,
    pub behavior: vm_behavior_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_basic_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_basic_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_basic_info>(),
        32usize,
        concat!("Size of: ", stringify!(vm_region_basic_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_basic_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_basic_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_basic_info),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_basic_info_t = *mut vm_region_basic_info;
pub type vm_region_basic_info_data_t = vm_region_basic_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_extended_info {
    pub protection: vm_prot_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub pages_reusable: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_vm_region_extended_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_extended_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_extended_info>(),
        36usize,
        concat!("Size of: ", stringify!(vm_region_extended_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_extended_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_extended_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_resident) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_shared_now_private) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_swapped_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_dirtied) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_reusable) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_extended_info),
            "::",
            stringify!(pages_reusable)
        )
    );
}
pub type vm_region_extended_info_t = *mut vm_region_extended_info;
pub type vm_region_extended_info_data_t = vm_region_extended_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_top_info {
    pub obj_id: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub private_pages_resident: ::std::os::raw::c_uint,
    pub shared_pages_resident: ::std::os::raw::c_uint,
    pub share_mode: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_vm_region_top_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_top_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_top_info>(),
        20usize,
        concat!("Size of: ", stringify!(vm_region_top_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_top_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_top_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(obj_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_pages_resident) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(private_pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shared_pages_resident) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(shared_pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_top_info),
            "::",
            stringify!(share_mode)
        )
    );
}
pub type vm_region_top_info_t = *mut vm_region_top_info;
pub type vm_region_top_info_data_t = vm_region_top_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: u32,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_submap_info() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_submap_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_info>(),
        60usize,
        concat!("Size of: ", stringify!(vm_region_submap_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_info>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_resident) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_shared_now_private) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_swapped_out) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_dirtied) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_submap) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_submap_info_t = *mut vm_region_submap_info;
pub type vm_region_submap_info_data_t = vm_region_submap_info;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub pages_resident: ::std::os::raw::c_uint,
    pub pages_shared_now_private: ::std::os::raw::c_uint,
    pub pages_swapped_out: ::std::os::raw::c_uint,
    pub pages_dirtied: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
    pub pages_reusable: ::std::os::raw::c_uint,
    pub object_id_full: vm_object_id_t,
}
#[test]
fn bindgen_test_layout_vm_region_submap_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_submap_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_info_64>(),
        76usize,
        concat!("Size of: ", stringify!(vm_region_submap_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_info_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_resident) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_resident)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_shared_now_private) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_shared_now_private)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_swapped_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_swapped_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_dirtied) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_dirtied)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_submap) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pages_reusable) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(pages_reusable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id_full) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_info_64),
            "::",
            stringify!(object_id_full)
        )
    );
}
pub type vm_region_submap_info_64_t = *mut vm_region_submap_info_64;
pub type vm_region_submap_info_data_64_t = vm_region_submap_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_region_submap_short_info_64 {
    pub protection: vm_prot_t,
    pub max_protection: vm_prot_t,
    pub inheritance: vm_inherit_t,
    pub offset: memory_object_offset_t,
    pub user_tag: ::std::os::raw::c_uint,
    pub ref_count: ::std::os::raw::c_uint,
    pub shadow_depth: ::std::os::raw::c_ushort,
    pub external_pager: ::std::os::raw::c_uchar,
    pub share_mode: ::std::os::raw::c_uchar,
    pub is_submap: boolean_t,
    pub behavior: vm_behavior_t,
    pub object_id: vm32_object_id_t,
    pub user_wired_count: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_vm_region_submap_short_info_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_region_submap_short_info_64> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_region_submap_short_info_64>(),
        48usize,
        concat!("Size of: ", stringify!(vm_region_submap_short_info_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_region_submap_short_info_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_region_submap_short_info_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protection) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_protection) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inheritance) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_tag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(user_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shadow_depth) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(shadow_depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).external_pager) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(external_pager)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).share_mode) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(share_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_submap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(is_submap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).behavior) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_wired_count) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_region_submap_short_info_64),
            "::",
            stringify!(user_wired_count)
        )
    );
}
pub type vm_region_submap_short_info_64_t = *mut vm_region_submap_short_info_64;
pub type vm_region_submap_short_info_data_64_t = vm_region_submap_short_info_64;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_read_entry {
    pub address: mach_vm_address_t,
    pub size: mach_vm_size_t,
}
#[test]
fn bindgen_test_layout_mach_vm_read_entry() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_read_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_read_entry>(),
        16usize,
        concat!("Size of: ", stringify!(mach_vm_read_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_read_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_vm_read_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_read_entry),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_read_entry),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_read_entry {
    pub address: vm_address_t,
    pub size: vm_size_t,
}
#[test]
fn bindgen_test_layout_vm_read_entry() {
    const UNINIT: ::std::mem::MaybeUninit<vm_read_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_read_entry>(),
        16usize,
        concat!("Size of: ", stringify!(vm_read_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_read_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_read_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_read_entry),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_read_entry),
            "::",
            stringify!(size)
        )
    );
}
pub type mach_vm_read_entry_t = [mach_vm_read_entry; 256usize];
pub type vm_read_entry_t = [vm_read_entry; 256usize];
pub type vm_page_info_t = *mut ::std::os::raw::c_int;
pub type vm_page_info_data_t = [::std::os::raw::c_int; 0usize];
pub type vm_page_info_flavor_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_page_info_basic {
    pub disposition: ::std::os::raw::c_int,
    pub ref_count: ::std::os::raw::c_int,
    pub object_id: vm_object_id_t,
    pub offset: memory_object_offset_t,
    pub depth: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vm_page_info_basic() {
    const UNINIT: ::std::mem::MaybeUninit<vm_page_info_basic> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_page_info_basic>(),
        32usize,
        concat!("Size of: ", stringify!(vm_page_info_basic))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_page_info_basic>(),
        8usize,
        concat!("Alignment of ", stringify!(vm_page_info_basic))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disposition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(disposition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(object_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_page_info_basic),
            "::",
            stringify!(__pad)
        )
    );
}
pub type vm_page_info_basic_t = *mut vm_page_info_basic;
pub type vm_page_info_basic_data_t = vm_page_info_basic;
pub type kmod_t = ::std::os::raw::c_int;
pub type kmod_start_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
pub type kmod_stop_func_t = ::std::option::Option<
    unsafe extern "C" fn(ki: *mut kmod_info, data: *mut ::std::os::raw::c_void) -> kern_return_t,
>;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_reference {
    pub next: *mut kmod_reference,
    pub info: *mut kmod_info,
}
#[test]
fn bindgen_test_layout_kmod_reference() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_reference> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_reference>(),
        16usize,
        concat!("Size of: ", stringify!(kmod_reference))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_reference>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_reference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_reference),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_reference),
            "::",
            stringify!(info)
        )
    );
}
pub type kmod_reference_t = kmod_reference;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info {
    pub next: *mut kmod_info,
    pub info_version: i32,
    pub id: u32,
    pub name: [::std::os::raw::c_char; 64usize],
    pub version: [::std::os::raw::c_char; 64usize],
    pub reference_count: i32,
    pub reference_list: *mut kmod_reference_t,
    pub address: vm_address_t,
    pub size: vm_size_t,
    pub hdr_size: vm_size_t,
    pub start: kmod_start_func_t,
    pub stop: kmod_stop_func_t,
}
#[test]
fn bindgen_test_layout_kmod_info() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_info>(),
        196usize,
        concat!("Size of: ", stringify!(kmod_info))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(info_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_count) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_list) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(reference_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info),
            "::",
            stringify!(stop)
        )
    );
}
pub type kmod_info_t = kmod_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_32_v1 {
    pub next_addr: u32,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u32,
    pub address: u32,
    pub size: u32,
    pub hdr_size: u32,
    pub start_addr: u32,
    pub stop_addr: u32,
}
#[test]
fn bindgen_test_layout_kmod_info_32_v1() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_info_32_v1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_info_32_v1>(),
        168usize,
        concat!("Size of: ", stringify!(kmod_info_32_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info_32_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info_32_v1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(next_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_version) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(info_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_count) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_list_addr) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(reference_list_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_addr) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(start_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop_addr) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_32_v1),
            "::",
            stringify!(stop_addr)
        )
    );
}
pub type kmod_info_32_v1_t = kmod_info_32_v1;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct kmod_info_64_v1 {
    pub next_addr: u64,
    pub info_version: i32,
    pub id: u32,
    pub name: [u8; 64usize],
    pub version: [u8; 64usize],
    pub reference_count: i32,
    pub reference_list_addr: u64,
    pub address: u64,
    pub size: u64,
    pub hdr_size: u64,
    pub start_addr: u64,
    pub stop_addr: u64,
}
#[test]
fn bindgen_test_layout_kmod_info_64_v1() {
    const UNINIT: ::std::mem::MaybeUninit<kmod_info_64_v1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<kmod_info_64_v1>(),
        196usize,
        concat!("Size of: ", stringify!(kmod_info_64_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<kmod_info_64_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(kmod_info_64_v1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(next_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(info_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_count) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(reference_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reference_list_addr) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(reference_list_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_size) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(hdr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_addr) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(start_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stop_addr) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(kmod_info_64_v1),
            "::",
            stringify!(stop_addr)
        )
    );
}
pub type kmod_info_64_v1_t = kmod_info_64_v1;
pub type kmod_args_t = *mut ::std::os::raw::c_void;
pub type kmod_control_flavor_t = ::std::os::raw::c_int;
pub type kmod_info_array_t = *mut kmod_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsid {
    pub val: [i32; 2usize],
}
#[test]
fn bindgen_test_layout_fsid() {
    const UNINIT: ::std::mem::MaybeUninit<fsid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsid>(),
        8usize,
        concat!("Size of: ", stringify!(fsid))
    );
    assert_eq!(
        ::std::mem::align_of::<fsid>(),
        4usize,
        concat!("Alignment of ", stringify!(fsid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fsid), "::", stringify!(val))
    );
}
pub type fsid_t = fsid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fsobj_id {
    pub fid_objno: u_int32_t,
    pub fid_generation: u_int32_t,
}
#[test]
fn bindgen_test_layout_fsobj_id() {
    const UNINIT: ::std::mem::MaybeUninit<fsobj_id> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fsobj_id>(),
        8usize,
        concat!("Size of: ", stringify!(fsobj_id))
    );
    assert_eq!(
        ::std::mem::align_of::<fsobj_id>(),
        4usize,
        concat!("Alignment of ", stringify!(fsobj_id))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fid_objno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fsobj_id),
            "::",
            stringify!(fid_objno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fid_generation) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fsobj_id),
            "::",
            stringify!(fid_generation)
        )
    );
}
pub type fsobj_id_t = fsobj_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_image_info {
    pub uuid: uuid_t,
    pub fsobjid: fsobj_id_t,
    pub fsid: fsid_t,
    pub load_addr: u64,
}
#[test]
fn bindgen_test_layout_dyld_kernel_image_info() {
    const UNINIT: ::std::mem::MaybeUninit<dyld_kernel_image_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dyld_kernel_image_info>(),
        40usize,
        concat!("Size of: ", stringify!(dyld_kernel_image_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dyld_kernel_image_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dyld_kernel_image_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uuid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsobjid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(fsobjid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_addr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_image_info),
            "::",
            stringify!(load_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dyld_kernel_process_info {
    pub cache_image_info: dyld_kernel_image_info,
    pub timestamp: u64,
    pub imageCount: u32,
    pub initialImageCount: u32,
    pub dyldState: u8,
    pub no_cache: boolean_t,
    pub private_cache: boolean_t,
}
#[test]
fn bindgen_test_layout_dyld_kernel_process_info() {
    const UNINIT: ::std::mem::MaybeUninit<dyld_kernel_process_info> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dyld_kernel_process_info>(),
        72usize,
        concat!("Size of: ", stringify!(dyld_kernel_process_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dyld_kernel_process_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dyld_kernel_process_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache_image_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(cache_image_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(timestamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageCount) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(imageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).initialImageCount) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(initialImageCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dyldState) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(dyldState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_cache) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(no_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_cache) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dyld_kernel_process_info),
            "::",
            stringify!(private_cache)
        )
    );
}
pub type dyld_kernel_image_info_t = dyld_kernel_image_info;
pub type dyld_kernel_process_info_t = dyld_kernel_process_info;
pub type dyld_kernel_image_info_array_t = *mut dyld_kernel_image_info_t;
pub type task_t = mach_port_t;
pub type task_name_t = mach_port_t;
pub type task_policy_set_t = mach_port_t;
pub type task_policy_get_t = mach_port_t;
pub type task_inspect_t = mach_port_t;
pub type task_read_t = mach_port_t;
pub type task_suspension_token_t = mach_port_t;
pub type thread_t = mach_port_t;
pub type thread_act_t = mach_port_t;
pub type thread_inspect_t = mach_port_t;
pub type thread_read_t = mach_port_t;
pub type ipc_space_t = mach_port_t;
pub type ipc_space_read_t = mach_port_t;
pub type ipc_space_inspect_t = mach_port_t;
pub type coalition_t = mach_port_t;
pub type host_t = mach_port_t;
pub type host_priv_t = mach_port_t;
pub type host_security_t = mach_port_t;
pub type processor_t = mach_port_t;
pub type processor_set_t = mach_port_t;
pub type processor_set_control_t = mach_port_t;
pub type semaphore_t = mach_port_t;
pub type lock_set_t = mach_port_t;
pub type ledger_t = mach_port_t;
pub type alarm_t = mach_port_t;
pub type clock_serv_t = mach_port_t;
pub type clock_ctrl_t = mach_port_t;
pub type arcade_register_t = mach_port_t;
pub type ipc_eventlink_t = mach_port_t;
pub type eventlink_port_pair_t = [mach_port_t; 2usize];
pub type task_id_token_t = mach_port_t;
pub type kcdata_object_t = mach_port_t;
pub type processor_set_name_t = processor_set_t;
pub type clock_reply_t = mach_port_t;
pub type bootstrap_t = mach_port_t;
pub type mem_entry_name_port_t = mach_port_t;
pub type exception_handler_t = mach_port_t;
pub type exception_handler_array_t = *mut exception_handler_t;
pub type vm_task_entry_t = mach_port_t;
pub type io_main_t = mach_port_t;
pub type UNDServerRef = mach_port_t;
pub type mach_eventlink_t = mach_port_t;
pub type exception_handler_info_t = ipc_info_port_t;
pub type task_array_t = *mut task_t;
pub type thread_array_t = *mut thread_t;
pub type processor_set_array_t = *mut processor_set_t;
pub type processor_set_name_array_t = *mut processor_set_t;
pub type processor_array_t = *mut processor_t;
pub type thread_act_array_t = *mut thread_act_t;
pub type ledger_array_t = *mut ledger_t;
pub type task_port_t = task_t;
pub type task_port_array_t = task_array_t;
pub type thread_port_t = thread_t;
pub type thread_port_array_t = thread_array_t;
pub type ipc_space_port_t = ipc_space_t;
pub type host_name_t = host_t;
pub type host_name_port_t = host_t;
pub type processor_set_port_t = processor_set_t;
pub type processor_set_name_port_t = processor_set_t;
pub type processor_set_name_port_array_t = processor_set_array_t;
pub type processor_set_control_port_t = processor_set_t;
pub type processor_port_t = processor_t;
pub type processor_port_array_t = processor_array_t;
pub type thread_act_port_t = thread_act_t;
pub type thread_act_port_array_t = thread_act_array_t;
pub type semaphore_port_t = semaphore_t;
pub type lock_set_port_t = lock_set_t;
pub type ledger_port_t = ledger_t;
pub type ledger_port_array_t = ledger_array_t;
pub type alarm_port_t = alarm_t;
pub type clock_serv_port_t = clock_serv_t;
pub type clock_ctrl_port_t = clock_ctrl_t;
pub type exception_port_t = exception_handler_t;
pub type exception_port_arrary_t = exception_handler_array_t;
pub type vfs_path_t = [::std::os::raw::c_char; 4096usize];
pub type nspace_path_t = [::std::os::raw::c_char; 8192usize];
pub type nspace_name_t = [::std::os::raw::c_char; 8192usize];
pub type mach_task_flavor_t = ::std::os::raw::c_uint;
pub type mach_thread_flavor_t = ::std::os::raw::c_uint;
pub type ledger_item_t = natural_t;
pub type ledger_amount_t = i64;
pub type emulation_vector_t = *mut mach_vm_offset_t;
pub type user_subsystem_t = *mut ::std::os::raw::c_char;
pub type labelstr_t = *mut ::std::os::raw::c_char;
pub type mig_stub_routine_t = ::std::option::Option<
    unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t, OutHeadP: *mut mach_msg_header_t),
>;
pub type mig_routine_t = mig_stub_routine_t;
pub type mig_server_routine_t =
    ::std::option::Option<unsafe extern "C" fn(InHeadP: *mut mach_msg_header_t) -> mig_routine_t>;
pub type mig_impl_routine_t = ::std::option::Option<unsafe extern "C" fn() -> kern_return_t>;
pub type routine_arg_descriptor = mach_msg_type_descriptor_t;
pub type routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
pub type mig_routine_arg_descriptor_t = *mut mach_msg_type_descriptor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct routine_descriptor {
    pub impl_routine: mig_impl_routine_t,
    pub stub_routine: mig_stub_routine_t,
    pub argc: ::std::os::raw::c_uint,
    pub descr_count: ::std::os::raw::c_uint,
    pub arg_descr: routine_arg_descriptor_t,
    pub max_reply_msg: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_routine_descriptor() {
    const UNINIT: ::std::mem::MaybeUninit<routine_descriptor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<routine_descriptor>(),
        40usize,
        concat!("Size of: ", stringify!(routine_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<routine_descriptor>(),
        8usize,
        concat!("Alignment of ", stringify!(routine_descriptor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).impl_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(impl_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stub_routine) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(stub_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descr_count) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(descr_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_descr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(arg_descr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_reply_msg) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(routine_descriptor),
            "::",
            stringify!(max_reply_msg)
        )
    );
}
pub type routine_descriptor_t = *mut routine_descriptor;
pub type mig_routine_descriptor = routine_descriptor;
pub type mig_routine_descriptor_t = *mut mig_routine_descriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_subsystem {
    pub server: mig_server_routine_t,
    pub start: mach_msg_id_t,
    pub end: mach_msg_id_t,
    pub maxsize: mach_msg_size_t,
    pub reserved: vm_address_t,
    pub routine: [mig_routine_descriptor; 1usize],
}
#[test]
fn bindgen_test_layout_mig_subsystem() {
    const UNINIT: ::std::mem::MaybeUninit<mig_subsystem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mig_subsystem>(),
        72usize,
        concat!("Size of: ", stringify!(mig_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<mig_subsystem>(),
        8usize,
        concat!("Alignment of ", stringify!(mig_subsystem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).server) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(server)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(maxsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).routine) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_subsystem),
            "::",
            stringify!(routine)
        )
    );
}
pub type mig_subsystem_t = *mut mig_subsystem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_symtab {
    pub ms_routine_name: *mut ::std::os::raw::c_char,
    pub ms_routine_number: ::std::os::raw::c_int,
    pub ms_routine: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_mig_symtab() {
    const UNINIT: ::std::mem::MaybeUninit<mig_symtab> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mig_symtab>(),
        24usize,
        concat!("Size of: ", stringify!(mig_symtab))
    );
    assert_eq!(
        ::std::mem::align_of::<mig_symtab>(),
        8usize,
        concat!("Alignment of ", stringify!(mig_symtab))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms_routine_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_symtab),
            "::",
            stringify!(ms_routine_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms_routine_number) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_symtab),
            "::",
            stringify!(ms_routine_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ms_routine) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_symtab),
            "::",
            stringify!(ms_routine)
        )
    );
}
pub type mig_symtab_t = mig_symtab;
extern "C" {
    pub fn mig_get_reply_port() -> mach_port_t;
}
extern "C" {
    pub fn mig_dealloc_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_put_reply_port(reply_port: mach_port_t);
}
extern "C" {
    pub fn mig_strncpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_strncpy_zerofill(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mig_allocate(arg1: *mut vm_address_t, arg2: vm_size_t);
}
extern "C" {
    pub fn mig_deallocate(arg1: vm_address_t, arg2: vm_size_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mig_reply_error_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout_mig_reply_error_t() {
    const UNINIT: ::std::mem::MaybeUninit<mig_reply_error_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mig_reply_error_t>(),
        36usize,
        concat!("Size of: ", stringify!(mig_reply_error_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mig_reply_error_t>(),
        4usize,
        concat!("Alignment of ", stringify!(mig_reply_error_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_reply_error_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_reply_error_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mig_reply_error_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct mach_vm_info_region {
    pub vir_start: mach_vm_offset_t,
    pub vir_end: mach_vm_offset_t,
    pub vir_object: mach_vm_offset_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[test]
fn bindgen_test_layout_mach_vm_info_region() {
    const UNINIT: ::std::mem::MaybeUninit<mach_vm_info_region> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_vm_info_region>(),
        56usize,
        concat!("Size of: ", stringify!(mach_vm_info_region))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_vm_info_region>(),
        4usize,
        concat!("Alignment of ", stringify!(mach_vm_info_region))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_object) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_needs_copy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_needs_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_protection) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_max_protection) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_inheritance) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_wired_count) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_wired_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_user_wired_count) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_vm_info_region),
            "::",
            stringify!(vir_user_wired_count)
        )
    );
}
pub type mach_vm_info_region_t = mach_vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region_64 {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: memory_object_offset_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_info_region_64() {
    const UNINIT: ::std::mem::MaybeUninit<vm_info_region_64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_info_region_64>(),
        44usize,
        concat!("Size of: ", stringify!(vm_info_region_64))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_info_region_64>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_info_region_64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_end) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_needs_copy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_needs_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_protection) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_max_protection) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_inheritance) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_wired_count) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_wired_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_user_wired_count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region_64),
            "::",
            stringify!(vir_user_wired_count)
        )
    );
}
pub type vm_info_region_64_t = vm_info_region_64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_region {
    pub vir_start: natural_t,
    pub vir_end: natural_t,
    pub vir_object: natural_t,
    pub vir_offset: natural_t,
    pub vir_needs_copy: boolean_t,
    pub vir_protection: vm_prot_t,
    pub vir_max_protection: vm_prot_t,
    pub vir_inheritance: vm_inherit_t,
    pub vir_wired_count: natural_t,
    pub vir_user_wired_count: natural_t,
}
#[test]
fn bindgen_test_layout_vm_info_region() {
    const UNINIT: ::std::mem::MaybeUninit<vm_info_region> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_info_region>(),
        40usize,
        concat!("Size of: ", stringify!(vm_info_region))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_info_region>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_info_region))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_end) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_object) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_needs_copy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_needs_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_protection) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_max_protection) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_max_protection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_inheritance) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_inheritance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_wired_count) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_wired_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vir_user_wired_count) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_region),
            "::",
            stringify!(vir_user_wired_count)
        )
    );
}
pub type vm_info_region_t = vm_info_region;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct vm_info_object {
    pub vio_object: natural_t,
    pub vio_size: natural_t,
    pub vio_ref_count: ::std::os::raw::c_uint,
    pub vio_resident_page_count: ::std::os::raw::c_uint,
    pub vio_absent_count: ::std::os::raw::c_uint,
    pub vio_copy: natural_t,
    pub vio_shadow: natural_t,
    pub vio_shadow_offset: natural_t,
    pub vio_paging_offset: natural_t,
    pub vio_copy_strategy: memory_object_copy_strategy_t,
    pub vio_last_alloc: vm_offset_t,
    pub vio_paging_in_progress: ::std::os::raw::c_uint,
    pub vio_pager_created: boolean_t,
    pub vio_pager_initialized: boolean_t,
    pub vio_pager_ready: boolean_t,
    pub vio_can_persist: boolean_t,
    pub vio_internal: boolean_t,
    pub vio_temporary: boolean_t,
    pub vio_alive: boolean_t,
    pub vio_purgable: boolean_t,
    pub vio_purgable_volatile: boolean_t,
}
#[test]
fn bindgen_test_layout_vm_info_object() {
    const UNINIT: ::std::mem::MaybeUninit<vm_info_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<vm_info_object>(),
        88usize,
        concat!("Size of: ", stringify!(vm_info_object))
    );
    assert_eq!(
        ::std::mem::align_of::<vm_info_object>(),
        4usize,
        concat!("Alignment of ", stringify!(vm_info_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_object) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_object)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_ref_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_resident_page_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_resident_page_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_absent_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_absent_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_copy) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_shadow) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_shadow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_shadow_offset) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_shadow_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_paging_offset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_paging_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_copy_strategy) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_copy_strategy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_last_alloc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_last_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_paging_in_progress) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_paging_in_progress)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_pager_created) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_pager_created)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_pager_initialized) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_pager_initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_pager_ready) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_pager_ready)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_can_persist) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_can_persist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_internal) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_internal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_temporary) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_temporary)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_alive) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_alive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_purgable) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_purgable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vio_purgable_volatile) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(vm_info_object),
            "::",
            stringify!(vio_purgable_volatile)
        )
    );
}
pub type vm_info_object_t = vm_info_object;
pub type vm_info_object_array_t = *mut vm_info_object_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_name {
    pub zn_name: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_zone_name() {
    const UNINIT: ::std::mem::MaybeUninit<zone_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zone_name>(),
        80usize,
        concat!("Size of: ", stringify!(zone_name))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_name>(),
        1usize,
        concat!("Alignment of ", stringify!(zone_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zn_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_name),
            "::",
            stringify!(zn_name)
        )
    );
}
pub type zone_name_t = zone_name;
pub type zone_name_array_t = *mut zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_info {
    pub zi_count: integer_t,
    pub zi_cur_size: vm_size_t,
    pub zi_max_size: vm_size_t,
    pub zi_elem_size: vm_size_t,
    pub zi_alloc_size: vm_size_t,
    pub zi_pageable: integer_t,
    pub zi_sleepable: integer_t,
    pub zi_exhaustible: integer_t,
    pub zi_collectable: integer_t,
}
#[test]
fn bindgen_test_layout_zone_info() {
    const UNINIT: ::std::mem::MaybeUninit<zone_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zone_info>(),
        56usize,
        concat!("Size of: ", stringify!(zone_info))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_info>(),
        8usize,
        concat!("Alignment of ", stringify!(zone_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_cur_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_cur_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_max_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_elem_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_elem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_alloc_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_alloc_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_pageable) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_pageable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_sleepable) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_sleepable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_exhaustible) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_exhaustible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zi_collectable) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_info),
            "::",
            stringify!(zi_collectable)
        )
    );
}
pub type zone_info_t = zone_info;
pub type zone_info_array_t = *mut zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_name {
    pub mzn_name: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_mach_zone_name() {
    const UNINIT: ::std::mem::MaybeUninit<mach_zone_name> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_zone_name>(),
        80usize,
        concat!("Size of: ", stringify!(mach_zone_name))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_zone_name>(),
        1usize,
        concat!("Alignment of ", stringify!(mach_zone_name))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzn_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_name),
            "::",
            stringify!(mzn_name)
        )
    );
}
pub type mach_zone_name_t = mach_zone_name;
pub type mach_zone_name_array_t = *mut mach_zone_name_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_zone_info_data {
    pub mzi_count: u64,
    pub mzi_cur_size: u64,
    pub mzi_max_size: u64,
    pub mzi_elem_size: u64,
    pub mzi_alloc_size: u64,
    pub mzi_sum_size: u64,
    pub mzi_exhaustible: u64,
    pub mzi_collectable: u64,
}
#[test]
fn bindgen_test_layout_mach_zone_info_data() {
    const UNINIT: ::std::mem::MaybeUninit<mach_zone_info_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_zone_info_data>(),
        64usize,
        concat!("Size of: ", stringify!(mach_zone_info_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_zone_info_data>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_zone_info_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_cur_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_cur_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_max_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_elem_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_elem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_alloc_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_alloc_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_sum_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_sum_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_exhaustible) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_exhaustible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mzi_collectable) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_zone_info_data),
            "::",
            stringify!(mzi_collectable)
        )
    );
}
pub type mach_zone_info_t = mach_zone_info_data;
pub type mach_zone_info_array_t = *mut mach_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct task_zone_info_data {
    pub tzi_count: u64,
    pub tzi_cur_size: u64,
    pub tzi_max_size: u64,
    pub tzi_elem_size: u64,
    pub tzi_alloc_size: u64,
    pub tzi_sum_size: u64,
    pub tzi_exhaustible: u64,
    pub tzi_collectable: u64,
    pub tzi_caller_acct: u64,
    pub tzi_task_alloc: u64,
    pub tzi_task_free: u64,
}
#[test]
fn bindgen_test_layout_task_zone_info_data() {
    const UNINIT: ::std::mem::MaybeUninit<task_zone_info_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<task_zone_info_data>(),
        88usize,
        concat!("Size of: ", stringify!(task_zone_info_data))
    );
    assert_eq!(
        ::std::mem::align_of::<task_zone_info_data>(),
        8usize,
        concat!("Alignment of ", stringify!(task_zone_info_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_cur_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_cur_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_max_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_max_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_elem_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_elem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_alloc_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_alloc_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_sum_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_sum_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_exhaustible) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_exhaustible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_collectable) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_collectable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_caller_acct) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_caller_acct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_task_alloc) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_task_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tzi_task_free) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(task_zone_info_data),
            "::",
            stringify!(tzi_task_free)
        )
    );
}
pub type task_zone_info_t = task_zone_info_data;
pub type task_zone_info_array_t = *mut task_zone_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_memory_info {
    pub flags: u64,
    pub site: u64,
    pub size: u64,
    pub free: u64,
    pub largest: u64,
    pub collectable_bytes: u64,
    pub mapped: u64,
    pub peak: u64,
    pub tag: u16,
    pub zone: u16,
    pub _resvA: [u16; 2usize],
    pub _resv: [u64; 3usize],
    pub name: [::std::os::raw::c_char; 80usize],
}
#[test]
fn bindgen_test_layout_mach_memory_info() {
    const UNINIT: ::std::mem::MaybeUninit<mach_memory_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_memory_info>(),
        176usize,
        concat!("Size of: ", stringify!(mach_memory_info))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_memory_info>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_memory_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).site) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(site)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).largest) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(largest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).collectable_bytes) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(collectable_bytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapped) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(mapped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peak) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(peak)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zone) as usize - ptr as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(zone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._resvA) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(_resvA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._resv) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(_resv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_memory_info),
            "::",
            stringify!(name)
        )
    );
}
pub type mach_memory_info_t = mach_memory_info;
pub type mach_memory_info_array_t = *mut mach_memory_info_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct zone_btrecord {
    pub ref_count: u32,
    pub operation_type: u32,
    pub bt: [u64; 15usize],
}
#[test]
fn bindgen_test_layout_zone_btrecord() {
    const UNINIT: ::std::mem::MaybeUninit<zone_btrecord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<zone_btrecord>(),
        128usize,
        concat!("Size of: ", stringify!(zone_btrecord))
    );
    assert_eq!(
        ::std::mem::align_of::<zone_btrecord>(),
        8usize,
        concat!("Alignment of ", stringify!(zone_btrecord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ref_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_btrecord),
            "::",
            stringify!(ref_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).operation_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_btrecord),
            "::",
            stringify!(operation_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bt) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(zone_btrecord),
            "::",
            stringify!(bt)
        )
    );
}
pub type zone_btrecord_t = zone_btrecord;
pub type zone_btrecord_array_t = *mut zone_btrecord_t;
pub type page_address_array_t = *mut vm_offset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hash_info_bucket {
    pub hib_count: natural_t,
}
#[test]
fn bindgen_test_layout_hash_info_bucket() {
    const UNINIT: ::std::mem::MaybeUninit<hash_info_bucket> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<hash_info_bucket>(),
        4usize,
        concat!("Size of: ", stringify!(hash_info_bucket))
    );
    assert_eq!(
        ::std::mem::align_of::<hash_info_bucket>(),
        4usize,
        concat!("Alignment of ", stringify!(hash_info_bucket))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hib_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hash_info_bucket),
            "::",
            stringify!(hib_count)
        )
    );
}
pub type hash_info_bucket_t = hash_info_bucket;
pub type hash_info_bucket_array_t = *mut hash_info_bucket_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lockgroup_info {
    pub lockgroup_name: [::std::os::raw::c_char; 64usize],
    pub lockgroup_attr: u64,
    pub lock_spin_cnt: u64,
    pub lock_spin_util_cnt: u64,
    pub lock_spin_held_cnt: u64,
    pub lock_spin_miss_cnt: u64,
    pub lock_spin_held_max: u64,
    pub lock_spin_held_cum: u64,
    pub lock_mtx_cnt: u64,
    pub lock_mtx_util_cnt: u64,
    pub lock_mtx_held_cnt: u64,
    pub lock_mtx_miss_cnt: u64,
    pub lock_mtx_wait_cnt: u64,
    pub lock_mtx_held_max: u64,
    pub lock_mtx_held_cum: u64,
    pub lock_mtx_wait_max: u64,
    pub lock_mtx_wait_cum: u64,
    pub lock_rw_cnt: u64,
    pub lock_rw_util_cnt: u64,
    pub lock_rw_held_cnt: u64,
    pub lock_rw_miss_cnt: u64,
    pub lock_rw_wait_cnt: u64,
    pub lock_rw_held_max: u64,
    pub lock_rw_held_cum: u64,
    pub lock_rw_wait_max: u64,
    pub lock_rw_wait_cum: u64,
}
#[test]
fn bindgen_test_layout_lockgroup_info() {
    const UNINIT: ::std::mem::MaybeUninit<lockgroup_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lockgroup_info>(),
        264usize,
        concat!("Size of: ", stringify!(lockgroup_info))
    );
    assert_eq!(
        ::std::mem::align_of::<lockgroup_info>(),
        8usize,
        concat!("Alignment of ", stringify!(lockgroup_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockgroup_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lockgroup_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockgroup_attr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lockgroup_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_cnt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_util_cnt) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_util_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_held_cnt) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_held_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_miss_cnt) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_miss_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_held_max) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_held_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_spin_held_cum) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_spin_held_cum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_cnt) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_util_cnt) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_util_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_held_cnt) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_held_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_miss_cnt) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_miss_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_wait_cnt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_wait_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_held_max) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_held_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_held_cum) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_held_cum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_wait_max) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_wait_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_mtx_wait_cum) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_mtx_wait_cum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_cnt) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_util_cnt) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_util_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_held_cnt) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_held_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_miss_cnt) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_miss_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_wait_cnt) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_wait_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_held_max) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_held_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_held_cum) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_held_cum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_wait_max) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_wait_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_rw_wait_cum) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(lockgroup_info),
            "::",
            stringify!(lock_rw_wait_cum)
        )
    );
}
pub type lockgroup_info_t = lockgroup_info;
pub type lockgroup_info_array_t = *mut lockgroup_info_t;
pub type symtab_name_t = [::std::os::raw::c_char; 32usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details {
    pub gzip_offset: u64,
    pub gzip_length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_mach_core_details() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_details> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_details>(),
        32usize,
        concat!("Size of: ", stringify!(mach_core_details))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_details>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_details))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gzip_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details),
            "::",
            stringify!(gzip_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gzip_length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details),
            "::",
            stringify!(gzip_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core_name) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details),
            "::",
            stringify!(core_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader {
    pub signature: u64,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: [mach_core_details; 16usize],
}
#[test]
fn bindgen_test_layout_mach_core_fileheader() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_fileheader> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_fileheader>(),
        544usize,
        concat!("Size of: ", stringify!(mach_core_fileheader))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_fileheader>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_fileheader))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(log_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(log_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_files) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(num_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader),
            "::",
            stringify!(files)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_details_v2 {
    pub flags: u64,
    pub offset: u64,
    pub length: u64,
    pub core_name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_mach_core_details_v2() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_details_v2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_details_v2>(),
        40usize,
        concat!("Size of: ", stringify!(mach_core_details_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_details_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_details_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details_v2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details_v2),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details_v2),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).core_name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_details_v2),
            "::",
            stringify!(core_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mach_core_fileheader_base {
    pub signature: u64,
    pub version: u32,
}
#[test]
fn bindgen_test_layout_mach_core_fileheader_base() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_fileheader_base> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_fileheader_base>(),
        16usize,
        concat!("Size of: ", stringify!(mach_core_fileheader_base))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_fileheader_base>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_fileheader_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_base),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_base),
            "::",
            stringify!(version)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct mach_core_fileheader_v2 {
    pub signature: u64,
    pub version: u32,
    pub flags: u64,
    pub pub_key_offset: u64,
    pub pub_key_length: u16,
    pub log_offset: u64,
    pub log_length: u64,
    pub num_files: u64,
    pub files: __IncompleteArrayField<mach_core_details_v2>,
}
#[test]
fn bindgen_test_layout_mach_core_fileheader_v2() {
    const UNINIT: ::std::mem::MaybeUninit<mach_core_fileheader_v2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mach_core_fileheader_v2>(),
        64usize,
        concat!("Size of: ", stringify!(mach_core_fileheader_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<mach_core_fileheader_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(mach_core_fileheader_v2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signature) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(signature)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pub_key_offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(pub_key_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pub_key_length) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(pub_key_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_offset) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(log_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_length) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(log_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_files) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(num_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mach_core_fileheader_v2),
            "::",
            stringify!(files)
        )
    );
}
pub type kobject_description_t = [::std::os::raw::c_char; 512usize];
extern "C" {
    pub fn mach_port_names(
        task: ipc_space_t,
        names: *mut mach_port_name_array_t,
        namesCnt: *mut mach_msg_type_number_t,
        types: *mut mach_port_type_array_t,
        typesCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_type(
        task: ipc_space_t,
        name: mach_port_name_t,
        ptype: *mut mach_port_type_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_rename(
        task: ipc_space_t,
        old_name: mach_port_name_t,
        new_name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_name(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate(
        task: ipc_space_t,
        right: mach_port_right_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        refs: *mut mach_port_urefs_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_mod_refs(
        task: ipc_space_t,
        name: mach_port_name_t,
        right: mach_port_right_t,
        delta: mach_port_delta_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_peek(
        task: ipc_space_t,
        name: mach_port_name_t,
        trailer_type: mach_msg_trailer_type_t,
        request_seqnop: *mut mach_port_seqno_t,
        msg_sizep: *mut mach_msg_size_t,
        msg_idp: *mut mach_msg_id_t,
        trailer_infop: mach_msg_trailer_info_t,
        trailer_infopCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_mscount(
        task: ipc_space_t,
        name: mach_port_name_t,
        mscount: mach_port_mscount_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_set_status(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        members: *mut mach_port_name_array_t,
        membersCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_move_member(
        task: ipc_space_t,
        member: mach_port_name_t,
        after: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_request_notification(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgid: mach_msg_id_t,
        sync: mach_port_mscount_t,
        notify: mach_port_t,
        notifyPoly: mach_msg_type_name_t,
        previous: *mut mach_port_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        poly: mach_port_t,
        polyPoly: mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_right(
        task: ipc_space_t,
        name: mach_port_name_t,
        msgt_name: mach_msg_type_name_t,
        poly: *mut mach_port_t,
        polyPoly: *mut mach_msg_type_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_seqno(
        task: ipc_space_t,
        name: mach_port_name_t,
        seqno: mach_port_seqno_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_attributes(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info_out: mach_port_info_t,
        port_info_outCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        port_info: mach_port_info_t,
        port_infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_qos(
        task: ipc_space_t,
        right: mach_port_right_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_allocate_full(
        task: ipc_space_t,
        right: mach_port_right_t,
        proto: mach_port_t,
        qos: *mut mach_port_qos_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn task_set_port_space(
        task: ipc_space_t,
        table_entries: ::std::os::raw::c_int,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_srights(
        task: ipc_space_t,
        name: mach_port_name_t,
        srights: *mut mach_port_rights_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_info(
        space: ipc_space_read_t,
        space_info: *mut ipc_info_space_t,
        table_info: *mut ipc_info_name_array_t,
        table_infoCnt: *mut mach_msg_type_number_t,
        tree_info: *mut ipc_info_tree_name_array_t,
        tree_infoCnt: *mut mach_msg_type_number_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_dnrequest_info(
        task: ipc_space_t,
        name: mach_port_name_t,
        dnr_total: *mut ::std::os::raw::c_uint,
        dnr_used: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kernel_object(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut ::std::os::raw::c_uint,
        object_addr: *mut ::std::os::raw::c_uint,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_insert_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_extract_member(
        task: ipc_space_t,
        name: mach_port_name_t,
        pset: mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_context(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        context: *mut mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_set_context(
        task: ipc_space_t,
        name: mach_port_name_t,
        context: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_construct(
        task: ipc_space_t,
        options: mach_port_options_ptr_t,
        context: mach_port_context_t,
        name: *mut mach_port_name_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_destruct(
        task: ipc_space_t,
        name: mach_port_name_t,
        srdelta: mach_port_delta_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        strict: boolean_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_unguard(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_space_basic_info(
        task: ipc_space_inspect_t,
        basic_info: *mut ipc_info_space_basic_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_guard_with_flags(
        task: ipc_space_t,
        name: mach_port_name_t,
        guard: mach_port_context_t,
        flags: u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_swap_guard(
        task: ipc_space_t,
        name: mach_port_name_t,
        old_guard: mach_port_context_t,
        new_guard: mach_port_context_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_kobject_description(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        object_type: *mut natural_t,
        object_addr: *mut mach_vm_address_t,
        description: *mut ::std::os::raw::c_char,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_is_connection_for_service(
        task: ipc_space_t,
        connection_port: mach_port_name_t,
        service_port: mach_port_name_t,
        filter_policy_id: *mut u64,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_get_service_port_info(
        task: ipc_space_read_t,
        name: mach_port_name_t,
        sp_info_out: *mut mach_service_port_info_data_t,
    ) -> kern_return_t;
}
extern "C" {
    pub fn mach_port_assert_attributes(
        task: ipc_space_t,
        name: mach_port_name_t,
        flavor: mach_port_flavor_t,
        info: mach_port_info_t,
        infoCnt: mach_msg_type_number_t,
    ) -> kern_return_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_names_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_names_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_names_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_names_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_port_names_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_names_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_names_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_names_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_type_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_type_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_type_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_type_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_type_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_type_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_type_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_type_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub old_name: mach_port_name_t,
    pub new_name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_rename_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_rename_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_rename_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_rename_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_rename_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(old_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_rename_t),
            "::",
            stringify!(new_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_name_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_allocate_name_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_name_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_allocate_name_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_name_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_allocate_name_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_name_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_allocate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_allocate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_t),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_destroy_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_destroy_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_destroy_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destroy_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_deallocate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_deallocate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_deallocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_deallocate_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_deallocate_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_deallocate_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_refs_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_refs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_refs_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_get_refs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_refs_t),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub right: mach_port_right_t,
    pub delta: mach_port_delta_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_mod_refs_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_mod_refs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_mod_refs_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_mod_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_mod_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_mod_refs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_mod_refs_t),
            "::",
            stringify!(delta)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub trailer_type: mach_msg_trailer_type_t,
    pub request_seqnop: mach_port_seqno_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_peek_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_peek_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_peek_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_port_peek_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_peek_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_peek_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(trailer_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_seqnop) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(request_seqnop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer_infopCnt) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_peek_t),
            "::",
            stringify!(trailer_infopCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub mscount: mach_port_mscount_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_mscount_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_set_mscount_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_mscount_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_mscount_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_mscount_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_set_mscount_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mscount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_mscount_t),
            "::",
            stringify!(mscount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_set_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_set_status_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_set_status_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_get_set_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_set_status_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_get_set_status_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_set_status_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_set_status_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_set_status_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub member: mach_port_name_t,
    pub after: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_move_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_move_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_move_member_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_move_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_move_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_move_member_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).member) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(member)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).after) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_move_member_t),
            "::",
            stringify!(after)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub notify: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgid: mach_msg_id_t,
    pub sync: mach_port_mscount_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_request_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_request_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_request_notification_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_request_notification_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_request_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_request_notification_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notify) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgid) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(msgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sync) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_request_notification_t),
            "::",
            stringify!(sync)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_insert_right_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_insert_right_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_insert_right_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_port_insert_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_insert_right_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_insert_right_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poly) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(poly)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_right_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub msgt_name: mach_msg_type_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_extract_right_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_extract_right_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_extract_right_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_extract_right_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_extract_right_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_extract_right_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgt_name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_right_t),
            "::",
            stringify!(msgt_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub seqno: mach_port_seqno_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_seqno_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_set_seqno_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_seqno_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_seqno_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_seqno_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_set_seqno_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqno) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_seqno_t),
            "::",
            stringify!(seqno)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_info_outCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_attributes_t>(),
        44usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_get_attributes_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_get_attributes_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavor) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_info_outCnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_attributes_t),
            "::",
            stringify!(port_info_outCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub port_infoCnt: mach_msg_type_number_t,
    pub port_info: [integer_t; 17usize],
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_set_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_attributes_t>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_set_attributes_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_set_attributes_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavor) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_infoCnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(port_infoCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_info) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_attributes_t),
            "::",
            stringify!(port_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_qos_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_allocate_qos_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_qos_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_allocate_qos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_qos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_allocate_qos_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_qos_t),
            "::",
            stringify!(qos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub proto: mach_msg_port_descriptor_t,
    pub NDR: NDR_record_t,
    pub right: mach_port_right_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_allocate_full_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_allocate_full_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_allocate_full_t>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_allocate_full_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_allocate_full_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_allocate_full_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_allocate_full_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub table_entries: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Request__task_set_port_space_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__task_set_port_space_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__task_set_port_space_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__task_set_port_space_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__task_set_port_space_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__task_set_port_space_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_port_space_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_port_space_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_entries) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__task_set_port_space_t),
            "::",
            stringify!(table_entries)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_srights_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_srights_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_srights_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_srights_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_srights_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_get_srights_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_srights_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_srights_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_srights_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_space_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_space_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_space_info_t>(),
        24usize,
        concat!("Size of: ", stringify!(__Request__mach_port_space_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_space_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_space_info_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_space_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_dnrequest_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_dnrequest_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_dnrequest_info_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_dnrequest_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_dnrequest_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_dnrequest_info_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_dnrequest_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_dnrequest_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_dnrequest_info_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_kernel_object_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_kernel_object_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_kernel_object_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_kernel_object_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_kernel_object_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_kernel_object_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kernel_object_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kernel_object_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kernel_object_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_insert_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_insert_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_insert_member_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_insert_member_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_insert_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_insert_member_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pset) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_insert_member_t),
            "::",
            stringify!(pset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub pset: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_extract_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_extract_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_extract_member_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_extract_member_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_extract_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_extract_member_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pset) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_extract_member_t),
            "::",
            stringify!(pset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_context_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_get_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_context_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_get_context_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_context_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_set_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_set_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_set_context_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_set_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_set_context_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_set_context_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_set_context_t),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_kobject_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_kobject_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_kobject_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Request__mach_port_kobject_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_kobject_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_kobject_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub options: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_construct_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_construct_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_construct_t>(),
        60usize,
        concat!("Size of: ", stringify!(__Request__mach_port_construct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_construct_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_construct_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_construct_t),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub srdelta: mach_port_delta_t,
    pub guard: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_destruct_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_destruct_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_destruct_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_port_destruct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_destruct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_destruct_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srdelta) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(srdelta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_destruct_t),
            "::",
            stringify!(guard)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub strict: boolean_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_guard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_guard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_guard_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Request__mach_port_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_guard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strict) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_t),
            "::",
            stringify!(strict)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_unguard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_unguard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_unguard_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Request__mach_port_unguard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_unguard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Request__mach_port_unguard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_unguard_t),
            "::",
            stringify!(guard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_space_basic_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_space_basic_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_space_basic_info_t>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_space_basic_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_space_basic_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_space_basic_info_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_space_basic_info_t),
            "::",
            stringify!(Head)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub guard: mach_port_context_t,
    pub flags: u64,
}
#[test]
fn bindgen_test_layout___Request__mach_port_guard_with_flags_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_guard_with_flags_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_guard_with_flags_t>(),
        52usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_guard_with_flags_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_guard_with_flags_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_guard_with_flags_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).guard) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_guard_with_flags_t),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub old_guard: mach_port_context_t,
    pub new_guard: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_swap_guard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_swap_guard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_swap_guard_t>(),
        52usize,
        concat!("Size of: ", stringify!(__Request__mach_port_swap_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_swap_guard_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_swap_guard_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_guard) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(old_guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).new_guard) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_swap_guard_t),
            "::",
            stringify!(new_guard)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_kobject_description_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_kobject_description_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_kobject_description_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_kobject_description_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_kobject_description_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_kobject_description_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_description_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_description_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_kobject_description_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub connection_port: mach_port_name_t,
    pub service_port: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_is_connection_for_service_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_is_connection_for_service_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_is_connection_for_service_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_is_connection_for_service_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_is_connection_for_service_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_is_connection_for_service_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_is_connection_for_service_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_is_connection_for_service_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_port) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_is_connection_for_service_t),
            "::",
            stringify!(connection_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_port) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_is_connection_for_service_t),
            "::",
            stringify!(service_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Request__mach_port_get_service_port_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_get_service_port_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_get_service_port_info_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_get_service_port_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_get_service_port_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_get_service_port_info_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_service_port_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_service_port_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_get_service_port_info_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Request__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub name: mach_port_name_t,
    pub flavor: mach_port_flavor_t,
    pub infoCnt: mach_msg_type_number_t,
    pub info: [integer_t; 17usize],
}
#[test]
fn bindgen_test_layout___Request__mach_port_assert_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Request__mach_port_assert_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Request__mach_port_assert_attributes_t>(),
        112usize,
        concat!(
            "Size of: ",
            stringify!(__Request__mach_port_assert_attributes_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Request__mach_port_assert_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Request__mach_port_assert_attributes_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flavor) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(flavor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infoCnt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(infoCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Request__mach_port_assert_attributes_t),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __RequestUnion__mach_port_subsystem {
    pub Request_mach_port_names: __Request__mach_port_names_t,
    pub Request_mach_port_type: __Request__mach_port_type_t,
    pub Request_mach_port_rename: __Request__mach_port_rename_t,
    pub Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    pub Request_mach_port_allocate: __Request__mach_port_allocate_t,
    pub Request_mach_port_destroy: __Request__mach_port_destroy_t,
    pub Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    pub Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    pub Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    pub Request_mach_port_peek: __Request__mach_port_peek_t,
    pub Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    pub Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    pub Request_mach_port_move_member: __Request__mach_port_move_member_t,
    pub Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    pub Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    pub Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    pub Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    pub Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    pub Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    pub Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    pub Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    pub Request_task_set_port_space: __Request__task_set_port_space_t,
    pub Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    pub Request_mach_port_space_info: __Request__mach_port_space_info_t,
    pub Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    pub Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    pub Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    pub Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    pub Request_mach_port_get_context: __Request__mach_port_get_context_t,
    pub Request_mach_port_set_context: __Request__mach_port_set_context_t,
    pub Request_mach_port_kobject: __Request__mach_port_kobject_t,
    pub Request_mach_port_construct: __Request__mach_port_construct_t,
    pub Request_mach_port_destruct: __Request__mach_port_destruct_t,
    pub Request_mach_port_guard: __Request__mach_port_guard_t,
    pub Request_mach_port_unguard: __Request__mach_port_unguard_t,
    pub Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    pub Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    pub Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    pub Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    pub Request_mach_port_is_connection_for_service:
        __Request__mach_port_is_connection_for_service_t,
    pub Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t,
    pub Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t,
}
#[test]
fn bindgen_test_layout___RequestUnion__mach_port_subsystem() {
    const UNINIT: ::std::mem::MaybeUninit<__RequestUnion__mach_port_subsystem> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__RequestUnion__mach_port_subsystem>(),
        112usize,
        concat!("Size of: ", stringify!(__RequestUnion__mach_port_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__RequestUnion__mach_port_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__RequestUnion__mach_port_subsystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_rename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_rename)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_allocate_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_allocate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_destroy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_destroy)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_deallocate) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_deallocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_get_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_mod_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_mod_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_peek) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_peek)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_set_mscount) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_mscount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_set_status) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_set_status)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_move_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_move_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_request_notification) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_request_notification)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_insert_right) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_insert_right)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_extract_right) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_extract_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_set_seqno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_seqno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_attributes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_set_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_attributes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_allocate_qos) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate_qos)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_allocate_full) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_allocate_full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_task_set_port_space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_task_set_port_space)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_srights) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_srights)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_space_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_space_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_dnrequest_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_dnrequest_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_kernel_object) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_kernel_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_insert_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_insert_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_extract_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_extract_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_context) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_context)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_set_context) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_set_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_kobject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_kobject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_construct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_construct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_destruct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_destruct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Request_mach_port_unguard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_unguard)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_space_basic_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_space_basic_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_guard_with_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_guard_with_flags)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_swap_guard) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_swap_guard)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_kobject_description) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_kobject_description)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_is_connection_for_service) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_is_connection_for_service)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_get_service_port_info) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_get_service_port_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Request_mach_port_assert_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RequestUnion__mach_port_subsystem),
            "::",
            stringify!(Request_mach_port_assert_attributes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_names_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub names: mach_msg_ool_descriptor_t,
    pub types: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub namesCnt: mach_msg_type_number_t,
    pub typesCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_names_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_names_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_names_t>(),
        76usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_names_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_names_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_names_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).types) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namesCnt) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(namesCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typesCnt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_names_t),
            "::",
            stringify!(typesCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_type_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub ptype: mach_port_type_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_type_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_type_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_type_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_type_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_type_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_type_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptype) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_type_t),
            "::",
            stringify!(ptype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_rename_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_rename_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_rename_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_rename_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_rename_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_rename_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_rename_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_rename_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_rename_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_rename_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_name_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_name_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_allocate_name_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_name_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_name_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_name_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_allocate_name_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_name_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_name_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_name_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_allocate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_allocate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destroy_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_destroy_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_destroy_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_destroy_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_destroy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_destroy_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_destroy_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destroy_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destroy_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destroy_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_deallocate_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_deallocate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_deallocate_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_deallocate_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_deallocate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_deallocate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_deallocate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_deallocate_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_deallocate_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_deallocate_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub refs: mach_port_urefs_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_refs_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_refs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_refs_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_get_refs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_refs_t),
            "::",
            stringify!(refs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_mod_refs_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_mod_refs_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_mod_refs_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_mod_refs_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_mod_refs_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_mod_refs_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_mod_refs_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_mod_refs_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_mod_refs_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_mod_refs_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_peek_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub request_seqnop: mach_port_seqno_t,
    pub msg_sizep: mach_msg_size_t,
    pub msg_idp: mach_msg_id_t,
    pub trailer_infopCnt: mach_msg_type_number_t,
    pub trailer_infop: [::std::os::raw::c_char; 68usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_port_peek_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_peek_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_peek_t>(),
        120usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_peek_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_peek_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_peek_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).request_seqnop) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(request_seqnop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_sizep) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(msg_sizep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_idp) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(msg_idp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer_infopCnt) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(trailer_infopCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trailer_infop) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_peek_t),
            "::",
            stringify!(trailer_infop)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_mscount_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_mscount_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_set_mscount_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_mscount_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_mscount_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_mscount_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_set_mscount_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_mscount_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_mscount_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_mscount_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_set_status_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub members: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub membersCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_set_status_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_set_status_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_set_status_t>(),
        56usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_set_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_set_status_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_get_set_status_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).members) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(members)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).membersCnt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_set_status_t),
            "::",
            stringify!(membersCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_move_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_move_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_move_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_move_member_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_move_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_move_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_move_member_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_move_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_move_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_move_member_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_request_notification_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub previous: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_request_notification_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_request_notification_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_request_notification_t>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_request_notification_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_request_notification_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_request_notification_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_request_notification_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_request_notification_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).previous) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_request_notification_t),
            "::",
            stringify!(previous)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_right_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_insert_right_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_insert_right_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_insert_right_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_insert_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_insert_right_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_insert_right_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_right_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_right_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_right_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub poly: mach_msg_port_descriptor_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_extract_right_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_extract_right_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_extract_right_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_extract_right_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_extract_right_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_extract_right_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_right_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_right_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poly) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_right_t),
            "::",
            stringify!(poly)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_seqno_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_seqno_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_set_seqno_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_seqno_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_seqno_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_seqno_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_set_seqno_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_seqno_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_seqno_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_seqno_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub port_info_outCnt: mach_msg_type_number_t,
    pub port_info_out: [integer_t; 17usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_attributes_t>(),
        108usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_get_attributes_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_info_outCnt) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(port_info_outCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_info_out) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_attributes_t),
            "::",
            stringify!(port_info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_set_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_attributes_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_attributes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_set_attributes_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_qos_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_qos_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_allocate_qos_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_qos_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_qos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_qos_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_allocate_qos_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_qos_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_allocate_full_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub qos: mach_port_qos_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_allocate_full_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_allocate_full_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_allocate_full_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_allocate_full_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_allocate_full_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_allocate_full_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qos) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_allocate_full_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__task_set_port_space_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__task_set_port_space_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__task_set_port_space_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__task_set_port_space_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__task_set_port_space_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__task_set_port_space_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__task_set_port_space_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_port_space_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_port_space_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__task_set_port_space_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_srights_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub srights: mach_port_rights_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_srights_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_srights_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_srights_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_srights_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_srights_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_get_srights_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srights) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_srights_t),
            "::",
            stringify!(srights)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_info_t {
    pub Head: mach_msg_header_t,
    pub msgh_body: mach_msg_body_t,
    pub table_info: mach_msg_ool_descriptor_t,
    pub tree_info: mach_msg_ool_descriptor_t,
    pub NDR: NDR_record_t,
    pub space_info: ipc_info_space_t,
    pub table_infoCnt: mach_msg_type_number_t,
    pub tree_infoCnt: mach_msg_type_number_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_space_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_space_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_space_info_t>(),
        100usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_space_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_space_info_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_space_info_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msgh_body) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(msgh_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_info) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(table_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_info) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(tree_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).space_info) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(space_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).table_infoCnt) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(table_infoCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tree_infoCnt) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_info_t),
            "::",
            stringify!(tree_infoCnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_dnrequest_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub dnr_total: ::std::os::raw::c_uint,
    pub dnr_used: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_dnrequest_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_dnrequest_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_dnrequest_info_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_dnrequest_info_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_dnrequest_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_dnrequest_info_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dnr_total) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(dnr_total)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dnr_used) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_dnrequest_info_t),
            "::",
            stringify!(dnr_used)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kernel_object_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: ::std::os::raw::c_uint,
    pub object_addr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_kernel_object_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_kernel_object_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_kernel_object_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_kernel_object_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_kernel_object_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_kernel_object_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(object_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_addr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kernel_object_t),
            "::",
            stringify!(object_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_insert_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_insert_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_insert_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_insert_member_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_insert_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_insert_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_insert_member_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_insert_member_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_extract_member_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_extract_member_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_extract_member_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_extract_member_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_extract_member_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_extract_member_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_extract_member_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_member_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_member_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_extract_member_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub context: mach_port_context_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_context_t>(),
        44usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_get_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_context_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_get_context_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_context_t),
            "::",
            stringify!(context)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_set_context_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_set_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_set_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_set_context_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_set_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_set_context_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_set_context_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_context_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_context_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_set_context_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_kobject_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_kobject_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_kobject_t>(),
        48usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_kobject_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_kobject_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_kobject_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(object_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_addr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_t),
            "::",
            stringify!(object_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_construct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub name: mach_port_name_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_construct_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_construct_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_construct_t>(),
        40usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_construct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_construct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_construct_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_construct_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_destruct_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_destruct_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_destruct_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_destruct_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_destruct_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_destruct_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_destruct_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destruct_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destruct_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_destruct_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_guard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_guard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_guard_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_guard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_unguard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_unguard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_unguard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_unguard_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_unguard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_unguard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_unguard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_unguard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_unguard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_unguard_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_space_basic_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub basic_info: ipc_info_space_basic_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_space_basic_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_space_basic_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_space_basic_info_t>(),
        60usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_space_basic_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_space_basic_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_space_basic_info_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basic_info) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_space_basic_info_t),
            "::",
            stringify!(basic_info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_guard_with_flags_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_guard_with_flags_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_guard_with_flags_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_guard_with_flags_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_guard_with_flags_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_guard_with_flags_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_guard_with_flags_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_with_flags_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_with_flags_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_guard_with_flags_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_swap_guard_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_swap_guard_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_swap_guard_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_swap_guard_t>(),
        36usize,
        concat!("Size of: ", stringify!(__Reply__mach_port_swap_guard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_swap_guard_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__Reply__mach_port_swap_guard_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_swap_guard_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_swap_guard_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_swap_guard_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_kobject_description_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub object_type: natural_t,
    pub object_addr: mach_vm_address_t,
    pub descriptionOffset: mach_msg_type_number_t,
    pub descriptionCnt: mach_msg_type_number_t,
    pub description: [::std::os::raw::c_char; 512usize],
}
#[test]
fn bindgen_test_layout___Reply__mach_port_kobject_description_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_kobject_description_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_kobject_description_t>(),
        568usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_kobject_description_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_kobject_description_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_kobject_description_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_type) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(object_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).object_addr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(object_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptionOffset) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(descriptionOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptionCnt) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(descriptionCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).description) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_kobject_description_t),
            "::",
            stringify!(description)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_is_connection_for_service_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub filter_policy_id: u64,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_is_connection_for_service_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_is_connection_for_service_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_is_connection_for_service_t>(),
        44usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_is_connection_for_service_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_is_connection_for_service_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_is_connection_for_service_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_is_connection_for_service_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_is_connection_for_service_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_is_connection_for_service_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_policy_id) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_is_connection_for_service_t),
            "::",
            stringify!(filter_policy_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_get_service_port_info_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
    pub sp_info_out: mach_service_port_info_data_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_get_service_port_info_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_get_service_port_info_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_get_service_port_info_t>(),
        292usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_get_service_port_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_get_service_port_info_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_get_service_port_info_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_service_port_info_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_service_port_info_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_service_port_info_t),
            "::",
            stringify!(RetCode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_info_out) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_get_service_port_info_t),
            "::",
            stringify!(sp_info_out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Reply__mach_port_assert_attributes_t {
    pub Head: mach_msg_header_t,
    pub NDR: NDR_record_t,
    pub RetCode: kern_return_t,
}
#[test]
fn bindgen_test_layout___Reply__mach_port_assert_attributes_t() {
    const UNINIT: ::std::mem::MaybeUninit<__Reply__mach_port_assert_attributes_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Reply__mach_port_assert_attributes_t>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(__Reply__mach_port_assert_attributes_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__Reply__mach_port_assert_attributes_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__Reply__mach_port_assert_attributes_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_assert_attributes_t),
            "::",
            stringify!(Head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NDR) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_assert_attributes_t),
            "::",
            stringify!(NDR)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RetCode) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Reply__mach_port_assert_attributes_t),
            "::",
            stringify!(RetCode)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __ReplyUnion__mach_port_subsystem {
    pub Reply_mach_port_names: __Reply__mach_port_names_t,
    pub Reply_mach_port_type: __Reply__mach_port_type_t,
    pub Reply_mach_port_rename: __Reply__mach_port_rename_t,
    pub Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    pub Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    pub Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    pub Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    pub Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    pub Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    pub Reply_mach_port_peek: __Reply__mach_port_peek_t,
    pub Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    pub Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    pub Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    pub Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    pub Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    pub Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    pub Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    pub Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    pub Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    pub Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    pub Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    pub Reply_task_set_port_space: __Reply__task_set_port_space_t,
    pub Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    pub Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    pub Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    pub Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    pub Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    pub Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    pub Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    pub Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    pub Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    pub Reply_mach_port_construct: __Reply__mach_port_construct_t,
    pub Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    pub Reply_mach_port_guard: __Reply__mach_port_guard_t,
    pub Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    pub Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    pub Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    pub Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    pub Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    pub Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t,
    pub Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t,
    pub Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t,
}
#[test]
fn bindgen_test_layout___ReplyUnion__mach_port_subsystem() {
    const UNINIT: ::std::mem::MaybeUninit<__ReplyUnion__mach_port_subsystem> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ReplyUnion__mach_port_subsystem>(),
        568usize,
        concat!("Size of: ", stringify!(__ReplyUnion__mach_port_subsystem))
    );
    assert_eq!(
        ::std::mem::align_of::<__ReplyUnion__mach_port_subsystem>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__ReplyUnion__mach_port_subsystem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_rename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_rename)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_allocate_name) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_allocate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_destroy) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_deallocate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_deallocate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_mod_refs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_mod_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_peek) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_peek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_set_mscount) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_mscount)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_set_status) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_set_status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_move_member) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_move_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_request_notification) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_request_notification)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_insert_right) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_insert_right)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_extract_right) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_extract_right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_set_seqno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_seqno)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_attributes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_set_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_attributes)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_allocate_qos) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate_qos)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_allocate_full) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_allocate_full)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_task_set_port_space) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_task_set_port_space)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_srights) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_srights)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_space_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_space_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_dnrequest_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_dnrequest_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_kernel_object) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_kernel_object)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_insert_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_insert_member)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_extract_member) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_extract_member)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_set_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_set_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_kobject) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_kobject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_construct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_construct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_destruct) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_destruct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_guard)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_unguard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_unguard)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_space_basic_info) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_space_basic_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_guard_with_flags) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_guard_with_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Reply_mach_port_swap_guard) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_swap_guard)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_kobject_description) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_kobject_description)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_is_connection_for_service) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_is_connection_for_service)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_get_service_port_info) as usize
                - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_get_service_port_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Reply_mach_port_assert_attributes) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ReplyUnion__mach_port_subsystem),
            "::",
            stringify!(Reply_mach_port_assert_attributes)
        )
    );
}
extern "C" {
    #[doc = " @function   hv_capability\n @abstract   Enumerate supported hypervisor capabilities\n @param      capability  ID of the capability\n @result     0 on success or error code"]
    pub fn hv_capability(capability: hv_capability_t, value: *mut u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_create\n @abstract   Creates a VM instance for the current task\n @param      flags  RESERVED\n @result     0 on success or error code"]
    pub fn hv_vm_create(flags: hv_vm_options_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_destroy\n @abstract   Destroys the VM instance associated with the current task\n @result     0 on success or error code"]
    pub fn hv_vm_destroy() -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_space_create\n @abstract   Creates an additional guest address space for the current task\n @param      asid  Pointer to the addresss space ID (written on success)\n @result     0 on success or error code"]
    pub fn hv_vm_space_create(asid: *mut hv_vm_space_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_space_destroy\n @abstract   Destroys the address space instance associated with the\n             current task\n @param      asid  address space ID\n @result     0 on success or error code"]
    pub fn hv_vm_space_destroy(asid: hv_vm_space_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_map\n @abstract   Maps a region in the virtual address space of the current task\n             into the guest physical address space of the VM\n @param      uva    Page aligned virtual address in the current task\n @param      gpa    Page aligned address in the guest physical address space\n @param      size   Size in bytes of the region to be mapped\n @param      flags  READ, WRITE and EXECUTE permissions of the region\n @result     0 on success or error code\n @discussion\n             Operates on the default address space"]
    pub fn hv_vm_map(
        uva: hv_uvaddr_t,
        gpa: hv_gpaddr_t,
        size: usize,
        flags: hv_memory_flags_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_unmap\n @abstract   Unmaps a region in the guest physical address space of the VM\n @param      gpa   Page aligned address in the guest physical address space\n @param      size  Size in bytes of the region to be unmapped\n @result     0 on success or error code\n @discussion\n             Operates on the default address space"]
    pub fn hv_vm_unmap(gpa: hv_gpaddr_t, size: usize) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_protect\n @abstract   Modifies the permissions of a region in the guest physical\n             address space of the VM\n @param      gpa   Page aligned address in the guest physical address space\n @param      size  Size in bytes of the region to be modified\n @param      flags New READ, WRITE and EXECUTE permissions of the region\n @result     0 on success or error code\n @discussion\n             Operates on the default address space"]
    pub fn hv_vm_protect(gpa: hv_gpaddr_t, size: usize, flags: hv_memory_flags_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_map_space\n @abstract   Maps a region in the virtual address space of the current task\n             into a guest physical address space of the VM\n @param      asid   Address space ID\n @param      uva    Page aligned virtual address in the current task\n @param      gpa    Page aligned address in the guest physical address space\n @param      size   Size in bytes of the region to be mapped\n @param      flags  READ, WRITE and EXECUTE permissions of the region\n @result     0 on success or error code"]
    pub fn hv_vm_map_space(
        asid: hv_vm_space_t,
        uva: hv_uvaddr_t,
        gpa: hv_gpaddr_t,
        size: usize,
        flags: hv_memory_flags_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_unmap_space\n @abstract   Unmaps a region in a guest physical address space of the VM\n @param      asid  Address space ID\n @param      gpa   Page aligned address in the guest physical address space\n @param      size  Size in bytes of the region to be unmapped\n @result     0 on success or error code"]
    pub fn hv_vm_unmap_space(asid: hv_vm_space_t, gpa: hv_gpaddr_t, size: usize) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_protect_space\n @abstract   Modifies the permissions of a region in a guest physical\n             address space of the VM\n @param      asid  Address space ID\n @param      gpa   Page aligned address in the guest physical address space\n @param      size  Size in bytes of the region to be modified\n @param      flags New READ, WRITE and EXECUTE permissions of the region\n @result     0 on success or error code"]
    pub fn hv_vm_protect_space(
        asid: hv_vm_space_t,
        gpa: hv_gpaddr_t,
        size: usize,
        flags: hv_memory_flags_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_sync_tsc\n @abstract   Synchronizes guest TSC across all vCPUs\n @param      tsc  Guest TSC value\n @result     0 on success or error code"]
    pub fn hv_vm_sync_tsc(tsc: u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_add_pio_notifier\n @abstract   Generate a notification when a matching guest port IO is issued.\n @param      addr      Port IO address to match\n @param      size      Size to match (1, 2, 4)\n @param      value     Value to match\n @param      mach_port Mach port with send right\n @param      flags     Controlling options\n @result     0 on success or error code\n @discussion An installed notifier will suppress guest exits triggered by the\n             matching IO and instead send a message (hv_ion_message_t) to the\n             specified mach port. Only one notifier per port address is permitted."]
    pub fn hv_vm_add_pio_notifier(
        addr: u16,
        size: usize,
        value: u32,
        mach_port: mach_port_t,
        flags: hv_ion_flags_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vm_remove_pio_notifier\n @abstract   Remove a previously added notifier.\n @param      addr      Previously specified port IO address\n @param      size      Previously specified size\n @param      value     Previously specified value\n @param      mach_port Previously specified mach port\n @param      flags     Previously specified options\n @result     0 on success or error code\n @discussion Arguments much match those previously used to add the notifier."]
    pub fn hv_vm_remove_pio_notifier(
        addr: u16,
        size: usize,
        value: u32,
        mach_port: mach_port_t,
        flags: hv_ion_flags_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_create\n @abstract   Creates a vCPU instance for the current thread\n @param      vcpu   Pointer to the vCPU ID (written on success)\n @param      flags  RESERVED\n @result     0 on success or error code"]
    pub fn hv_vcpu_create(vcpu: *mut hv_vcpuid_t, flags: hv_vcpu_options_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_destroy\n @abstract   Destroys the vCPU instance associated with the current thread\n @param      vcpu  vCPU ID\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vcpu_destroy(vcpu: hv_vcpuid_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_set_space\n @abstract   Associates the vCPU instance with an allocated address space\n @param      vcpu  vCPU ID\n @param      asid  address space ID\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vcpu_set_space(vcpu: hv_vcpuid_t, asid: hv_vm_space_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_read_register\n @abstract   Returns the current value of an architectural x86 register\n             of a vCPU\n @param      vcpu   vCPU ID\n @param      reg    ID of the register to be read\n @param      value  Pointer to the register value (written on success)\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vcpu_read_register(
        vcpu: hv_vcpuid_t,
        reg: hv_x86_reg_t,
        value: *mut u64,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_write_register\n @abstract   Set the value of an architectural x86 register of a vCPU\n @param      vcpu   vCPU ID\n @param      reg    ID of the register to be written\n @param      value  Value of the register to be written\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vcpu_write_register(vcpu: hv_vcpuid_t, reg: hv_x86_reg_t, value: u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_read_fpstate\n @abstract   Returns the current architectural x86 floating point and\n             SIMD state of a vCPU\n @param      vcpu    vCPU ID\n @param      buffer  Pointer to a memory buffer (written on success)\n @param      size    Size of the memory buffer in bytes\n @result     0 on success or error code\n @discussion\n             Structure and size are defined by the XSAVE feature set of\n             the host processor\n\n             Must be called by the owning thread"]
    pub fn hv_vcpu_read_fpstate(
        vcpu: hv_vcpuid_t,
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_write_fpstate\n @abstract   Sets the architectural x86 floating point and SIMD state of\n             a vCPU\n @param      vcpu    vCPU ID\n @param      buffer  Pointer to a memory buffer holding the state\n                     to be written\n @param      size    Size of the memory buffer in bytes\n @result     0 on success or error code\n @discussion\n             Structure and size are defined by the XSAVE feature set of\n             the host processor\n\n             Must be called by the owning thread"]
    pub fn hv_vcpu_write_fpstate(
        vcpu: hv_vcpuid_t,
        buffer: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_enable_native_msr\n @abstract   Enables an MSR to be used natively by the vCPU\n @param      vcpu    vCPU ID\n @param      msr     ID of the MSR\n @param      enable  Enable or disable the guest use of the MSR\n @result     0 on success or error code\n @discussion\n             See Documentation for a list of supported MSRs\n\n             Must be called by the owning thread"]
    pub fn hv_vcpu_enable_native_msr(vcpu: hv_vcpuid_t, msr: u32, enable: bool) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_enable_managed_msr\n @abstract   Enables an MSR to be used by the vCPU\n @param      vcpu    vCPU ID\n @param      msr     ID of the MSR\n @param      enable  Enable or disable the guest use of the MSR\n @result     0 on success or error code\n @discussion\n             See Documentation for a list of supported MSRs\n\n             Must be called by the owning thread"]
    pub fn hv_vcpu_enable_managed_msr(vcpu: hv_vcpuid_t, msr: u32, enable: bool) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_set_msr_access\n @abstract   Controls the guest access to a managed MSR\n @param      vcpu    vCPU ID\n @param      msr     ID of the MSR\n @param      flags   Enable or disable the guest use of the MSR\n @result     0 on success or error code\n @discussion\n             See Documentation for a list of supported MSRs\n\n             Must be called by the owning thread"]
    pub fn hv_vcpu_set_msr_access(
        vcpu: hv_vcpuid_t,
        msr: u32,
        flags: hv_msr_flags_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_read_msr\n @abstract   Returns the current value of an MSR of a vCPU\n @param      vcpu   vCPU ID\n @param      msr    ID of the MSR to be read\n @param      value  Pointer to the MSR value (written on success)\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vcpu_read_msr(vcpu: hv_vcpuid_t, msr: u32, value: *mut u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_write_msr\n @abstract   Set the value of an MSR of a vCPU\n @param      vcpu   vCPU ID\n @param      msr    ID of the MSR to be written\n @param      value  Value of the MSR to be written\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vcpu_write_msr(vcpu: hv_vcpuid_t, msr: u32, value: u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_flush\n @abstract   Forces flushing of cached vCPU state\n @param      vcpu  vCPU ID\n @result     0 on success or error code\n @deprecated This API has no effect and always returns HV_UNSUPPORTED.\n @discussion\n             This API should be removed from your application.\n\n             Must be called by the owning thread"]
    pub fn hv_vcpu_flush(vcpu: hv_vcpuid_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_invalidate_tlb\n @abstract   Invalidates the TLB of a vCPU\n @param      vcpu  vCPU ID\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vcpu_invalidate_tlb(vcpu: hv_vcpuid_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_run\n @abstract   Executes a vCPU\n @param      vcpu  vCPU ID\n @result     0 on success or error code\n @discussion\n             Call blocks until the next VMEXIT of the vCPU, even if the\n             VMEXIT was transparently handled. vm_vcpu_run_until()\n             only returns on unhandled VMEXITs.\n\n             Use hv_vcpu_run_until(..., HV_DEADLINE_FOREVER) for\n             an alternative that does not block on transparently handled\n             VMEXITs instead.\n\n             Must be called by the owning thread"]
    pub fn hv_vcpu_run(vcpu: hv_vcpuid_t) -> hv_return_t;
}
pub const HV_DEADLINE_FOREVER: _bindgen_ty_12 = 18446744073709551615;
pub type _bindgen_ty_12 = ::std::os::raw::c_ulong;
extern "C" {
    #[doc = " @function   hv_vcpu_run_until\n @abstract   Executes a vCPU until the given deadline.\n @param      vcpu      vCPU ID\n @param      deadline  The timer deadline in mach absolute time units.\n @result     0 on success or error code\n @discussion\n             This call blocks until the next VMEXIT or until the given\n             deadline expires. The special value HV_DEADLINE_FOREVER\n             specifies a deadline that never expires.\n\n             If a deadline other than HV_DEADLINE_FOREVER is specified,\n             this call uses the VMX preemption timer, and returns\n             HV_UNSUPPORTED if the hardware does not support it.\n\n             This function supersedes hv_vcpu_run(). Unlike hv_vcpu_run(),\n             hv_vcpu_run_until() does not return on VMEXITs that were\n             handled transparently (e.g. EPT violations in mapped regions).\n\n             Must be called by the owning thread"]
    pub fn hv_vcpu_run_until(vcpu: hv_vcpuid_t, deadline: u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_interrupt\n @abstract   Forces an immediate VMEXIT of a set of vCPUs of the VM\n @param      vcpus       Pointer to a list of vCPU IDs\n @param      vcpu_count  Number of vCPUs in the list\n @result     0 on success or error code"]
    pub fn hv_vcpu_interrupt(
        vcpus: *mut hv_vcpuid_t,
        vcpu_count: ::std::os::raw::c_uint,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_get_exec_time\n @abstract   Returns the cumulative execution time of a vCPU in nanoseconds\n @param      vcpu  vCPU ID\n @param      time  Pointer to execution time value (written on success)\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vcpu_get_exec_time(vcpu: hv_vcpuid_t, time: *mut u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vcpu_get_idle_time\n @abstract   Returns the cumulative idle time of a vCPU in nanoseconds\n @param      vcpu  vCPU ID\n @param      time  Pointer to idle time value (written on success)\n @result     0 on success or error code\n @discussion\n               This is the time spent in the kernel emulating instructions\n               that cause the virtual CPU to idle e.g. HLT.\n\n             Must be called by the owning thread"]
    pub fn hv_vcpu_get_idle_time(vcpu: hv_vcpuid_t, time: *mut u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_tsc_clock\n @abstract    Returns the value of an abstract clock.\n @description    The abstract clock ticks at the same rate as the host TSC,\n                 offset by an implementation-dependent constant. The clock\n                 value is monotonically increasing. Should only be called\n                 after the virtual machine has been created."]
    pub fn hv_tsc_clock() -> u64;
}
extern "C" {
    #[doc = " @function    hv_vcpu_set_tsc_relative\n @abstract    Sets the offset of the guest TSC relative to the hv_tsc_clock()\n @param        vcpu      vCPU ID\n @param        offset    Relative offset value to apply to VMCS TSC-offset field\n @result        0 on success or error code\n @discussion    The routine arranges to set the TSC-offset field in the VMCS such\n                 that the TSC value in the guest will be the value\n                 of hv_tsc_clock() plus the given offset."]
    pub fn hv_vcpu_set_tsc_relative(vcpu: hv_vcpuid_t, offset: i64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_vmx_status\n @abstract    Return the ZF and CF bits after running a VM\n @param        vcpu    vCPU ID\n @param        status    Pointer to 32-bit flags\n @result        0 on success or error code\n @discussion\n                 Returns the ZF (Zero) and CF (Carry) flag bits of the host\n                 RFLAGS register, captured on the last unsuccessful attempt\n                 to run the virtual CPU. If this routine returns HV_ERROR,\n                 the vcpu may have never run, or a different VM configuration\n                 problem was detected e.g. inconsistent configuration of MSRs.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_vmx_status(vcpu: hv_vcpuid_t, status: *mut u32) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_lapic_set_intr\n @abstract    Deliver an interrupt to the local APIC core\n @param        vcpu    Target vCPU ID\n @param        vector    Interrupt vector\n @param        trig    Trigger mode\n @result        0 on success or error code\n @discussion\n                Does not need to be called by the owning thread."]
    pub fn hv_vm_lapic_set_intr(
        vcpu: hv_vcpuid_t,
        vector: u8,
        trig: hv_apic_intr_trigger_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_lapic_msi\n @abstract    Deliver an MSI interrupt to one or more vCPUs in the VM\n @param        addr    MSI message address\n @param        data    MSI message data\n @result        0 on success or error code"]
    pub fn hv_vm_lapic_msi(addr: u64, data: u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_ioapic_assert_irq\n @abstract    Raise the level on a virtual IOAPIC pin\n @param        intin    Interrupt pin number\n @result        0 on success or error code"]
    pub fn hv_vm_ioapic_assert_irq(intin: ::std::os::raw::c_int) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_ioapic_deassert_irq\n @abstract    Lower the level on a virtual IOAPIC pin\n @param        intin    Interrupt pin number\n @result        0 on success or error code"]
    pub fn hv_vm_ioapic_deassert_irq(intin: ::std::os::raw::c_int) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_ioapic_pulse_irq\n @abstract    Raise then lower the level on a virtual IOAPIC pin\n @param        intin    Interrupt pin number\n @result        0 on success or error code"]
    pub fn hv_vm_ioapic_pulse_irq(intin: ::std::os::raw::c_int) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_ioapic_read\n @abstract    Read a 32-bit IOAPIC register from the virtual IOAPIC\n @param        gpa        Guest physical address of the register\n @param        datap    Pointer to returned data\n @result        0 on success or error code"]
    pub fn hv_vm_ioapic_read(gpa: hv_gpaddr_t, datap: *mut u32) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_ioapic_write\n @abstract    Write a 32-bit IOAPIC register to the virtual IOAPIC\n @param        gpa        Guest physical address of the register\n @param        data    Data to be written\n @result        0 on success or error code"]
    pub fn hv_vm_ioapic_write(gpa: hv_gpaddr_t, data: u32) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_ioapic_get_state\n @abstract    Fetch the internal state of the virtual IOAPIC\n @param        state    Pointer to the virtual IOAPIC state\n @result        0 on success or error code\n @discussion\n                 The version field of the hv_ioapic_state_ext_t\n                 structure must be set to HV_IOAPIC_STATE_EXT_VER\n                 before invoking this API."]
    pub fn hv_vm_ioapic_get_state(state: *mut hv_ioapic_state_ext_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_ioapic_put_state\n @abstract    Validate and restore the internal state of the virtual IOAPIC\n @param        state    Pointer to the virtual IOAPIC state\n @result        0 on success or error code\n @discussion\n                 This routine should only be used to restore the state of the\n                 virtual IOAPIC captured by a previous call to\n                 hv_vm_ioapic_get_state() on a fully quiescent virtual machine."]
    pub fn hv_vm_ioapic_put_state(state: *const hv_ioapic_state_ext_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_send_ioapic_intr\n @abstract    Inject an IOAPIC interrupt into the VM\n @param        data    Interrupt information\n @result        0 on success or error code\n @discussion\n                 Allows interrupts to be sent to one or more APICs of the VM.\n                 The format of the data should correspond to an IOAPIC\n                 redirection table register."]
    pub fn hv_vm_send_ioapic_intr(data: u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_atpic_assert_irq\n @abstract    Raise the level on a virtual ATPIC pin\n @param        irq        Interrupt pin number\n @result        0 on success or error code"]
    pub fn hv_vm_atpic_assert_irq(irq: ::std::os::raw::c_int) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_atpic_deassert_irq\n @abstract    Lower the level on a virtual ATPIC pin\n @param        irq        Interrupt pin number\n @result        0 on success or error code"]
    pub fn hv_vm_atpic_deassert_irq(irq: ::std::os::raw::c_int) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_atpic_port_read\n @abstract    Read from a virtual APIC I/O port\n @param        port    I/O port number\n @param        valuep    Pointer to result of I/O instruction\n @result        0 on success or error code"]
    pub fn hv_vm_atpic_port_read(port: ::std::os::raw::c_int, valuep: *mut u8) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_atpic_port_write\n @abstract    Write to a virtual APIC I/O port\n @param        port    I/O port number\n @param        value    Value to write to port\n @result        0 on success or error cod"]
    pub fn hv_vm_atpic_port_write(port: ::std::os::raw::c_int, value: u8) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_atpic_get_state\n @abstract    Fetch the internal state of a virtual ATPIC\n @param        state    Pointer to the virtual ATPIC state\n @param        is_primary    Selects the primary or secondary ATPIC\n @result        0 on success or error code\n @discussion\n                 The version field of the hv_atpic_state_ext_t\n                 structure must be set to HV_ATPIC_STATE_EXT_VER\n                 before invoking this API."]
    pub fn hv_vm_atpic_get_state(state: *mut hv_atpic_state_ext_t, is_primary: bool)
        -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_atpic_put_state\n @abstract    Validate and restore the internal state of a virtual ATPIC\n @param        state    Pointer to the virtual ATPIC state\n @param        is_primary    Selects the primary or secondary ATPIC\n @result        0 on success or error code\n @discussion\n                 This routine should only be used to restore the state of the\n                 virtual ATPIC captured by a previous call to\n                 hv_vm_atpic_get_state() on a fully quiescent virtual machine."]
    pub fn hv_vm_atpic_put_state(
        state: *const hv_atpic_state_ext_t,
        is_primary: bool,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vm_set_apic_bus_freq\n @abstract    Set the APIC timer frequency in Hz\n @param        freq    Frequency in Hz\n @result        0 on success or error code\n @discussion\n                 Allows the virtual APIC timer frequency to be set. The\n                 implementation allows values to be set between 16MHz and 2GHz.\n                The value is shared by all APICs in the VM, and may\n                only be modified when there are zero vcpus in the VM."]
    pub fn hv_vm_set_apic_bus_freq(freq: u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_inject_extint\n @abstract    Inject an external interrupt into the vCPU\n @param        vcpu    vCPU ID\n @result        0 on success or error code\n @discussion\n                 Only one external interrupt (injected via the VMCS) can\n                 be enqueued at a time.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_inject_extint(vcpu: hv_vcpuid_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_apic_read\n @abstract    Read from the vCPUs virtual local APIC\n @param        vcpu    vCPU ID\n @param        offset    Byte offset into the APIC page\n @param        data    Pointer to the APIC data\n @result        0 on success or error code\n @discussion\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_apic_read(vcpu: hv_vcpuid_t, offset: u32, data: *mut u32) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_apic_write\n @abstract    Write to the vCPUs virtual local APIC\n @param        vcpu    vCPU ID\n @param        offset    Byte offset into the APIC page\n @param        data    Value to be written\n @param        no_side_effect    Pointer to boolean flag value\n @result        0 on success or error code\n @discussion\n                 Writes to certain locations may succeed but have related\n                 side-effects which need to be handled by the caller. The\n                 no_side_effect parameter is used to indicate this.\n                 Use hv_vcpu_exit_info() to further identify the reason.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_apic_write(
        vcpu: hv_vcpuid_t,
        offset: u32,
        data: u32,
        no_side_effect: *mut bool,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_apic_get_state\n @abstract    Fetch the internal state of the virtual local APIC\n @param        vcpu    vCPU ID\n @param        state    Pointer to the virtual local APIC state\n @result        0 on success or error code\n @discussion\n                 The version field of the hv_apic_state_ext_t\n                 structure should be set to HV_APIC_STATE_EXT_VER\n                 before invoking this API.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_apic_get_state(
        vcpu: hv_vcpuid_t,
        state: *mut hv_apic_state_ext_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_apic_put_state\n @abstract    Validate and restore the internal state of the virtual local APIC\n @param        vcpu    vCPU ID\n @param        state    Pointer to the virtual local APIC state\n @result        0 on success or error code\n @discussion\n                 This API should only be used to restore the state of the\n                 virtual local APIC captured by a previous call to\n                 hv_vcpu_apic_get_state() on a fully quiescent virtual machine.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_apic_put_state(
        vcpu: hv_vcpuid_t,
        state: *const hv_apic_state_ext_t,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_exit_info\n @abstract    Return type of additional VM exit information\n @param        vcpu    vCPU ID\n @param        code    Pointer to type code\n @result        0 on success or error code\n @discussion\n                 Provides the type of additional information available\n                 about certain VM exits.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_exit_info(vcpu: hv_vcpuid_t, code: *mut hv_vm_exitinfo_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_exit_init_ap\n @abstract    Return vCPU IDs targeted by AP initialization\n @param        vcpu    vCPU ID\n @param        is_actv    Applicable processors, indexed by vCPU ID\n @param        count    Number of array elements\n @result        0 on success or error code\n @discussion\n                 This API can be called when the code returned by\n                 hv_vcpu_exit_info() is HV_VM_EXITINFO_INIT_AP, which may\n                 occur as part of handling writes to the ICR register.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_exit_init_ap(
        vcpu: hv_vcpuid_t,
        is_actv: *mut bool,
        count: ::std::os::raw::c_uint,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_exit_startup_ap\n @abstract    Return vCPU IDs targeted by AP startup\n @param        vcpu    vCPU ID\n @param        is_actv    Applicable processors, indexed by vCPU ID\n @param        count    Number of array elements\n @result        0 on success or error code\n @discussion\n                 This API can be called when the code returned by\n                 hv_vcpu_exit_info() is HV_VM_EXITINFO_STARTUP_AP, which may\n                 occur as part of handling a guest write to the ICR register.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_exit_startup_ap(
        vcpu: hv_vcpuid_t,
        is_actv: *mut bool,
        count: ::std::os::raw::c_uint,
        ap_rip: *mut u64,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_exit_ioapic_eoi\n @abstract    Return IOAPIC EOI vector\n @param        vcpu    vCPU ID\n @param        vec        Pointer to vector associated with EOI\n @result        0 on success or error code\n @discussion\n                 This API can be called when the code returned by\n                 hv_vcpu_exit_info() is HV_VM_EXITINFO_IOAPIC_EOI, which\n                 may occur as part of handling a guest write to the EOI\n                 register.\n\n                 Must be called by the owning thread."]
    pub fn hv_vcpu_exit_ioapic_eoi(vcpu: hv_vcpuid_t, vec: *mut u8) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_exit_apic_access_read\n @abstract    Return APIC value being read\n @param        vcpu    vCPU ID\n @param        value    Pointer to APIC register value\n @result        0 on success or error code\n @discussion\n                 This API can be called when the code returned by\n                 hv_vcpu_exit_info() is HV_VM_EXITINFO_APIC_ACCESS_READ, which\n                 can only occur as part of handling an APIC access VM exit.\n                 It provides a low-overhead way to access the value of\n                 the APIC register the guest is trying to read.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_exit_apic_access_read(vcpu: hv_vcpuid_t, value: *mut u32) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_exit_inject_excp\n @abstract    Return exception parameters to be injected\n @param        vcpu    vCPU ID\n @param        vec        Pointer to exception vector number\n @param        valid    Pointer to valid flag\n @param        code    Pointer to exception error code\n @param        restart    Pointer to restart flag\n @result        0 on success or error code\n @discussion\n                 This API can be called when the code returned by\n                 hv_vcpu_exit_info() is HV_VM_EXITINFO_INJECT_EXCP.\n                 If this code is encountered, the guest vcpu may have performed\n                 an illegal operation on its APIC, so the exception should\n                 usually be directed back into the guest.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_exit_inject_excp(
        vcpu: hv_vcpuid_t,
        vec: *mut u8,
        valid: *mut bool,
        code: *mut u32,
        restart: *mut bool,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_apic_lsc_enter_r32\n @abstract    Add an entry to the APIC load-store cache\n @param        vcpu    vCPU ID\n @param        is_load    True for a load register instruction\n @param        rip        Instruction pointer of movl instruction\n @param        ilen    Instruction length of movl instruction\n @param        cs        Code selector register at rip\n @param        reg        Register target of movl instruction\n @param        uva        User addresses of page(s) containing [rip, rip+ilen)\n @param        count    Number of valid addresses in uva[] (0, 1 or 2)\n @result        0 on success or error code\n @discussion\n                 Each virtual CPU implements a limited capacity cache which\n                 can performs a basic register move operation on the local\n                 APIC page in response to an APIC access VM exit.\n                 When an APIC access VM-exit occurs, iff the the set of\n                 (rip, ilen, cs) parameters specified matches, the kernel\n                 will perform the appropriate move to (or from) the\n                 target register.\n\n                If uva is non-NULL, it should contain an array of\n                page-aligned addresses in the current task that\n                correspond to the page(s) containing the guest rip in\n                the guest physical address space. If these addresses are\n                provided, the kernel will record the bytes at [rip, rip+ilen),\n                along with paging-related fields from guest control registers.\n                Each time a cache hit occurs these will be compared,\n                and the cache entry will be invalidated if any changes\n                are detected.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_apic_lsc_enter_r32(
        vcpu: hv_vcpuid_t,
        is_load: bool,
        rip: u64,
        ilen: ::std::os::raw::c_uint,
        cs: u16,
        reg: hv_x86_reg_t,
        uva: *mut u64,
        count: ::std::os::raw::c_uint,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_apic_lsc_enter_imm32\n @abstract    Add an entry to the APIC load-store cache\n @param        vcpu    vCPU ID\n @param        rip        Instruction pointer of movl instruction\n @param        ilen    Instruction length of movl instruction\n @param        cs        Code selector register at rip\n @param        imm32    Constant value to be stored\n @param        uva        User addresses of page(s) containing [rip, rip+ilen)\n @param        count    Number of valid addresses in uva[] (0, 1, or 2)\n @result        0 on success or error code\n @discussion\n                 Each virtual CPU implements a limited capacity cache which\n                 can performs a basic register move operation on the local\n                 APIC page in response to an APIC access VM exit.\n                 When an APIC access VM-exit occurs, iff the the set of\n                 (rip, ilen, cs) parameters specified matches, the kernel\n                 will perform a move of the imm32 constant to the\n                 target APIC register.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_apic_lsc_enter_imm32(
        vcpu: hv_vcpuid_t,
        rip: u64,
        ilen: ::std::os::raw::c_uint,
        cs: u16,
        imm32: u32,
        uva: *mut u64,
        count: ::std::os::raw::c_uint,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_apic_lsc_invalidate\n @abstract    Invalidate the APIC load-store cache\n @param        vcpu    vCPU ID\n @result        0 on success or error code\n @discussion\n                 Invalidates all cache entries for the vcpu.\n\n                 Must be called by the owning thread"]
    pub fn hv_vcpu_apic_lsc_invalidate(vcpu: hv_vcpuid_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_apic_ctrl\n @abstract    Modify the behavior of the virtual APIC\n @param        vcpu    vCPU ID\n @param        ctrls    APIC behavior flags\n @result        0 on success or error code\n @discussion\n                 The virtual CPU and APIC behavior can be modified\n                 by setting various flags from the hv_apic_ctls_t enumeration.\n\n                HV_APIC_CTRL_EOI_ICR_TPR enables support for MSRs that allow\n                the virtual APIC EOI, ICR and TPR registers to be accessed by\n                the guest via rdmsr and wrmsr instructions, even when the\n                APIC is in xAPIC mode.\n\n                HV_APIC_CTRL_GUEST_IDLE enables support for an MSR that\n                allows the vcpu to be placed into an idle state.\n\n                HV_APIC_CTRL_NO_TIMER disables all timer operations by\n                the virtual APIC and allows related VM exits to return the\n                client. The virtual APIC tracks guest updates to the APIC\n                timer registers, but the timer does not run, no timer\n                interrupts are generated, so the hypervisor client must\n                handle all timer operations.\n\n                HV_APIC_CTRL_IOAPIC_EOI causes the APIC to convert EOI\n                notifications intended for an IOAPIC into a VM exit instead.\n                The vector can be retrieved using hv_vcpu_exit_ioapic_eoi().\n\n                 Must be called by the owning thread."]
    pub fn hv_vcpu_apic_ctrl(vcpu: hv_vcpuid_t, ctrls: hv_apic_ctrl_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function    hv_vcpu_apic_trigger_lvt\n @abstract    Trigger an APIC local vector entry\n @param        vcpu    vCPU ID\n @param        flavor    APIC vector type\n @result        0 on success or error code\n @discussion\n                 Causes the local vector table entry to issue an interrupt\n                 request.\n                 Only HV_APIC_LVT_TIMER is currently supported.\n\n                 Must be called by the owning thread."]
    pub fn hv_vcpu_apic_trigger_lvt(vcpu: hv_vcpuid_t, flavor: hv_apic_lvt_flavor_t)
        -> hv_return_t;
}
pub const VMCS_VPID: _bindgen_ty_13 = 0;
pub const VMCS_CTRL_POSTED_INT_N_VECTOR: _bindgen_ty_13 = 2;
pub const VMCS_CTRL_EPTP_INDEX: _bindgen_ty_13 = 4;
pub const VMCS_GUEST_ES: _bindgen_ty_13 = 2048;
pub const VMCS_GUEST_CS: _bindgen_ty_13 = 2050;
pub const VMCS_GUEST_SS: _bindgen_ty_13 = 2052;
pub const VMCS_GUEST_DS: _bindgen_ty_13 = 2054;
pub const VMCS_GUEST_FS: _bindgen_ty_13 = 2056;
pub const VMCS_GUEST_GS: _bindgen_ty_13 = 2058;
pub const VMCS_GUEST_LDTR: _bindgen_ty_13 = 2060;
pub const VMCS_GUEST_TR: _bindgen_ty_13 = 2062;
pub const VMCS_GUEST_INT_STATUS: _bindgen_ty_13 = 2064;
pub const VMCS_GUESTPML_INDEX: _bindgen_ty_13 = 2066;
pub const VMCS_HOST_ES: _bindgen_ty_13 = 3072;
pub const VMCS_HOST_CS: _bindgen_ty_13 = 3074;
pub const VMCS_HOST_SS: _bindgen_ty_13 = 3076;
pub const VMCS_HOST_DS: _bindgen_ty_13 = 3078;
pub const VMCS_HOST_FS: _bindgen_ty_13 = 3080;
pub const VMCS_HOST_GS: _bindgen_ty_13 = 3082;
pub const VMCS_HOST_TR: _bindgen_ty_13 = 3084;
pub const VMCS_CTRL_IO_BITMAP_A: _bindgen_ty_13 = 8192;
pub const VMCS_CTRL_IO_BITMAP_B: _bindgen_ty_13 = 8194;
pub const VMCS_CTRL_MSR_BITMAPS: _bindgen_ty_13 = 8196;
pub const VMCS_CTRL_VMEXIT_MSR_STORE_ADDR: _bindgen_ty_13 = 8198;
pub const VMCS_CTRL_VMEXIT_MSR_LOAD_ADDR: _bindgen_ty_13 = 8200;
pub const VMCS_CTRL_VMENTRY_MSR_LOAD_ADDR: _bindgen_ty_13 = 8202;
pub const VMCS_CTRL_EXECUTIVE_VMCS_PTR: _bindgen_ty_13 = 8204;
pub const VMCS_CTRL_PML_ADDR: _bindgen_ty_13 = 8206;
pub const VMCS_CTRL_TSC_OFFSET: _bindgen_ty_13 = 8208;
pub const VMCS_CTRL_VIRTUAL_APIC: _bindgen_ty_13 = 8210;
pub const VMCS_CTRL_APIC_ACCESS: _bindgen_ty_13 = 8212;
pub const VMCS_CTRL_POSTED_INT_DESC_ADDR: _bindgen_ty_13 = 8214;
pub const VMCS_CTRL_VMFUNC_CTRL: _bindgen_ty_13 = 8216;
pub const VMCS_CTRL_EPTP: _bindgen_ty_13 = 8218;
pub const VMCS_CTRL_EOI_EXIT_BITMAP_0: _bindgen_ty_13 = 8220;
pub const VMCS_CTRL_EOI_EXIT_BITMAP_1: _bindgen_ty_13 = 8222;
pub const VMCS_CTRL_EOI_EXIT_BITMAP_2: _bindgen_ty_13 = 8224;
pub const VMCS_CTRL_EOI_EXIT_BITMAP_3: _bindgen_ty_13 = 8226;
pub const VMCS_CTRL_EPTP_LIST_ADDR: _bindgen_ty_13 = 8228;
pub const VMCS_CTRL_VMREAD_BITMAP_ADDR: _bindgen_ty_13 = 8230;
pub const VMCS_CTRL_VMWRITE_BITMAP_ADDR: _bindgen_ty_13 = 8232;
pub const VMCS_CTRL_VIRT_EXC_INFO_ADDR: _bindgen_ty_13 = 8234;
pub const VMCS_CTRL_XSS_EXITING_BITMAP: _bindgen_ty_13 = 8236;
pub const VMCS_CTRL_ENCLS_EXITING_BITMAP: _bindgen_ty_13 = 8238;
pub const VMCS_CTRL_SPP_TABLE: _bindgen_ty_13 = 8240;
pub const VMCS_CTRL_TSC_MULTIPLIER: _bindgen_ty_13 = 8242;
pub const VMCS_CTRL_ENCLV_EXITING_BITMAP: _bindgen_ty_13 = 8246;
pub const VMCS_GUEST_PHYSICAL_ADDRESS: _bindgen_ty_13 = 9216;
pub const VMCS_GUEST_LINK_POINTER: _bindgen_ty_13 = 10240;
pub const VMCS_GUEST_IA32_DEBUGCTL: _bindgen_ty_13 = 10242;
pub const VMCS_GUEST_IA32_PAT: _bindgen_ty_13 = 10244;
pub const VMCS_GUEST_IA32_EFER: _bindgen_ty_13 = 10246;
pub const VMCS_GUEST_IA32_PERF_GLOBAL_CTRL: _bindgen_ty_13 = 10248;
pub const VMCS_GUEST_PDPTE0: _bindgen_ty_13 = 10250;
pub const VMCS_GUEST_PDPTE1: _bindgen_ty_13 = 10252;
pub const VMCS_GUEST_PDPTE2: _bindgen_ty_13 = 10254;
pub const VMCS_GUEST_PDPTE3: _bindgen_ty_13 = 10256;
pub const VMCS_GUEST_IA32_BNDCFGS: _bindgen_ty_13 = 10258;
pub const VMCS_GUEST_IA32_RTIT_CTL: _bindgen_ty_13 = 10260;
pub const VMCS_GUEST_IA32_PKRS: _bindgen_ty_13 = 10264;
pub const VMCS_HOST_IA32_PAT: _bindgen_ty_13 = 11264;
pub const VMCS_HOST_IA32_EFER: _bindgen_ty_13 = 11266;
pub const VMCS_HOST_IA32_PERF_GLOBAL_CTRL: _bindgen_ty_13 = 11268;
pub const VMCS_HOST_IA32_PKRS: _bindgen_ty_13 = 11270;
pub const VMCS_CTRL_PIN_BASED: _bindgen_ty_13 = 16384;
pub const VMCS_CTRL_CPU_BASED: _bindgen_ty_13 = 16386;
pub const VMCS_CTRL_EXC_BITMAP: _bindgen_ty_13 = 16388;
pub const VMCS_CTRL_PF_ERROR_MASK: _bindgen_ty_13 = 16390;
pub const VMCS_CTRL_PF_ERROR_MATCH: _bindgen_ty_13 = 16392;
pub const VMCS_CTRL_CR3_COUNT: _bindgen_ty_13 = 16394;
pub const VMCS_CTRL_VMEXIT_CONTROLS: _bindgen_ty_13 = 16396;
pub const VMCS_CTRL_VMEXIT_MSR_STORE_COUNT: _bindgen_ty_13 = 16398;
pub const VMCS_CTRL_VMEXIT_MSR_LOAD_COUNT: _bindgen_ty_13 = 16400;
pub const VMCS_CTRL_VMENTRY_CONTROLS: _bindgen_ty_13 = 16402;
pub const VMCS_CTRL_VMENTRY_MSR_LOAD_COUNT: _bindgen_ty_13 = 16404;
pub const VMCS_CTRL_VMENTRY_IRQ_INFO: _bindgen_ty_13 = 16406;
pub const VMCS_CTRL_VMENTRY_EXC_ERROR: _bindgen_ty_13 = 16408;
pub const VMCS_CTRL_VMENTRY_INSTR_LEN: _bindgen_ty_13 = 16410;
pub const VMCS_CTRL_TPR_THRESHOLD: _bindgen_ty_13 = 16412;
pub const VMCS_CTRL_CPU_BASED2: _bindgen_ty_13 = 16414;
pub const VMCS_CTRL_PLE_GAP: _bindgen_ty_13 = 16416;
pub const VMCS_CTRL_PLE_WINDOW: _bindgen_ty_13 = 16418;
pub const VMCS_RO_INSTR_ERROR: _bindgen_ty_13 = 17408;
pub const VMCS_RO_EXIT_REASON: _bindgen_ty_13 = 17410;
pub const VMCS_RO_VMEXIT_IRQ_INFO: _bindgen_ty_13 = 17412;
pub const VMCS_RO_VMEXIT_IRQ_ERROR: _bindgen_ty_13 = 17414;
pub const VMCS_RO_IDT_VECTOR_INFO: _bindgen_ty_13 = 17416;
pub const VMCS_RO_IDT_VECTOR_ERROR: _bindgen_ty_13 = 17418;
pub const VMCS_RO_VMEXIT_INSTR_LEN: _bindgen_ty_13 = 17420;
pub const VMCS_RO_VMX_INSTR_INFO: _bindgen_ty_13 = 17422;
pub const VMCS_GUEST_ES_LIMIT: _bindgen_ty_13 = 18432;
pub const VMCS_GUEST_CS_LIMIT: _bindgen_ty_13 = 18434;
pub const VMCS_GUEST_SS_LIMIT: _bindgen_ty_13 = 18436;
pub const VMCS_GUEST_DS_LIMIT: _bindgen_ty_13 = 18438;
pub const VMCS_GUEST_FS_LIMIT: _bindgen_ty_13 = 18440;
pub const VMCS_GUEST_GS_LIMIT: _bindgen_ty_13 = 18442;
pub const VMCS_GUEST_LDTR_LIMIT: _bindgen_ty_13 = 18444;
pub const VMCS_GUEST_TR_LIMIT: _bindgen_ty_13 = 18446;
pub const VMCS_GUEST_GDTR_LIMIT: _bindgen_ty_13 = 18448;
pub const VMCS_GUEST_IDTR_LIMIT: _bindgen_ty_13 = 18450;
pub const VMCS_GUEST_ES_AR: _bindgen_ty_13 = 18452;
pub const VMCS_GUEST_CS_AR: _bindgen_ty_13 = 18454;
pub const VMCS_GUEST_SS_AR: _bindgen_ty_13 = 18456;
pub const VMCS_GUEST_DS_AR: _bindgen_ty_13 = 18458;
pub const VMCS_GUEST_FS_AR: _bindgen_ty_13 = 18460;
pub const VMCS_GUEST_GS_AR: _bindgen_ty_13 = 18462;
pub const VMCS_GUEST_LDTR_AR: _bindgen_ty_13 = 18464;
pub const VMCS_GUEST_TR_AR: _bindgen_ty_13 = 18466;
pub const VMCS_GUEST_INTERRUPTIBILITY: _bindgen_ty_13 = 18468;
pub const VMCS_GUEST_IGNORE_IRQ: _bindgen_ty_13 = 18468;
pub const VMCS_GUEST_ACTIVITY_STATE: _bindgen_ty_13 = 18470;
pub const VMCS_GUEST_SMBASE: _bindgen_ty_13 = 18472;
pub const VMCS_GUEST_IA32_SYSENTER_CS: _bindgen_ty_13 = 18474;
pub const VMCS_GUEST_VMX_TIMER_VALUE: _bindgen_ty_13 = 18478;
pub const VMCS_HOST_IA32_SYSENTER_CS: _bindgen_ty_13 = 19456;
pub const VMCS_CTRL_CR0_MASK: _bindgen_ty_13 = 24576;
pub const VMCS_CTRL_CR4_MASK: _bindgen_ty_13 = 24578;
pub const VMCS_CTRL_CR0_SHADOW: _bindgen_ty_13 = 24580;
pub const VMCS_CTRL_CR4_SHADOW: _bindgen_ty_13 = 24582;
pub const VMCS_CTRL_CR3_VALUE0: _bindgen_ty_13 = 24584;
pub const VMCS_CTRL_CR3_VALUE1: _bindgen_ty_13 = 24586;
pub const VMCS_CTRL_CR3_VALUE2: _bindgen_ty_13 = 24588;
pub const VMCS_CTRL_CR3_VALUE3: _bindgen_ty_13 = 24590;
pub const VMCS_RO_EXIT_QUALIFIC: _bindgen_ty_13 = 25600;
pub const VMCS_RO_IO_RCX: _bindgen_ty_13 = 25602;
pub const VMCS_RO_IO_RSI: _bindgen_ty_13 = 25604;
pub const VMCS_RO_IO_RDI: _bindgen_ty_13 = 25606;
pub const VMCS_RO_IO_RIP: _bindgen_ty_13 = 25608;
pub const VMCS_RO_GUEST_LIN_ADDR: _bindgen_ty_13 = 25610;
pub const VMCS_GUEST_CR0: _bindgen_ty_13 = 26624;
pub const VMCS_GUEST_CR3: _bindgen_ty_13 = 26626;
pub const VMCS_GUEST_CR4: _bindgen_ty_13 = 26628;
pub const VMCS_GUEST_ES_BASE: _bindgen_ty_13 = 26630;
pub const VMCS_GUEST_CS_BASE: _bindgen_ty_13 = 26632;
pub const VMCS_GUEST_SS_BASE: _bindgen_ty_13 = 26634;
pub const VMCS_GUEST_DS_BASE: _bindgen_ty_13 = 26636;
pub const VMCS_GUEST_FS_BASE: _bindgen_ty_13 = 26638;
pub const VMCS_GUEST_GS_BASE: _bindgen_ty_13 = 26640;
pub const VMCS_GUEST_LDTR_BASE: _bindgen_ty_13 = 26642;
pub const VMCS_GUEST_TR_BASE: _bindgen_ty_13 = 26644;
pub const VMCS_GUEST_GDTR_BASE: _bindgen_ty_13 = 26646;
pub const VMCS_GUEST_IDTR_BASE: _bindgen_ty_13 = 26648;
pub const VMCS_GUEST_DR7: _bindgen_ty_13 = 26650;
pub const VMCS_GUEST_RSP: _bindgen_ty_13 = 26652;
pub const VMCS_GUEST_RIP: _bindgen_ty_13 = 26654;
pub const VMCS_GUEST_RFLAGS: _bindgen_ty_13 = 26656;
pub const VMCS_GUEST_DEBUG_EXC: _bindgen_ty_13 = 26658;
pub const VMCS_GUEST_SYSENTER_ESP: _bindgen_ty_13 = 26660;
pub const VMCS_GUEST_SYSENTER_EIP: _bindgen_ty_13 = 26662;
pub const VMCS_GUEST_IA32_S_CET: _bindgen_ty_13 = 26664;
pub const VMCS_GUEST_SSP: _bindgen_ty_13 = 26666;
pub const VMCS_GUEST_IA32_INTR_SSP_TABLE_ADDR: _bindgen_ty_13 = 26668;
pub const VMCS_HOST_CR0: _bindgen_ty_13 = 27648;
pub const VMCS_HOST_CR3: _bindgen_ty_13 = 27650;
pub const VMCS_HOST_CR4: _bindgen_ty_13 = 27652;
pub const VMCS_HOST_FS_BASE: _bindgen_ty_13 = 27654;
pub const VMCS_HOST_GS_BASE: _bindgen_ty_13 = 27656;
pub const VMCS_HOST_TR_BASE: _bindgen_ty_13 = 27658;
pub const VMCS_HOST_GDTR_BASE: _bindgen_ty_13 = 27660;
pub const VMCS_HOST_IDTR_BASE: _bindgen_ty_13 = 27662;
pub const VMCS_HOST_IA32_SYSENTER_ESP: _bindgen_ty_13 = 27664;
pub const VMCS_HOST_IA32_SYSENTER_EIP: _bindgen_ty_13 = 27666;
pub const VMCS_HOST_RSP: _bindgen_ty_13 = 27668;
pub const VMCS_HOST_RIP: _bindgen_ty_13 = 27670;
pub const VMCS_HOST_IA32_S_CET: _bindgen_ty_13 = 27672;
pub const VMCS_HOST_SSP: _bindgen_ty_13 = 27674;
pub const VMCS_HOST_IA32_INTR_SSP_TABLE_ADDR: _bindgen_ty_13 = 27676;
pub const VMCS_MAX: _bindgen_ty_13 = 27904;
pub const VMCS_INVALID: _bindgen_ty_13 = 27904;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const VMX_BASIC_TRUE_CTLS: _bindgen_ty_14 = 36028797018963968;
pub type _bindgen_ty_14 = ::std::os::raw::c_ulong;
pub const PIN_BASED_INTR: _bindgen_ty_15 = 1;
pub const PIN_BASED_NMI: _bindgen_ty_15 = 8;
pub const PIN_BASED_VIRTUAL_NMI: _bindgen_ty_15 = 32;
pub const PIN_BASED_PREEMPTION_TIMER: _bindgen_ty_15 = 64;
pub const PIN_BASED_POSTED_INTR: _bindgen_ty_15 = 128;
pub const CPU_BASED_IRQ_WND: _bindgen_ty_15 = 4;
pub const CPU_BASED_TSC_OFFSET: _bindgen_ty_15 = 8;
pub const CPU_BASED_HLT: _bindgen_ty_15 = 128;
pub const CPU_BASED_INVLPG: _bindgen_ty_15 = 512;
pub const CPU_BASED_MWAIT: _bindgen_ty_15 = 1024;
pub const CPU_BASED_RDPMC: _bindgen_ty_15 = 2048;
pub const CPU_BASED_RDTSC: _bindgen_ty_15 = 4096;
pub const CPU_BASED_CR3_LOAD: _bindgen_ty_15 = 32768;
pub const CPU_BASED_CR3_STORE: _bindgen_ty_15 = 65536;
pub const CPU_BASED_CR8_LOAD: _bindgen_ty_15 = 524288;
pub const CPU_BASED_CR8_STORE: _bindgen_ty_15 = 1048576;
pub const CPU_BASED_TPR_SHADOW: _bindgen_ty_15 = 2097152;
pub const CPU_BASED_VIRTUAL_NMI_WND: _bindgen_ty_15 = 4194304;
pub const CPU_BASED_MOV_DR: _bindgen_ty_15 = 8388608;
pub const CPU_BASED_UNCOND_IO: _bindgen_ty_15 = 16777216;
pub const CPU_BASED_IO_BITMAPS: _bindgen_ty_15 = 33554432;
pub const CPU_BASED_MTF: _bindgen_ty_15 = 134217728;
pub const CPU_BASED_MSR_BITMAPS: _bindgen_ty_15 = 268435456;
pub const CPU_BASED_MONITOR: _bindgen_ty_15 = 536870912;
pub const CPU_BASED_PAUSE: _bindgen_ty_15 = 1073741824;
pub const CPU_BASED_SECONDARY_CTLS: _bindgen_ty_15 = 2147483648;
pub const CPU_BASED2_VIRTUAL_APIC: _bindgen_ty_15 = 1;
pub const CPU_BASED2_EPT: _bindgen_ty_15 = 2;
pub const CPU_BASED2_DESC_TABLE: _bindgen_ty_15 = 4;
pub const CPU_BASED2_RDTSCP: _bindgen_ty_15 = 8;
pub const CPU_BASED2_X2APIC: _bindgen_ty_15 = 16;
pub const CPU_BASED2_VPID: _bindgen_ty_15 = 32;
pub const CPU_BASED2_WBINVD: _bindgen_ty_15 = 64;
pub const CPU_BASED2_UNRESTRICTED: _bindgen_ty_15 = 128;
pub const CPU_BASED2_APIC_REG_VIRT: _bindgen_ty_15 = 256;
pub const CPU_BASED2_VIRT_INTR_DELIVERY: _bindgen_ty_15 = 512;
pub const CPU_BASED2_PAUSE_LOOP: _bindgen_ty_15 = 1024;
pub const CPU_BASED2_RDRAND: _bindgen_ty_15 = 2048;
pub const CPU_BASED2_INVPCID: _bindgen_ty_15 = 4096;
pub const CPU_BASED2_VMFUNC: _bindgen_ty_15 = 8192;
pub const CPU_BASED2_VMCS_SHADOW: _bindgen_ty_15 = 16384;
pub const CPU_BASED2_ENCLS_EXIT_MAP: _bindgen_ty_15 = 32768;
pub const CPU_BASED2_RDSEED: _bindgen_ty_15 = 65536;
pub const CPU_BASED2_PML: _bindgen_ty_15 = 131072;
pub const CPU_BASED2_EPT_VE: _bindgen_ty_15 = 262144;
pub const CPU_BASED2_PT_CONCEAL_VMX: _bindgen_ty_15 = 524288;
pub const CPU_BASED2_XSAVES_XRSTORS: _bindgen_ty_15 = 1048576;
pub const CPU_BASED2_EPT_MODE_BASED_EXEC: _bindgen_ty_15 = 4194304;
pub const CPU_BASED2_EPT_SUBPAGE_WRITE: _bindgen_ty_15 = 8388608;
pub const CPU_BASED2_PT_GUEST_PHYSICAL: _bindgen_ty_15 = 16777216;
pub const CPU_BASED2_TSC_SCALING: _bindgen_ty_15 = 33554432;
pub const CPU_BASED2_USER_WAIT_PAUSE: _bindgen_ty_15 = 67108864;
pub const CPU_BASED2_ENCLV_EXIT_MAP: _bindgen_ty_15 = 268435456;
pub const VMX_EPT_VPID_SUPPORT_AD: _bindgen_ty_15 = 2097152;
pub const VMX_EPT_VPID_ADV_VMEXIT_INFO: _bindgen_ty_15 = 4194304;
pub const VMX_EPT_VPID_SUPPORT_EXONLY: _bindgen_ty_15 = 1;
pub const VMEXIT_SAVE_DBG_CONTROLS: _bindgen_ty_15 = 4;
pub const VMEXIT_HOST_IA32E: _bindgen_ty_15 = 512;
pub const VMEXIT_LOAD_IA32_PERF_GLOBAL_CTRL: _bindgen_ty_15 = 4096;
pub const VMEXIT_ACK_INTR: _bindgen_ty_15 = 32768;
pub const VMEXIT_SAVE_IA32_PAT: _bindgen_ty_15 = 262144;
pub const VMEXIT_LOAD_IA32_PAT: _bindgen_ty_15 = 524288;
pub const VMEXIT_SAVE_EFER: _bindgen_ty_15 = 1048576;
pub const VMEXIT_LOAD_EFER: _bindgen_ty_15 = 2097152;
pub const VMEXIT_SAVE_VMX_TIMER: _bindgen_ty_15 = 4194304;
pub const VMEXIT_CLEAR_IA32_BNDCFGS: _bindgen_ty_15 = 8388608;
pub const VMEXIT_PT_CONCEAL_VMX: _bindgen_ty_15 = 16777216;
pub const VMEXIT_CLEAR_IA32_RTIT_CTL: _bindgen_ty_15 = 33554432;
pub const VMEXIT_LOAD_CET_STATE: _bindgen_ty_15 = 268435456;
pub const VMEXIT_LOAD_PKRS: _bindgen_ty_15 = 536870912;
pub const VMENTRY_LOAD_DBG_CONTROLS: _bindgen_ty_15 = 4;
pub const VMENTRY_GUEST_IA32E: _bindgen_ty_15 = 512;
pub const VMENTRY_SMM: _bindgen_ty_15 = 1024;
pub const VMENTRY_DEACTIVATE_DUAL_MONITOR: _bindgen_ty_15 = 2048;
pub const VMENTRY_LOAD_IA32_PERF_GLOBAL_CTRL: _bindgen_ty_15 = 8192;
pub const VMENTRY_LOAD_IA32_PAT: _bindgen_ty_15 = 16384;
pub const VMENTRY_LOAD_EFER: _bindgen_ty_15 = 32768;
pub const VMENTRY_LOAD_IA32_BNDCFGS: _bindgen_ty_15 = 65536;
pub const VMENTRY_PT_CONCEAL_VMX: _bindgen_ty_15 = 131072;
pub const VMENTRY_LOAD_IA32_RTIT_CTL: _bindgen_ty_15 = 262144;
pub const VMENTRY_LOAD_CET_STATE: _bindgen_ty_15 = 1048576;
pub const VMENTRY_LOAD_PKRS: _bindgen_ty_15 = 4194304;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const VMX_REASON_EXC_NMI: _bindgen_ty_16 = 0;
pub const VMX_REASON_IRQ: _bindgen_ty_16 = 1;
pub const VMX_REASON_TRIPLE_FAULT: _bindgen_ty_16 = 2;
pub const VMX_REASON_INIT: _bindgen_ty_16 = 3;
pub const VMX_REASON_SIPI: _bindgen_ty_16 = 4;
pub const VMX_REASON_IO_SMI: _bindgen_ty_16 = 5;
pub const VMX_REASON_OTHER_SMI: _bindgen_ty_16 = 6;
pub const VMX_REASON_IRQ_WND: _bindgen_ty_16 = 7;
pub const VMX_REASON_VIRTUAL_NMI_WND: _bindgen_ty_16 = 8;
pub const VMX_REASON_TASK: _bindgen_ty_16 = 9;
pub const VMX_REASON_CPUID: _bindgen_ty_16 = 10;
pub const VMX_REASON_GETSEC: _bindgen_ty_16 = 11;
pub const VMX_REASON_HLT: _bindgen_ty_16 = 12;
pub const VMX_REASON_INVD: _bindgen_ty_16 = 13;
pub const VMX_REASON_INVLPG: _bindgen_ty_16 = 14;
pub const VMX_REASON_RDPMC: _bindgen_ty_16 = 15;
pub const VMX_REASON_RDTSC: _bindgen_ty_16 = 16;
pub const VMX_REASON_RSM: _bindgen_ty_16 = 17;
pub const VMX_REASON_VMCALL: _bindgen_ty_16 = 18;
pub const VMX_REASON_VMCLEAR: _bindgen_ty_16 = 19;
pub const VMX_REASON_VMLAUNCH: _bindgen_ty_16 = 20;
pub const VMX_REASON_VMPTRLD: _bindgen_ty_16 = 21;
pub const VMX_REASON_VMPTRST: _bindgen_ty_16 = 22;
pub const VMX_REASON_VMREAD: _bindgen_ty_16 = 23;
pub const VMX_REASON_VMRESUME: _bindgen_ty_16 = 24;
pub const VMX_REASON_VMWRITE: _bindgen_ty_16 = 25;
pub const VMX_REASON_VMOFF: _bindgen_ty_16 = 26;
pub const VMX_REASON_VMON: _bindgen_ty_16 = 27;
pub const VMX_REASON_MOV_CR: _bindgen_ty_16 = 28;
pub const VMX_REASON_MOV_DR: _bindgen_ty_16 = 29;
pub const VMX_REASON_IO: _bindgen_ty_16 = 30;
pub const VMX_REASON_RDMSR: _bindgen_ty_16 = 31;
pub const VMX_REASON_WRMSR: _bindgen_ty_16 = 32;
pub const VMX_REASON_VMENTRY_GUEST: _bindgen_ty_16 = 33;
pub const VMX_REASON_VMENTRY_MSR: _bindgen_ty_16 = 34;
pub const VMX_REASON_MWAIT: _bindgen_ty_16 = 36;
pub const VMX_REASON_MTF: _bindgen_ty_16 = 37;
pub const VMX_REASON_MONITOR: _bindgen_ty_16 = 39;
pub const VMX_REASON_PAUSE: _bindgen_ty_16 = 40;
pub const VMX_REASON_VMENTRY_MC: _bindgen_ty_16 = 41;
pub const VMX_REASON_TPR_THRESHOLD: _bindgen_ty_16 = 43;
pub const VMX_REASON_APIC_ACCESS: _bindgen_ty_16 = 44;
pub const VMX_REASON_VIRTUALIZED_EOI: _bindgen_ty_16 = 45;
pub const VMX_REASON_GDTR_IDTR: _bindgen_ty_16 = 46;
pub const VMX_REASON_LDTR_TR: _bindgen_ty_16 = 47;
pub const VMX_REASON_EPT_VIOLATION: _bindgen_ty_16 = 48;
pub const VMX_REASON_EPT_MISCONFIG: _bindgen_ty_16 = 49;
pub const VMX_REASON_EPT_INVEPT: _bindgen_ty_16 = 50;
pub const VMX_REASON_RDTSCP: _bindgen_ty_16 = 51;
pub const VMX_REASON_VMX_TIMER_EXPIRED: _bindgen_ty_16 = 52;
pub const VMX_REASON_INVVPID: _bindgen_ty_16 = 53;
pub const VMX_REASON_WBINVD: _bindgen_ty_16 = 54;
pub const VMX_REASON_XSETBV: _bindgen_ty_16 = 55;
pub const VMX_REASON_APIC_WRITE: _bindgen_ty_16 = 56;
pub const VMX_REASON_RDRAND: _bindgen_ty_16 = 57;
pub const VMX_REASON_INVPCID: _bindgen_ty_16 = 58;
pub const VMX_REASON_VMFUNC: _bindgen_ty_16 = 59;
pub const VMX_REASON_ENCLS: _bindgen_ty_16 = 60;
pub const VMX_REASON_RDSEED: _bindgen_ty_16 = 61;
pub const VMX_REASON_PML_FULL: _bindgen_ty_16 = 62;
pub const VMX_REASON_XSAVES: _bindgen_ty_16 = 63;
pub const VMX_REASON_XRSTORS: _bindgen_ty_16 = 64;
pub const VMX_REASON_SPP_EVENT: _bindgen_ty_16 = 66;
pub const VMX_REASON_UMWAIT: _bindgen_ty_16 = 67;
pub const VMX_REASON_TPAUSE: _bindgen_ty_16 = 68;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const HV_MSR_IA32_TSC: _bindgen_ty_17 = 16;
pub const HV_MSR_IA32_SPEC_CTRL: _bindgen_ty_17 = 72;
pub const HV_MSR_IA32_PRED_CMD: _bindgen_ty_17 = 73;
pub const HV_MSR_IA32_PMC0: _bindgen_ty_17 = 193;
pub const HV_MSR_IA32_PMC7: _bindgen_ty_17 = 200;
pub const HV_MSR_IA32_ARCH_CAPABILITIES: _bindgen_ty_17 = 266;
pub const HV_MSR_IA32_FLUSH_CMD: _bindgen_ty_17 = 267;
pub const HV_MSR_IA32_SYSENTER_CS: _bindgen_ty_17 = 372;
pub const HV_MSR_IA32_SYSENTER_ESP: _bindgen_ty_17 = 373;
pub const HV_MSR_IA32_SYSENTER_EIP: _bindgen_ty_17 = 374;
pub const HV_MSR_IA32_PERFEVNTSEL0: _bindgen_ty_17 = 390;
pub const HV_MSR_IA32_PERFEVNTSEL7: _bindgen_ty_17 = 397;
pub const HV_MSR_LBR_SELECT: _bindgen_ty_17 = 456;
pub const HV_MSR_LASTBRANCH_TOS: _bindgen_ty_17 = 457;
pub const HV_MSR_LASTINT_FROM_IP: _bindgen_ty_17 = 477;
pub const HV_MSR_LASTINT_TO_IP: _bindgen_ty_17 = 478;
pub const HV_MSR_IA32_DEBUGCTL: _bindgen_ty_17 = 473;
pub const HV_MSR_IA32_FIXED_CTR0: _bindgen_ty_17 = 777;
pub const HV_MSR_IA32_FIXED_CTR1: _bindgen_ty_17 = 778;
pub const HV_MSR_IA32_FIXED_CTR2: _bindgen_ty_17 = 779;
pub const HV_MSR_IA32_FIXED_CTR3: _bindgen_ty_17 = 780;
pub const HV_MSR_PERF_METRICS: _bindgen_ty_17 = 809;
pub const HV_MSR_IA32_FIXED_CTR_CTRL: _bindgen_ty_17 = 909;
pub const HV_MSR_IA32_PERF_GLOBAL_STATUS: _bindgen_ty_17 = 910;
pub const HV_MSR_IA32_PERF_GLOBAL_CTRL: _bindgen_ty_17 = 911;
pub const HV_MSR_IA32_PERF_GLOBAL_STATUS_RESET: _bindgen_ty_17 = 912;
pub const HV_MSR_IA32_PERF_GLOBAL_STATUS_SET: _bindgen_ty_17 = 913;
pub const HV_MSR_IA32_PERF_GLOBAL_INUSE: _bindgen_ty_17 = 914;
pub const HV_MSR_IA32_A_PMC0: _bindgen_ty_17 = 1217;
pub const HV_MSR_IA32_A_PMC7: _bindgen_ty_17 = 1224;
pub const HV_MSR_LASTBRANCH_0_FROM_IP: _bindgen_ty_17 = 1664;
pub const HV_MSR_LASTBRANCH_31_FROM_IP: _bindgen_ty_17 = 1695;
pub const HV_MSR_LASTBRANCH_0_TO_IP: _bindgen_ty_17 = 1728;
pub const HV_MSR_LASTBRANCH_31_TO_IP: _bindgen_ty_17 = 1759;
pub const HV_MSR_IA32_XSS: _bindgen_ty_17 = 3488;
pub const HV_MSR_LASTBRANCH_INFO_0: _bindgen_ty_17 = 3520;
pub const HV_MSR_LASTBRANCH_INFO_31: _bindgen_ty_17 = 3551;
pub const HV_MSR_IA32_EFER: _bindgen_ty_17 = 3221225600;
pub const HV_MSR_IA32_STAR: _bindgen_ty_17 = 3221225601;
pub const HV_MSR_IA32_LSTAR: _bindgen_ty_17 = 3221225602;
pub const HV_MSR_IA32_CSTAR: _bindgen_ty_17 = 3221225603;
pub const HV_MSR_IA32_FMASK: _bindgen_ty_17 = 3221225604;
pub const HV_MSR_IA32_FS_BASE: _bindgen_ty_17 = 3221225728;
pub const HV_MSR_IA32_GS_BASE: _bindgen_ty_17 = 3221225729;
pub const HV_MSR_IA32_KERNEL_GS_BASE: _bindgen_ty_17 = 3221225730;
pub const HV_MSR_IA32_TSC_AUX: _bindgen_ty_17 = 3221225731;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const IRQ_INFO_EXT_IRQ: _bindgen_ty_18 = 0;
pub const IRQ_INFO_VECTOR_MASK: _bindgen_ty_18 = 255;
pub const IRQ_INFO_NMI: _bindgen_ty_18 = 512;
pub const IRQ_INFO_HARD_EXC: _bindgen_ty_18 = 768;
pub const IRQ_INFO_SOFT_IRQ: _bindgen_ty_18 = 1024;
pub const IRQ_INFO_PRIV_SOFT_EXC: _bindgen_ty_18 = 1280;
pub const IRQ_INFO_SOFT_EXC: _bindgen_ty_18 = 1536;
pub const IRQ_INFO_TYPE_MASK: _bindgen_ty_18 = 1792;
pub const IRQ_INFO_ERROR_VALID: _bindgen_ty_18 = 2048;
pub const IRQ_INFO_VALID: _bindgen_ty_18 = 2147483648;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " @function   hv_vmx_vcpu_read_vmcs\n @abstract   Returns the current value of a VMCS field of a vCPU\n @param      vcpu   vCPU ID\n @param      field  ID of the VMCS field to be read\n @param      value  Pointer to the VMCS field value (written on success)\n @result     0 on success or error code\n @discussion\n             See Documentation for a list of supported VMCS fields\n\n             Must be called by the owning thread"]
    pub fn hv_vmx_vcpu_read_vmcs(vcpu: hv_vcpuid_t, field: u32, value: *mut u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vmx_vcpu_write_vmcs\n @abstract   Set the value of a VMCS field of a vCPU\n @param      vcpu   vCPU ID\n @param      field  ID of the VMCS field to be written\n @param      value  Value of the VMCS field to be written\n @result     0 on success or error code\n @discussion\n             Writes to the given VMCS field.\n\n             The masks returned by hv_vmx_vcpu_get_cap_write_vmcs\n             will apply, see its documentation for the semantics of these\n             masks.\n             When writing, any bits that do not correspond to the\n             masks may cause this function to fail. For fields that are\n             scalar values instead of bit fields, the caller may assume\n             that the masks are set appropriately to allow for any\n             scalar within the allowed range.\n\n             See Documentation for a list of supported VMCS fields.\n\n             Must be called by the owning thread"]
    pub fn hv_vmx_vcpu_write_vmcs(vcpu: hv_vcpuid_t, field: u32, value: u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vmx_vcpu_get_cap_write_vmcs\n @abstract   Returns the allowed-0 and allowed-1 masks for a VMCS field of a vCPU\n @param      vcpu   vCPU ID\n @param      field  ID of the VMCS field for which to return capabilities\n @param      allowed_0  Pointer to the VMCS allowed 0 mask (written on success)\n @param      allowed_1  Pointer to the VMCS allowed 1 mask (written on success)\n @result     0 on success or error code\n @discussion\n             Returns the constraints imposed by the Hypervisor framework on\n             the given VMCS field, in the form of allowed_0 and allowed_1 masks,\n             indicating what bit values may be set when writing the given VMCS field.\n\n             When writing to a VMCS field, the caller is allowed to set bits that are\n             0 in its allowed_0 mask to 0, and bits that are 1 in its allowed_1 mask\n             to 1. This means:\n\n             allowed_0 = 0, allowed_1 = 0 -> must be NOT SET\n             allowed_0 = 0, allowed_1 = 1 -> can be either\n             allowed_0 = 1, allowed_1 = 0 -> undefined (should not happen)\n             allowed_0 = 1, allowed_1 = 1 -> must be SET\n\n             See Documentation for a list of supported VMCS fields\n\n             Must be called by the owning thread"]
    pub fn hv_vmx_vcpu_get_cap_write_vmcs(
        vcpu: hv_vcpuid_t,
        field: u32,
        allowed_0: *mut u64,
        allowed_1: *mut u64,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vmx_vcpu_read_shadow_vmcs\n @abstract   Returns the current value of a shadow VMCS field of a vCPU\n @param      vcpu   vCPU ID\n @param      field  ID of the shadow VMCS field to be read\n @param      value  Pointer to the shadow VMCS field value (written on success)\n @result     0 on success or error code\n @discussion\n             See Documentation for a list of supported shadow VMCS fields\n\n             Must be called by the owning thread"]
    pub fn hv_vmx_vcpu_read_shadow_vmcs(
        vcpu: hv_vcpuid_t,
        field: u32,
        value: *mut u64,
    ) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vmx_vcpu_write_shadow_vmcs\n @abstract   Set the value of a shadow VMCS field of a vCPU\n @param      vcpu   vCPU ID\n @param      field  ID of the shadow VMCS field to be written\n @param      value  Value of the shadow VMCS field to be written\n @result     0 on success or error code\n @discussion\n             See Documentation for a list of supported shadow VMCS fields\n\n             Must be called by the owning thread"]
    pub fn hv_vmx_vcpu_write_shadow_vmcs(vcpu: hv_vcpuid_t, field: u32, value: u64) -> hv_return_t;
}
pub const HV_SHADOW_VMCS_NONE: _bindgen_ty_19 = 0;
pub const HV_SHADOW_VMCS_READ: _bindgen_ty_19 = 1;
pub const HV_SHADOW_VMCS_WRITE: _bindgen_ty_19 = 2;
#[doc = " @enum       hv_shadow_flags_t\n @abstract   Shadow VMCS permissions for hv_vcpu_vmx_set_shadow_access()"]
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub type hv_shadow_flags_t = u64;
extern "C" {
    #[doc = " @function   hv_vmx_vcpu_set_shadow_access\n @abstract   Set the access permissions of a shadow VMCS field of a vCPU\n @param      vcpu   vCPU ID\n @param      field  ID of the shadow VMCS field\n @param      flags  New READ, WRITE permissions for the shadow VMCS field\n @result     0 on success or error code\n @discussion\n             See Documentation for a list of supported shadow VMCS fields\n\n             Must be called by the owning thread"]
    pub fn hv_vmx_vcpu_set_shadow_access(
        vcpu: hv_vcpuid_t,
        field: u32,
        flags: hv_shadow_flags_t,
    ) -> hv_return_t;
}
pub const hv_vmx_capability_t_HV_VMX_CAP_PINBASED: hv_vmx_capability_t = 0;
pub const hv_vmx_capability_t_HV_VMX_CAP_PROCBASED: hv_vmx_capability_t = 1;
pub const hv_vmx_capability_t_HV_VMX_CAP_PROCBASED2: hv_vmx_capability_t = 2;
pub const hv_vmx_capability_t_HV_VMX_CAP_ENTRY: hv_vmx_capability_t = 3;
pub const hv_vmx_capability_t_HV_VMX_CAP_EXIT: hv_vmx_capability_t = 4;
pub const hv_vmx_capability_t_HV_VMX_CAP_BASIC: hv_vmx_capability_t = 5;
pub const hv_vmx_capability_t_HV_VMX_CAP_TRUE_PINBASED: hv_vmx_capability_t = 6;
pub const hv_vmx_capability_t_HV_VMX_CAP_TRUE_PROCBASED: hv_vmx_capability_t = 7;
pub const hv_vmx_capability_t_HV_VMX_CAP_TRUE_ENTRY: hv_vmx_capability_t = 8;
pub const hv_vmx_capability_t_HV_VMX_CAP_TRUE_EXIT: hv_vmx_capability_t = 9;
pub const hv_vmx_capability_t_HV_VMX_CAP_MISC: hv_vmx_capability_t = 10;
pub const hv_vmx_capability_t_HV_VMX_CAP_CR0_FIXED0: hv_vmx_capability_t = 11;
pub const hv_vmx_capability_t_HV_VMX_CAP_CR0_FIXED1: hv_vmx_capability_t = 12;
pub const hv_vmx_capability_t_HV_VMX_CAP_CR4_FIXED0: hv_vmx_capability_t = 13;
pub const hv_vmx_capability_t_HV_VMX_CAP_CR4_FIXED1: hv_vmx_capability_t = 14;
pub const hv_vmx_capability_t_HV_VMX_CAP_VMCS_ENUM: hv_vmx_capability_t = 15;
pub const hv_vmx_capability_t_HV_VMX_CAP_EPT_VPID_CAP: hv_vmx_capability_t = 16;
pub const hv_vmx_capability_t_HV_VMX_CAP_PREEMPTION_TIMER: hv_vmx_capability_t = 32;
#[doc = " @typedef    hv_vmx_capability_t\n @abstract   Enum type of VMX capability fields"]
pub type hv_vmx_capability_t = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " @function   hv_vmx_read_capability\n @abstract   Returns the VMX capabilities of the host processor\n @param      field  ID of the VMX capability field to be read\n @param      value  Pointer to the capability field value (written on success)\n @result     0 on success or error code\n @discussion\n             See Documentation for VMX capabilities that can be / must (not)\n             be set"]
    pub fn hv_vmx_read_capability(field: hv_vmx_capability_t, value: *mut u64) -> hv_return_t;
}
pub const HV_VMX_INFO_MSR_IA32_ARCH_CAPABILITIES: _bindgen_ty_20 = 0;
pub const HV_VMX_INFO_MSR_IA32_PERF_CAPABILITIES: _bindgen_ty_20 = 1;
pub const HV_VMX_VALID_MSR_IA32_PERFEVNTSEL: _bindgen_ty_20 = 2;
pub const HV_VMX_VALID_MSR_IA32_FIXED_CTR_CTRL: _bindgen_ty_20 = 3;
pub const HV_VMX_VALID_MSR_IA32_PERF_GLOBAL_CTRL: _bindgen_ty_20 = 4;
pub const HV_VMX_VALID_MSR_IA32_PERF_GLOBAL_STATUS: _bindgen_ty_20 = 5;
pub const HV_VMX_VALID_MSR_IA32_DEBUGCTL: _bindgen_ty_20 = 6;
pub const HV_VMX_VALID_MSR_IA32_SPEC_CTRL: _bindgen_ty_20 = 7;
pub const HV_VMX_NEED_MSR_IA32_SPEC_CTRL: _bindgen_ty_20 = 8;
#[doc = " @typedef    hv_vmx_msr_info_t\n @abstract   Enum type of MSR information fields"]
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub type hv_vmx_msr_info_t = u64;
extern "C" {
    #[doc = " @function   hv_vmx_get_msr_info\n @abstract   Returns information about guest MSR configuration\n @param      field  ID of the MSR to be examined\n @param      value  Pointer to the info field value (written on success)\n @result     0 on success or error code\n @discussion\n             See Documentation for info that can be requested."]
    pub fn hv_vmx_get_msr_info(field: hv_vmx_msr_info_t, value: *mut u64) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vmx_vcpu_set_apic_address\n @abstract   Set the address of the guest APIC for a vCPU in the\n             guest physical address space of the VM\n @param      vcpu  vCPU ID\n @param      gpa   Page aligned address in the guest physical address space\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vmx_vcpu_set_apic_address(vcpu: hv_vcpuid_t, gpa: hv_gpaddr_t) -> hv_return_t;
}
extern "C" {
    #[doc = " @function   hv_vmx_vcpu_set_apic_address_space\n @abstract   Set the address of the guest APIC for a vCPU in the\n             guest physical address space of the VM for the specified space\n @param      vcpu  vCPU ID\n @param      asid  Address space ID\n @param      gpa   Page aligned address in the guest physical address space\n @result     0 on success or error code\n @discussion\n             Must be called by the owning thread"]
    pub fn hv_vmx_vcpu_set_apic_address_space(
        vcpu: hv_vcpuid_t,
        asid: hv_vm_space_t,
        gpa: hv_gpaddr_t,
    ) -> hv_return_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
