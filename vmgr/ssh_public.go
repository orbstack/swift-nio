package main

import (
	"crypto/ed25519"
	"encoding/pem"
	"errors"
	"fmt"
	"os"

	"github.com/alessio/shellescape"
	"github.com/kevinburke/ssh_config"
	"github.com/mikesmitty/edkey"
	"github.com/orbstack/macvirt/vmgr/conf"
	"github.com/orbstack/macvirt/vmgr/conf/appid"
	"github.com/orbstack/macvirt/vmgr/conf/coredir"
	"github.com/orbstack/macvirt/vmgr/conf/ports"
	"github.com/orbstack/macvirt/vmgr/syssetup"
	"github.com/sirupsen/logrus"
	"golang.org/x/crypto/ssh"
)

func generatePublicSSHKey() error {
	pk, sk, err := ed25519.GenerateKey(nil)
	if err != nil {
		return err
	}

	sshPk, err := ssh.NewPublicKey(pk)
	if err != nil {
		return err
	}

	pemKey := &pem.Block{
		Type:  "OPENSSH PRIVATE KEY",
		Bytes: edkey.MarshalED25519PrivateKey(sk),
	}
	sshSkText := pem.EncodeToMemory(pemKey)
	sshPkText := ssh.MarshalAuthorizedKey(sshPk)

	err = os.WriteFile(conf.ExtraSshDir()+"/id_ed25519", sshSkText, 0600)
	if err != nil {
		return err
	}
	err = os.WriteFile(conf.ExtraSshDir()+"/id_ed25519.pub", sshPkText, 0644)
	if err != nil {
		return err
	}

	return nil
}

func setupPublicSSH() error {
	// ssh-proxy-fdpass is to ensure VM start
	exePath, err := os.Executable()
	if err != nil {
		return fmt.Errorf("find executable: %w", err)
	}

	relHome := syssetup.MakeHomeRelative(conf.ExtraSshDir())
	quotedCmd := shellescape.QuoteCommand([]string{exePath, "ssh-proxy-fdpass", coredir.HomeDir()})
	sshConfigSection := fmt.Sprintf(`# AUTO-GENERATED BY ORBSTACK. DO NOT EDIT.
# To make changes, add or override hosts at the top of ~/.ssh/config

Host %s
  Hostname 127.0.0.1
  Port %d
  # SSH user syntax:
  #   <container>@%s to connect to <container> as the default user (matching your macOS user)
  #   <user>@<container>@%s to connect to <container> as <user>
  # Examples:
  #   ubuntu@%s: container "ubuntu", user matching your macOS user
  #   root@fedora@%s: container "fedora", user "root"
  User default
  IdentityFile %s/id_ed25519 # replace or symlink %s/id_ed25519 file to change the key
  IdentitiesOnly yes # only use this key
  ProxyCommand %s
  ProxyUseFdpass yes
`, appid.ShortAppName, ports.HostSconSSHPublic, appid.ShortAppName, appid.ShortAppName, appid.ShortAppName, appid.ShortAppName, relHome, relHome, quotedCmd)

	// write extra config
	err = os.WriteFile(conf.ExtraSshDir()+"/config", []byte(sshConfigSection), 0644)
	if err != nil {
		return err
	}

	// generate key if necessary
	_, err1 := os.Stat(conf.ExtraSshDir() + "/id_ed25519")
	_, err2 := os.Stat(conf.ExtraSshDir() + "/id_ed25519.pub")
	if errors.Is(err1, os.ErrNotExist) || errors.Is(err2, os.ErrNotExist) {
		err = generatePublicSSHKey()
		if err != nil {
			return err
		}
	}

	// check for existing "orb" host
	// incl. Include and empty Host blocks
	oldHostname, err := ssh_config.GetStrict(appid.ShortAppName, "Hostname")
	if err != nil {
		logrus.WithError(err).Warn("failed to parse SSH config")
		return err
	}
	logrus.WithField("oldHostname", oldHostname).Debug("oldHostname")

	if oldHostname == "" {
		// add include if necessary
		userConfigPath := conf.UserSshDir() + "/config"
		sshConfig, err := os.ReadFile(userConfigPath)
		if err != nil {
			if errors.Is(err, os.ErrNotExist) {
				sshConfig = []byte{}
			} else {
				return err
			}
		}

		// prepend, or it doesn't work
		includeLine := fmt.Sprintf("Include %s/config", syssetup.MakeHomeRelative(conf.ExtraSshDir()))
		sshConfig = append([]byte(includeLine+"\n\n"), sshConfig...)
		err = os.WriteFile(userConfigPath, sshConfig, 0644)
		// ignore permission errors and warn in case user has nix home-manager for .ssh
		if err != nil {
			if errors.Is(err, os.ErrPermission) {
				logrus.WithError(err).Warn("failed to add include for SSH config snippet")
			} else {
				return err
			}
		}
	}

	return nil
}
