package bpf

import "testing"

func TestIPv6BitsToMaskUint32Array(t *testing.T) {
	expecteds := map[int][4]uint32{
		0:   {0x0},
		1:   {0x80},
		2:   {0xc0},
		3:   {0xe0},
		4:   {0xf0},
		5:   {0xf8},
		6:   {0xfc},
		7:   {0xfe},
		8:   {0xff},
		9:   {0x80ff},
		10:  {0xc0ff},
		11:  {0xe0ff},
		12:  {0xf0ff},
		13:  {0xf8ff},
		14:  {0xfcff},
		15:  {0xfeff},
		16:  {0xffff},
		17:  {0x80ffff},
		18:  {0xc0ffff},
		19:  {0xe0ffff},
		20:  {0xf0ffff},
		21:  {0xf8ffff},
		22:  {0xfcffff},
		23:  {0xfeffff},
		24:  {0xffffff},
		25:  {0x80ffffff},
		26:  {0xc0ffffff},
		27:  {0xe0ffffff},
		28:  {0xf0ffffff},
		29:  {0xf8ffffff},
		30:  {0xfcffffff},
		31:  {0xfeffffff},
		32:  {0xffffffff},
		33:  {0xffffffff, 0x80},
		34:  {0xffffffff, 0xc0},
		35:  {0xffffffff, 0xe0},
		36:  {0xffffffff, 0xf0},
		37:  {0xffffffff, 0xf8},
		38:  {0xffffffff, 0xfc},
		39:  {0xffffffff, 0xfe},
		40:  {0xffffffff, 0xff},
		41:  {0xffffffff, 0x80ff},
		42:  {0xffffffff, 0xc0ff},
		43:  {0xffffffff, 0xe0ff},
		44:  {0xffffffff, 0xf0ff},
		45:  {0xffffffff, 0xf8ff},
		46:  {0xffffffff, 0xfcff},
		47:  {0xffffffff, 0xfeff},
		48:  {0xffffffff, 0xffff},
		49:  {0xffffffff, 0x80ffff},
		50:  {0xffffffff, 0xc0ffff},
		51:  {0xffffffff, 0xe0ffff},
		52:  {0xffffffff, 0xf0ffff},
		53:  {0xffffffff, 0xf8ffff},
		54:  {0xffffffff, 0xfcffff},
		55:  {0xffffffff, 0xfeffff},
		56:  {0xffffffff, 0xffffff},
		57:  {0xffffffff, 0x80ffffff},
		58:  {0xffffffff, 0xc0ffffff},
		59:  {0xffffffff, 0xe0ffffff},
		60:  {0xffffffff, 0xf0ffffff},
		61:  {0xffffffff, 0xf8ffffff},
		62:  {0xffffffff, 0xfcffffff},
		63:  {0xffffffff, 0xfeffffff},
		64:  {0xffffffff, 0xffffffff},
		65:  {0xffffffff, 0xffffffff, 0x80},
		66:  {0xffffffff, 0xffffffff, 0xc0},
		67:  {0xffffffff, 0xffffffff, 0xe0},
		68:  {0xffffffff, 0xffffffff, 0xf0},
		69:  {0xffffffff, 0xffffffff, 0xf8},
		70:  {0xffffffff, 0xffffffff, 0xfc},
		71:  {0xffffffff, 0xffffffff, 0xfe},
		72:  {0xffffffff, 0xffffffff, 0xff},
		73:  {0xffffffff, 0xffffffff, 0x80ff},
		74:  {0xffffffff, 0xffffffff, 0xc0ff},
		75:  {0xffffffff, 0xffffffff, 0xe0ff},
		76:  {0xffffffff, 0xffffffff, 0xf0ff},
		77:  {0xffffffff, 0xffffffff, 0xf8ff},
		78:  {0xffffffff, 0xffffffff, 0xfcff},
		79:  {0xffffffff, 0xffffffff, 0xfeff},
		80:  {0xffffffff, 0xffffffff, 0xffff},
		81:  {0xffffffff, 0xffffffff, 0x80ffff},
		82:  {0xffffffff, 0xffffffff, 0xc0ffff},
		83:  {0xffffffff, 0xffffffff, 0xe0ffff},
		84:  {0xffffffff, 0xffffffff, 0xf0ffff},
		85:  {0xffffffff, 0xffffffff, 0xf8ffff},
		86:  {0xffffffff, 0xffffffff, 0xfcffff},
		87:  {0xffffffff, 0xffffffff, 0xfeffff},
		88:  {0xffffffff, 0xffffffff, 0xffffff},
		89:  {0xffffffff, 0xffffffff, 0x80ffffff},
		90:  {0xffffffff, 0xffffffff, 0xc0ffffff},
		91:  {0xffffffff, 0xffffffff, 0xe0ffffff},
		92:  {0xffffffff, 0xffffffff, 0xf0ffffff},
		93:  {0xffffffff, 0xffffffff, 0xf8ffffff},
		94:  {0xffffffff, 0xffffffff, 0xfcffffff},
		95:  {0xffffffff, 0xffffffff, 0xfeffffff},
		96:  {0xffffffff, 0xffffffff, 0xffffffff},
		97:  {0xffffffff, 0xffffffff, 0xffffffff, 0x80},
		98:  {0xffffffff, 0xffffffff, 0xffffffff, 0xc0},
		99:  {0xffffffff, 0xffffffff, 0xffffffff, 0xe0},
		100: {0xffffffff, 0xffffffff, 0xffffffff, 0xf0},
		101: {0xffffffff, 0xffffffff, 0xffffffff, 0xf8},
		102: {0xffffffff, 0xffffffff, 0xffffffff, 0xfc},
		103: {0xffffffff, 0xffffffff, 0xffffffff, 0xfe},
		104: {0xffffffff, 0xffffffff, 0xffffffff, 0xff},
		105: {0xffffffff, 0xffffffff, 0xffffffff, 0x80ff},
		106: {0xffffffff, 0xffffffff, 0xffffffff, 0xc0ff},
		107: {0xffffffff, 0xffffffff, 0xffffffff, 0xe0ff},
		108: {0xffffffff, 0xffffffff, 0xffffffff, 0xf0ff},
		109: {0xffffffff, 0xffffffff, 0xffffffff, 0xf8ff},
		110: {0xffffffff, 0xffffffff, 0xffffffff, 0xfcff},
		111: {0xffffffff, 0xffffffff, 0xffffffff, 0xfeff},
		112: {0xffffffff, 0xffffffff, 0xffffffff, 0xffff},
		113: {0xffffffff, 0xffffffff, 0xffffffff, 0x80ffff},
		114: {0xffffffff, 0xffffffff, 0xffffffff, 0xc0ffff},
		115: {0xffffffff, 0xffffffff, 0xffffffff, 0xe0ffff},
		116: {0xffffffff, 0xffffffff, 0xffffffff, 0xf0ffff},
		117: {0xffffffff, 0xffffffff, 0xffffffff, 0xf8ffff},
		118: {0xffffffff, 0xffffffff, 0xffffffff, 0xfcffff},
		119: {0xffffffff, 0xffffffff, 0xffffffff, 0xfeffff},
		120: {0xffffffff, 0xffffffff, 0xffffffff, 0xffffff},
		121: {0xffffffff, 0xffffffff, 0xffffffff, 0x80ffffff},
		122: {0xffffffff, 0xffffffff, 0xffffffff, 0xc0ffffff},
		123: {0xffffffff, 0xffffffff, 0xffffffff, 0xe0ffffff},
		124: {0xffffffff, 0xffffffff, 0xffffffff, 0xf0ffffff},
		125: {0xffffffff, 0xffffffff, 0xffffffff, 0xf8ffffff},
		126: {0xffffffff, 0xffffffff, 0xffffffff, 0xfcffffff},
		127: {0xffffffff, 0xffffffff, 0xffffffff, 0xfeffffff},
		128: {0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff},
	}

	for inp, expected := range expecteds {
		val := ipv6BitsToMaskUint32Array(inp)
		if val != expected {
			t.Fatalf("expected 0x%x for input %v but got 0x%x", expected, inp, val)
		}
	}
}
