package bpf

import "testing"

func assertEqual(t *testing.T, message string, val any, expected any) {
	if val != expected {
		t.Fatalf("%s: %+v != %+v", message, val, expected)
	}
}

func TestIpv6BitsToMaskUint32Array(t *testing.T) {
	expecteds := map[int][4]uint32{
		0:   [4]uint32{0x0},
		1:   [4]uint32{0x80},
		2:   [4]uint32{0xc0},
		3:   [4]uint32{0xe0},
		4:   [4]uint32{0xf0},
		5:   [4]uint32{0xf8},
		6:   [4]uint32{0xfc},
		7:   [4]uint32{0xfe},
		8:   [4]uint32{0xff},
		9:   [4]uint32{0x80ff},
		10:  [4]uint32{0xc0ff},
		11:  [4]uint32{0xe0ff},
		12:  [4]uint32{0xf0ff},
		13:  [4]uint32{0xf8ff},
		14:  [4]uint32{0xfcff},
		15:  [4]uint32{0xfeff},
		16:  [4]uint32{0xffff},
		17:  [4]uint32{0x80ffff},
		18:  [4]uint32{0xc0ffff},
		19:  [4]uint32{0xe0ffff},
		20:  [4]uint32{0xf0ffff},
		21:  [4]uint32{0xf8ffff},
		22:  [4]uint32{0xfcffff},
		23:  [4]uint32{0xfeffff},
		24:  [4]uint32{0xffffff},
		25:  [4]uint32{0x80ffffff},
		26:  [4]uint32{0xc0ffffff},
		27:  [4]uint32{0xe0ffffff},
		28:  [4]uint32{0xf0ffffff},
		29:  [4]uint32{0xf8ffffff},
		30:  [4]uint32{0xfcffffff},
		31:  [4]uint32{0xfeffffff},
		32:  [4]uint32{0xffffffff},
		33:  [4]uint32{0xffffffff, 0x80},
		34:  [4]uint32{0xffffffff, 0xc0},
		35:  [4]uint32{0xffffffff, 0xe0},
		36:  [4]uint32{0xffffffff, 0xf0},
		37:  [4]uint32{0xffffffff, 0xf8},
		38:  [4]uint32{0xffffffff, 0xfc},
		39:  [4]uint32{0xffffffff, 0xfe},
		40:  [4]uint32{0xffffffff, 0xff},
		41:  [4]uint32{0xffffffff, 0x80ff},
		42:  [4]uint32{0xffffffff, 0xc0ff},
		43:  [4]uint32{0xffffffff, 0xe0ff},
		44:  [4]uint32{0xffffffff, 0xf0ff},
		45:  [4]uint32{0xffffffff, 0xf8ff},
		46:  [4]uint32{0xffffffff, 0xfcff},
		47:  [4]uint32{0xffffffff, 0xfeff},
		48:  [4]uint32{0xffffffff, 0xffff},
		49:  [4]uint32{0xffffffff, 0x80ffff},
		50:  [4]uint32{0xffffffff, 0xc0ffff},
		51:  [4]uint32{0xffffffff, 0xe0ffff},
		52:  [4]uint32{0xffffffff, 0xf0ffff},
		53:  [4]uint32{0xffffffff, 0xf8ffff},
		54:  [4]uint32{0xffffffff, 0xfcffff},
		55:  [4]uint32{0xffffffff, 0xfeffff},
		56:  [4]uint32{0xffffffff, 0xffffff},
		57:  [4]uint32{0xffffffff, 0x80ffffff},
		58:  [4]uint32{0xffffffff, 0xc0ffffff},
		59:  [4]uint32{0xffffffff, 0xe0ffffff},
		60:  [4]uint32{0xffffffff, 0xf0ffffff},
		61:  [4]uint32{0xffffffff, 0xf8ffffff},
		62:  [4]uint32{0xffffffff, 0xfcffffff},
		63:  [4]uint32{0xffffffff, 0xfeffffff},
		64:  [4]uint32{0xffffffff, 0xffffffff},
		65:  [4]uint32{0xffffffff, 0xffffffff, 0x80},
		66:  [4]uint32{0xffffffff, 0xffffffff, 0xc0},
		67:  [4]uint32{0xffffffff, 0xffffffff, 0xe0},
		68:  [4]uint32{0xffffffff, 0xffffffff, 0xf0},
		69:  [4]uint32{0xffffffff, 0xffffffff, 0xf8},
		70:  [4]uint32{0xffffffff, 0xffffffff, 0xfc},
		71:  [4]uint32{0xffffffff, 0xffffffff, 0xfe},
		72:  [4]uint32{0xffffffff, 0xffffffff, 0xff},
		73:  [4]uint32{0xffffffff, 0xffffffff, 0x80ff},
		74:  [4]uint32{0xffffffff, 0xffffffff, 0xc0ff},
		75:  [4]uint32{0xffffffff, 0xffffffff, 0xe0ff},
		76:  [4]uint32{0xffffffff, 0xffffffff, 0xf0ff},
		77:  [4]uint32{0xffffffff, 0xffffffff, 0xf8ff},
		78:  [4]uint32{0xffffffff, 0xffffffff, 0xfcff},
		79:  [4]uint32{0xffffffff, 0xffffffff, 0xfeff},
		80:  [4]uint32{0xffffffff, 0xffffffff, 0xffff},
		81:  [4]uint32{0xffffffff, 0xffffffff, 0x80ffff},
		82:  [4]uint32{0xffffffff, 0xffffffff, 0xc0ffff},
		83:  [4]uint32{0xffffffff, 0xffffffff, 0xe0ffff},
		84:  [4]uint32{0xffffffff, 0xffffffff, 0xf0ffff},
		85:  [4]uint32{0xffffffff, 0xffffffff, 0xf8ffff},
		86:  [4]uint32{0xffffffff, 0xffffffff, 0xfcffff},
		87:  [4]uint32{0xffffffff, 0xffffffff, 0xfeffff},
		88:  [4]uint32{0xffffffff, 0xffffffff, 0xffffff},
		89:  [4]uint32{0xffffffff, 0xffffffff, 0x80ffffff},
		90:  [4]uint32{0xffffffff, 0xffffffff, 0xc0ffffff},
		91:  [4]uint32{0xffffffff, 0xffffffff, 0xe0ffffff},
		92:  [4]uint32{0xffffffff, 0xffffffff, 0xf0ffffff},
		93:  [4]uint32{0xffffffff, 0xffffffff, 0xf8ffffff},
		94:  [4]uint32{0xffffffff, 0xffffffff, 0xfcffffff},
		95:  [4]uint32{0xffffffff, 0xffffffff, 0xfeffffff},
		96:  [4]uint32{0xffffffff, 0xffffffff, 0xffffffff},
		97:  [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0x80},
		98:  [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xc0},
		99:  [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xe0},
		100: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xf0},
		101: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xf8},
		102: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xfc},
		103: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xfe},
		104: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xff},
		105: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0x80ff},
		106: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xc0ff},
		107: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xe0ff},
		108: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xf0ff},
		109: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xf8ff},
		110: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xfcff},
		111: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xfeff},
		112: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xffff},
		113: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0x80ffff},
		114: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xc0ffff},
		115: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xe0ffff},
		116: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xf0ffff},
		117: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xf8ffff},
		118: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xfcffff},
		119: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xfeffff},
		120: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xffffff},
		121: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0x80ffffff},
		122: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xc0ffffff},
		123: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xe0ffffff},
		124: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xf0ffffff},
		125: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xf8ffffff},
		126: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xfcffffff},
		127: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xfeffffff},
		128: [4]uint32{0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff},
	}

	for inp, expected := range expecteds {
		val := ipv6BitsToMaskUint32Array(inp)
		if val != expected {
			t.Fatalf("expected 0x%x for input %v but got 0x%x", expected, inp, val)
		}
	}
}
