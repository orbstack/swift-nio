/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const FAN_ACCESS: u32 = 1;
pub const FAN_MODIFY: u32 = 2;
pub const FAN_ATTRIB: u32 = 4;
pub const FAN_CLOSE_WRITE: u32 = 8;
pub const FAN_CLOSE_NOWRITE: u32 = 16;
pub const FAN_OPEN: u32 = 32;
pub const FAN_MOVED_FROM: u32 = 64;
pub const FAN_MOVED_TO: u32 = 128;
pub const FAN_CREATE: u32 = 256;
pub const FAN_DELETE: u32 = 512;
pub const FAN_DELETE_SELF: u32 = 1024;
pub const FAN_MOVE_SELF: u32 = 2048;
pub const FAN_OPEN_EXEC: u32 = 4096;
pub const FAN_Q_OVERFLOW: u32 = 16384;
pub const FAN_FS_ERROR: u32 = 32768;
pub const FAN_OPEN_PERM: u32 = 65536;
pub const FAN_ACCESS_PERM: u32 = 131072;
pub const FAN_OPEN_EXEC_PERM: u32 = 262144;
pub const FAN_EVENT_ON_CHILD: u32 = 134217728;
pub const FAN_RENAME: u32 = 268435456;
pub const FAN_ONDIR: u32 = 1073741824;
pub const FAN_CLOSE: u32 = 24;
pub const FAN_MOVE: u32 = 192;
pub const FAN_CLOEXEC: u32 = 1;
pub const FAN_NONBLOCK: u32 = 2;
pub const FAN_CLASS_NOTIF: u32 = 0;
pub const FAN_CLASS_CONTENT: u32 = 4;
pub const FAN_CLASS_PRE_CONTENT: u32 = 8;
pub const FAN_ALL_CLASS_BITS: u32 = 12;
pub const FAN_UNLIMITED_QUEUE: u32 = 16;
pub const FAN_UNLIMITED_MARKS: u32 = 32;
pub const FAN_ENABLE_AUDIT: u32 = 64;
pub const FAN_REPORT_PIDFD: u32 = 128;
pub const FAN_REPORT_TID: u32 = 256;
pub const FAN_REPORT_FID: u32 = 512;
pub const FAN_REPORT_DIR_FID: u32 = 1024;
pub const FAN_REPORT_NAME: u32 = 2048;
pub const FAN_REPORT_TARGET_FID: u32 = 4096;
pub const FAN_REPORT_DFID_NAME: u32 = 3072;
pub const FAN_REPORT_DFID_NAME_TARGET: u32 = 7680;
pub const FAN_ALL_INIT_FLAGS: u32 = 63;
pub const FAN_MARK_ADD: u32 = 1;
pub const FAN_MARK_REMOVE: u32 = 2;
pub const FAN_MARK_DONT_FOLLOW: u32 = 4;
pub const FAN_MARK_ONLYDIR: u32 = 8;
pub const FAN_MARK_IGNORED_MASK: u32 = 32;
pub const FAN_MARK_IGNORED_SURV_MODIFY: u32 = 64;
pub const FAN_MARK_FLUSH: u32 = 128;
pub const FAN_MARK_EVICTABLE: u32 = 512;
pub const FAN_MARK_IGNORE: u32 = 1024;
pub const FAN_MARK_INODE: u32 = 0;
pub const FAN_MARK_MOUNT: u32 = 16;
pub const FAN_MARK_FILESYSTEM: u32 = 256;
pub const FAN_MARK_IGNORE_SURV: u32 = 1088;
pub const FAN_ALL_MARK_FLAGS: u32 = 255;
pub const FAN_ALL_EVENTS: u32 = 59;
pub const FAN_ALL_PERM_EVENTS: u32 = 196608;
pub const FAN_ALL_OUTGOING_EVENTS: u32 = 213051;
pub const FANOTIFY_METADATA_VERSION: u32 = 3;
pub const FAN_EVENT_INFO_TYPE_FID: u32 = 1;
pub const FAN_EVENT_INFO_TYPE_DFID_NAME: u32 = 2;
pub const FAN_EVENT_INFO_TYPE_DFID: u32 = 3;
pub const FAN_EVENT_INFO_TYPE_PIDFD: u32 = 4;
pub const FAN_EVENT_INFO_TYPE_ERROR: u32 = 5;
pub const FAN_EVENT_INFO_TYPE_OLD_DFID_NAME: u32 = 10;
pub const FAN_EVENT_INFO_TYPE_NEW_DFID_NAME: u32 = 12;
pub const FAN_RESPONSE_INFO_NONE: u32 = 0;
pub const FAN_RESPONSE_INFO_AUDIT_RULE: u32 = 1;
pub const FAN_ALLOW: u32 = 1;
pub const FAN_DENY: u32 = 2;
pub const FAN_AUDIT: u32 = 16;
pub const FAN_INFO: u32 = 32;
pub const FAN_NOFD: i32 = -1;
pub const FAN_NOPIDFD: i32 = -1;
pub const FAN_EPIDFD: i32 = -2;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_dev_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fanotify_event_metadata {
    pub event_len: __u32,
    pub vers: __u8,
    pub reserved: __u8,
    pub metadata_len: __u16,
    pub mask: __u64,
    pub fd: __s32,
    pub pid: __s32,
}
#[test]
fn bindgen_test_layout_fanotify_event_metadata() {
    const UNINIT: ::std::mem::MaybeUninit<fanotify_event_metadata> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fanotify_event_metadata>(),
        24usize,
        concat!("Size of: ", stringify!(fanotify_event_metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<fanotify_event_metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(fanotify_event_metadata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_metadata),
            "::",
            stringify!(event_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_metadata),
            "::",
            stringify!(vers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_metadata),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).metadata_len) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_metadata),
            "::",
            stringify!(metadata_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_metadata),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_metadata),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_metadata),
            "::",
            stringify!(pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fanotify_event_info_header {
    pub info_type: __u8,
    pub pad: __u8,
    pub len: __u16,
}
#[test]
fn bindgen_test_layout_fanotify_event_info_header() {
    const UNINIT: ::std::mem::MaybeUninit<fanotify_event_info_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fanotify_event_info_header>(),
        4usize,
        concat!("Size of: ", stringify!(fanotify_event_info_header))
    );
    assert_eq!(
        ::std::mem::align_of::<fanotify_event_info_header>(),
        2usize,
        concat!("Alignment of ", stringify!(fanotify_event_info_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).info_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_header),
            "::",
            stringify!(info_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_header),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_header),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct fanotify_event_info_fid {
    pub hdr: fanotify_event_info_header,
    pub fsid: __kernel_fsid_t,
    pub handle: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_fanotify_event_info_fid() {
    const UNINIT: ::std::mem::MaybeUninit<fanotify_event_info_fid> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fanotify_event_info_fid>(),
        12usize,
        concat!("Size of: ", stringify!(fanotify_event_info_fid))
    );
    assert_eq!(
        ::std::mem::align_of::<fanotify_event_info_fid>(),
        4usize,
        concat!("Alignment of ", stringify!(fanotify_event_info_fid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_fid),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_fid),
            "::",
            stringify!(fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_fid),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fanotify_event_info_pidfd {
    pub hdr: fanotify_event_info_header,
    pub pidfd: __s32,
}
#[test]
fn bindgen_test_layout_fanotify_event_info_pidfd() {
    const UNINIT: ::std::mem::MaybeUninit<fanotify_event_info_pidfd> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fanotify_event_info_pidfd>(),
        8usize,
        concat!("Size of: ", stringify!(fanotify_event_info_pidfd))
    );
    assert_eq!(
        ::std::mem::align_of::<fanotify_event_info_pidfd>(),
        4usize,
        concat!("Alignment of ", stringify!(fanotify_event_info_pidfd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_pidfd),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pidfd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_pidfd),
            "::",
            stringify!(pidfd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fanotify_event_info_error {
    pub hdr: fanotify_event_info_header,
    pub error: __s32,
    pub error_count: __u32,
}
#[test]
fn bindgen_test_layout_fanotify_event_info_error() {
    const UNINIT: ::std::mem::MaybeUninit<fanotify_event_info_error> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fanotify_event_info_error>(),
        12usize,
        concat!("Size of: ", stringify!(fanotify_event_info_error))
    );
    assert_eq!(
        ::std::mem::align_of::<fanotify_event_info_error>(),
        4usize,
        concat!("Alignment of ", stringify!(fanotify_event_info_error))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_error),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_error),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_event_info_error),
            "::",
            stringify!(error_count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fanotify_response {
    pub fd: __s32,
    pub response: __u32,
}
#[test]
fn bindgen_test_layout_fanotify_response() {
    const UNINIT: ::std::mem::MaybeUninit<fanotify_response> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fanotify_response>(),
        8usize,
        concat!("Size of: ", stringify!(fanotify_response))
    );
    assert_eq!(
        ::std::mem::align_of::<fanotify_response>(),
        4usize,
        concat!("Alignment of ", stringify!(fanotify_response))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_response),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_response),
            "::",
            stringify!(response)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fanotify_response_info_header {
    pub type_: __u8,
    pub pad: __u8,
    pub len: __u16,
}
#[test]
fn bindgen_test_layout_fanotify_response_info_header() {
    const UNINIT: ::std::mem::MaybeUninit<fanotify_response_info_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fanotify_response_info_header>(),
        4usize,
        concat!("Size of: ", stringify!(fanotify_response_info_header))
    );
    assert_eq!(
        ::std::mem::align_of::<fanotify_response_info_header>(),
        2usize,
        concat!("Alignment of ", stringify!(fanotify_response_info_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_response_info_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pad) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_response_info_header),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_response_info_header),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fanotify_response_info_audit_rule {
    pub hdr: fanotify_response_info_header,
    pub rule_number: __u32,
    pub subj_trust: __u32,
    pub obj_trust: __u32,
}
#[test]
fn bindgen_test_layout_fanotify_response_info_audit_rule() {
    const UNINIT: ::std::mem::MaybeUninit<fanotify_response_info_audit_rule> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fanotify_response_info_audit_rule>(),
        16usize,
        concat!("Size of: ", stringify!(fanotify_response_info_audit_rule))
    );
    assert_eq!(
        ::std::mem::align_of::<fanotify_response_info_audit_rule>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(fanotify_response_info_audit_rule)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_response_info_audit_rule),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rule_number) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_response_info_audit_rule),
            "::",
            stringify!(rule_number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subj_trust) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_response_info_audit_rule),
            "::",
            stringify!(subj_trust)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj_trust) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fanotify_response_info_audit_rule),
            "::",
            stringify!(obj_trust)
        )
    );
}
