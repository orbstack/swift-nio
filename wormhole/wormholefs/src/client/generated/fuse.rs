/* automatically generated by rust-bindgen 0.69.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const FUSE_KERNEL_VERSION: u32 = 7;
pub const FUSE_KERNEL_MINOR_VERSION: u32 = 38;
pub const FUSE_ROOT_ID: u32 = 1;
pub const FATTR_MODE: u32 = 1;
pub const FATTR_UID: u32 = 2;
pub const FATTR_GID: u32 = 4;
pub const FATTR_SIZE: u32 = 8;
pub const FATTR_ATIME: u32 = 16;
pub const FATTR_MTIME: u32 = 32;
pub const FATTR_FH: u32 = 64;
pub const FATTR_ATIME_NOW: u32 = 128;
pub const FATTR_MTIME_NOW: u32 = 256;
pub const FATTR_LOCKOWNER: u32 = 512;
pub const FATTR_CTIME: u32 = 1024;
pub const FATTR_KILL_SUIDGID: u32 = 2048;
pub const FOPEN_DIRECT_IO: u32 = 1;
pub const FOPEN_KEEP_CACHE: u32 = 2;
pub const FOPEN_NONSEEKABLE: u32 = 4;
pub const FOPEN_CACHE_DIR: u32 = 8;
pub const FOPEN_STREAM: u32 = 16;
pub const FOPEN_NOFLUSH: u32 = 32;
pub const FOPEN_PARALLEL_DIRECT_WRITES: u32 = 64;
pub const FUSE_ASYNC_READ: u32 = 1;
pub const FUSE_POSIX_LOCKS: u32 = 2;
pub const FUSE_FILE_OPS: u32 = 4;
pub const FUSE_ATOMIC_O_TRUNC: u32 = 8;
pub const FUSE_EXPORT_SUPPORT: u32 = 16;
pub const FUSE_BIG_WRITES: u32 = 32;
pub const FUSE_DONT_MASK: u32 = 64;
pub const FUSE_SPLICE_WRITE: u32 = 128;
pub const FUSE_SPLICE_MOVE: u32 = 256;
pub const FUSE_SPLICE_READ: u32 = 512;
pub const FUSE_FLOCK_LOCKS: u32 = 1024;
pub const FUSE_HAS_IOCTL_DIR: u32 = 2048;
pub const FUSE_AUTO_INVAL_DATA: u32 = 4096;
pub const FUSE_DO_READDIRPLUS: u32 = 8192;
pub const FUSE_READDIRPLUS_AUTO: u32 = 16384;
pub const FUSE_ASYNC_DIO: u32 = 32768;
pub const FUSE_WRITEBACK_CACHE: u32 = 65536;
pub const FUSE_NO_OPEN_SUPPORT: u32 = 131072;
pub const FUSE_PARALLEL_DIROPS: u32 = 262144;
pub const FUSE_HANDLE_KILLPRIV: u32 = 524288;
pub const FUSE_POSIX_ACL: u32 = 1048576;
pub const FUSE_ABORT_ERROR: u32 = 2097152;
pub const FUSE_MAX_PAGES: u32 = 4194304;
pub const FUSE_CACHE_SYMLINKS: u32 = 8388608;
pub const FUSE_NO_OPENDIR_SUPPORT: u32 = 16777216;
pub const FUSE_EXPLICIT_INVAL_DATA: u32 = 33554432;
pub const FUSE_MAP_ALIGNMENT: u32 = 67108864;
pub const FUSE_SUBMOUNTS: u32 = 134217728;
pub const FUSE_HANDLE_KILLPRIV_V2: u32 = 268435456;
pub const FUSE_SETXATTR_EXT: u32 = 536870912;
pub const FUSE_INIT_EXT: u32 = 1073741824;
pub const FUSE_INIT_RESERVED: u32 = 2147483648;
pub const FUSE_SECURITY_CTX: u64 = 4294967296;
pub const FUSE_HAS_INODE_DAX: u64 = 8589934592;
pub const FUSE_CREATE_SUPP_GROUP: u64 = 17179869184;
pub const FUSE_HAS_EXPIRE_ONLY: u64 = 34359738368;
pub const FUSE_PASSTHROUGH: i64 = -9223372036854775808;
pub const CUSE_UNRESTRICTED_IOCTL: u32 = 1;
pub const FUSE_RELEASE_FLUSH: u32 = 1;
pub const FUSE_RELEASE_FLOCK_UNLOCK: u32 = 2;
pub const FUSE_GETATTR_FH: u32 = 1;
pub const FUSE_LK_FLOCK: u32 = 1;
pub const FUSE_WRITE_CACHE: u32 = 1;
pub const FUSE_WRITE_LOCKOWNER: u32 = 2;
pub const FUSE_WRITE_KILL_SUIDGID: u32 = 4;
pub const FUSE_WRITE_KILL_PRIV: u32 = 4;
pub const FUSE_READ_LOCKOWNER: u32 = 2;
pub const FUSE_IOCTL_COMPAT: u32 = 1;
pub const FUSE_IOCTL_UNRESTRICTED: u32 = 2;
pub const FUSE_IOCTL_RETRY: u32 = 4;
pub const FUSE_IOCTL_32BIT: u32 = 8;
pub const FUSE_IOCTL_DIR: u32 = 16;
pub const FUSE_IOCTL_COMPAT_X32: u32 = 32;
pub const FUSE_IOCTL_MAX_IOV: u32 = 256;
pub const FUSE_POLL_SCHEDULE_NOTIFY: u32 = 1;
pub const FUSE_FSYNC_FDATASYNC: u32 = 1;
pub const FUSE_ATTR_SUBMOUNT: u32 = 1;
pub const FUSE_ATTR_DAX: u32 = 2;
pub const FUSE_OPEN_KILL_SUIDGID: u32 = 1;
pub const FUSE_SETXATTR_ACL_KILL_SGID: u32 = 1;
pub const FUSE_EXPIRE_ONLY: u32 = 1;
pub const FUSE_MIN_READ_BUFFER: u32 = 8192;
pub const FUSE_COMPAT_ENTRY_OUT_SIZE: u32 = 120;
pub const FUSE_COMPAT_ATTR_OUT_SIZE: u32 = 96;
pub const FUSE_COMPAT_MKNOD_IN_SIZE: u32 = 8;
pub const FUSE_COMPAT_WRITE_IN_SIZE: u32 = 24;
pub const FUSE_COMPAT_STATFS_SIZE: u32 = 48;
pub const FUSE_COMPAT_SETXATTR_IN_SIZE: u32 = 8;
pub const FUSE_COMPAT_INIT_OUT_SIZE: u32 = 8;
pub const FUSE_COMPAT_22_INIT_OUT_SIZE: u32 = 24;
pub const CUSE_INIT_INFO_MAX: u32 = 4096;
pub const FUSE_DEV_IOC_MAGIC: u32 = 229;
pub const FUSE_SETUPMAPPING_FLAG_WRITE: u32 = 1;
pub const FUSE_SETUPMAPPING_FLAG_READ: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_int;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct fuse_attr {
    pub ino: u64,
    pub size: u64,
    pub blocks: u64,
    pub atime: u64,
    pub mtime: u64,
    pub ctime: u64,
    pub atimensec: u32,
    pub mtimensec: u32,
    pub ctimensec: u32,
    pub mode: u32,
    pub nlink: u32,
    pub uid: u32,
    pub gid: u32,
    pub rdev: u32,
    pub blksize: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_fuse_attr() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_attr>(),
        88usize,
        concat!("Size of: ", stringify!(fuse_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atimensec) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(atimensec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtimensec) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(mtimensec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctimensec) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(ctimensec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlink) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdev) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blksize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_kstatfs {
    pub blocks: u64,
    pub bfree: u64,
    pub bavail: u64,
    pub files: u64,
    pub ffree: u64,
    pub bsize: u32,
    pub namelen: u32,
    pub frsize: u32,
    pub padding: u32,
    pub spare: [u32; 6usize],
}
#[test]
fn bindgen_test_layout_fuse_kstatfs() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_kstatfs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_kstatfs>(),
        80usize,
        concat!("Size of: ", stringify!(fuse_kstatfs))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_kstatfs>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_kstatfs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bfree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(bfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bavail) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(bavail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).files) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ffree) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(ffree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(bsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namelen) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frsize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(frsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_kstatfs),
            "::",
            stringify!(spare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_file_lock {
    pub start: u64,
    pub end: u64,
    pub type_: u32,
    pub pid: u32,
}
#[test]
fn bindgen_test_layout_fuse_file_lock() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_file_lock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_file_lock>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_file_lock))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_file_lock>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_file_lock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_lock),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_lock),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_lock),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_lock),
            "::",
            stringify!(pid)
        )
    );
}
pub const fuse_ext_type_FUSE_MAX_NR_SECCTX: fuse_ext_type = 31;
pub const fuse_ext_type_FUSE_EXT_GROUPS: fuse_ext_type = 32;
#[doc = " extension type\n FUSE_MAX_NR_SECCTX: maximum value of &fuse_secctx_header.nr_secctx\n FUSE_EXT_GROUPS: &fuse_supp_groups extension"]
pub type fuse_ext_type = ::std::os::raw::c_uint;
pub const fuse_opcode_FUSE_LOOKUP: fuse_opcode = 1;
pub const fuse_opcode_FUSE_FORGET: fuse_opcode = 2;
pub const fuse_opcode_FUSE_GETATTR: fuse_opcode = 3;
pub const fuse_opcode_FUSE_SETATTR: fuse_opcode = 4;
pub const fuse_opcode_FUSE_READLINK: fuse_opcode = 5;
pub const fuse_opcode_FUSE_SYMLINK: fuse_opcode = 6;
pub const fuse_opcode_FUSE_MKNOD: fuse_opcode = 8;
pub const fuse_opcode_FUSE_MKDIR: fuse_opcode = 9;
pub const fuse_opcode_FUSE_UNLINK: fuse_opcode = 10;
pub const fuse_opcode_FUSE_RMDIR: fuse_opcode = 11;
pub const fuse_opcode_FUSE_RENAME: fuse_opcode = 12;
pub const fuse_opcode_FUSE_LINK: fuse_opcode = 13;
pub const fuse_opcode_FUSE_OPEN: fuse_opcode = 14;
pub const fuse_opcode_FUSE_READ: fuse_opcode = 15;
pub const fuse_opcode_FUSE_WRITE: fuse_opcode = 16;
pub const fuse_opcode_FUSE_STATFS: fuse_opcode = 17;
pub const fuse_opcode_FUSE_RELEASE: fuse_opcode = 18;
pub const fuse_opcode_FUSE_FSYNC: fuse_opcode = 20;
pub const fuse_opcode_FUSE_SETXATTR: fuse_opcode = 21;
pub const fuse_opcode_FUSE_GETXATTR: fuse_opcode = 22;
pub const fuse_opcode_FUSE_LISTXATTR: fuse_opcode = 23;
pub const fuse_opcode_FUSE_REMOVEXATTR: fuse_opcode = 24;
pub const fuse_opcode_FUSE_FLUSH: fuse_opcode = 25;
pub const fuse_opcode_FUSE_INIT: fuse_opcode = 26;
pub const fuse_opcode_FUSE_OPENDIR: fuse_opcode = 27;
pub const fuse_opcode_FUSE_READDIR: fuse_opcode = 28;
pub const fuse_opcode_FUSE_RELEASEDIR: fuse_opcode = 29;
pub const fuse_opcode_FUSE_FSYNCDIR: fuse_opcode = 30;
pub const fuse_opcode_FUSE_GETLK: fuse_opcode = 31;
pub const fuse_opcode_FUSE_SETLK: fuse_opcode = 32;
pub const fuse_opcode_FUSE_SETLKW: fuse_opcode = 33;
pub const fuse_opcode_FUSE_ACCESS: fuse_opcode = 34;
pub const fuse_opcode_FUSE_CREATE: fuse_opcode = 35;
pub const fuse_opcode_FUSE_INTERRUPT: fuse_opcode = 36;
pub const fuse_opcode_FUSE_BMAP: fuse_opcode = 37;
pub const fuse_opcode_FUSE_DESTROY: fuse_opcode = 38;
pub const fuse_opcode_FUSE_IOCTL: fuse_opcode = 39;
pub const fuse_opcode_FUSE_POLL: fuse_opcode = 40;
pub const fuse_opcode_FUSE_NOTIFY_REPLY: fuse_opcode = 41;
pub const fuse_opcode_FUSE_BATCH_FORGET: fuse_opcode = 42;
pub const fuse_opcode_FUSE_FALLOCATE: fuse_opcode = 43;
pub const fuse_opcode_FUSE_READDIRPLUS: fuse_opcode = 44;
pub const fuse_opcode_FUSE_RENAME2: fuse_opcode = 45;
pub const fuse_opcode_FUSE_LSEEK: fuse_opcode = 46;
pub const fuse_opcode_FUSE_COPY_FILE_RANGE: fuse_opcode = 47;
pub const fuse_opcode_FUSE_SETUPMAPPING: fuse_opcode = 48;
pub const fuse_opcode_FUSE_REMOVEMAPPING: fuse_opcode = 49;
pub const fuse_opcode_FUSE_SYNCFS: fuse_opcode = 50;
pub const fuse_opcode_FUSE_TMPFILE: fuse_opcode = 51;
pub const fuse_opcode_FUSE_CANONICAL_PATH: fuse_opcode = 2016;
pub const fuse_opcode_CUSE_INIT: fuse_opcode = 4096;
pub const fuse_opcode_CUSE_INIT_BSWAP_RESERVED: fuse_opcode = 1048576;
pub const fuse_opcode_FUSE_INIT_BSWAP_RESERVED: fuse_opcode = 436207616;
pub type fuse_opcode = ::std::os::raw::c_uint;
pub const fuse_notify_code_FUSE_NOTIFY_POLL: fuse_notify_code = 1;
pub const fuse_notify_code_FUSE_NOTIFY_INVAL_INODE: fuse_notify_code = 2;
pub const fuse_notify_code_FUSE_NOTIFY_INVAL_ENTRY: fuse_notify_code = 3;
pub const fuse_notify_code_FUSE_NOTIFY_STORE: fuse_notify_code = 4;
pub const fuse_notify_code_FUSE_NOTIFY_RETRIEVE: fuse_notify_code = 5;
pub const fuse_notify_code_FUSE_NOTIFY_DELETE: fuse_notify_code = 6;
pub const fuse_notify_code_FUSE_NOTIFY_CODE_MAX: fuse_notify_code = 7;
pub type fuse_notify_code = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct fuse_entry_out {
    pub nodeid: u64,
    pub generation: u64,
    pub entry_valid: u64,
    pub attr_valid: u64,
    pub entry_valid_nsec: u32,
    pub attr_valid_nsec: u32,
    pub attr: fuse_attr,
}
#[test]
fn bindgen_test_layout_fuse_entry_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_entry_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_entry_out>(),
        128usize,
        concat!("Size of: ", stringify!(fuse_entry_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_entry_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_entry_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_out),
            "::",
            stringify!(nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_out),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_valid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_out),
            "::",
            stringify!(entry_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_valid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_out),
            "::",
            stringify!(attr_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_valid_nsec) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_out),
            "::",
            stringify!(entry_valid_nsec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_valid_nsec) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_out),
            "::",
            stringify!(attr_valid_nsec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_out),
            "::",
            stringify!(attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_forget_in {
    pub nlookup: u64,
}
#[test]
fn bindgen_test_layout_fuse_forget_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_forget_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_forget_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_forget_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_forget_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_forget_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlookup) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_forget_in),
            "::",
            stringify!(nlookup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_forget_one {
    pub nodeid: u64,
    pub nlookup: u64,
}
#[test]
fn bindgen_test_layout_fuse_forget_one() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_forget_one> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_forget_one>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_forget_one))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_forget_one>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_forget_one))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_forget_one),
            "::",
            stringify!(nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nlookup) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_forget_one),
            "::",
            stringify!(nlookup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_batch_forget_in {
    pub count: u32,
    pub dummy: u32,
}
#[test]
fn bindgen_test_layout_fuse_batch_forget_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_batch_forget_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_batch_forget_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_batch_forget_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_batch_forget_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_batch_forget_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_batch_forget_in),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_batch_forget_in),
            "::",
            stringify!(dummy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_getattr_in {
    pub getattr_flags: u32,
    pub dummy: u32,
    pub fh: u64,
}
#[test]
fn bindgen_test_layout_fuse_getattr_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_getattr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_getattr_in>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_getattr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_getattr_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_getattr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getattr_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_getattr_in),
            "::",
            stringify!(getattr_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_getattr_in),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_getattr_in),
            "::",
            stringify!(fh)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_attr_out {
    pub attr_valid: u64,
    pub attr_valid_nsec: u32,
    pub dummy: u32,
    pub attr: fuse_attr,
}
#[test]
fn bindgen_test_layout_fuse_attr_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_attr_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_attr_out>(),
        104usize,
        concat!("Size of: ", stringify!(fuse_attr_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_attr_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_attr_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_valid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr_out),
            "::",
            stringify!(attr_valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_valid_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr_out),
            "::",
            stringify!(attr_valid_nsec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr_out),
            "::",
            stringify!(dummy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_attr_out),
            "::",
            stringify!(attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_mknod_in {
    pub mode: u32,
    pub rdev: u32,
    pub umask: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_mknod_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_mknod_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_mknod_in>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_mknod_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_mknod_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_mknod_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_mknod_in),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdev) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_mknod_in),
            "::",
            stringify!(rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).umask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_mknod_in),
            "::",
            stringify!(umask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_mknod_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_mkdir_in {
    pub mode: u32,
    pub umask: u32,
}
#[test]
fn bindgen_test_layout_fuse_mkdir_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_mkdir_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_mkdir_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_mkdir_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_mkdir_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_mkdir_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_mkdir_in),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).umask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_mkdir_in),
            "::",
            stringify!(umask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_rename_in {
    pub newdir: u64,
}
#[test]
fn bindgen_test_layout_fuse_rename_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_rename_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_rename_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_rename_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_rename_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_rename_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newdir) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_rename_in),
            "::",
            stringify!(newdir)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_rename2_in {
    pub newdir: u64,
    pub flags: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_rename2_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_rename2_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_rename2_in>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_rename2_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_rename2_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_rename2_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newdir) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_rename2_in),
            "::",
            stringify!(newdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_rename2_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_rename2_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_link_in {
    pub oldnodeid: u64,
}
#[test]
fn bindgen_test_layout_fuse_link_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_link_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_link_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_link_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_link_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_link_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oldnodeid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_link_in),
            "::",
            stringify!(oldnodeid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_setattr_in {
    pub valid: u32,
    pub padding: u32,
    pub fh: u64,
    pub size: u64,
    pub lock_owner: u64,
    pub atime: u64,
    pub mtime: u64,
    pub ctime: u64,
    pub atimensec: u32,
    pub mtimensec: u32,
    pub ctimensec: u32,
    pub mode: u32,
    pub unused4: u32,
    pub uid: u32,
    pub gid: u32,
    pub unused5: u32,
}
#[test]
fn bindgen_test_layout_fuse_setattr_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_setattr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_setattr_in>(),
        88usize,
        concat!("Size of: ", stringify!(fuse_setattr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_setattr_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_setattr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_owner) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(lock_owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atime) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtime) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctime) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atimensec) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(atimensec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtimensec) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(mtimensec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctimensec) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(ctimensec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused4) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(unused4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused5) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setattr_in),
            "::",
            stringify!(unused5)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_open_in {
    pub flags: u32,
    pub open_flags: u32,
}
#[test]
fn bindgen_test_layout_fuse_open_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_open_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_open_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_open_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_open_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_open_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_open_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_open_in),
            "::",
            stringify!(open_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_create_in {
    pub flags: u32,
    pub mode: u32,
    pub umask: u32,
    pub open_flags: u32,
}
#[test]
fn bindgen_test_layout_fuse_create_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_create_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_create_in>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_create_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_create_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_create_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_create_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_create_in),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).umask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_create_in),
            "::",
            stringify!(umask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_create_in),
            "::",
            stringify!(open_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_open_out {
    pub fh: u64,
    pub open_flags: u32,
    pub passthrough_fh: u32,
}
#[test]
fn bindgen_test_layout_fuse_open_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_open_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_open_out>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_open_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_open_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_open_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_open_out),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_open_out),
            "::",
            stringify!(open_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).passthrough_fh) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_open_out),
            "::",
            stringify!(passthrough_fh)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_release_in {
    pub fh: u64,
    pub flags: u32,
    pub release_flags: u32,
    pub lock_owner: u64,
}
#[test]
fn bindgen_test_layout_fuse_release_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_release_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_release_in>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_release_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_release_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_release_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_release_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_release_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_release_in),
            "::",
            stringify!(release_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_owner) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_release_in),
            "::",
            stringify!(lock_owner)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_flush_in {
    pub fh: u64,
    pub unused: u32,
    pub padding: u32,
    pub lock_owner: u64,
}
#[test]
fn bindgen_test_layout_fuse_flush_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_flush_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_flush_in>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_flush_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_flush_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_flush_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_flush_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_flush_in),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_flush_in),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_owner) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_flush_in),
            "::",
            stringify!(lock_owner)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_read_in {
    pub fh: u64,
    pub offset: u64,
    pub size: u32,
    pub read_flags: u32,
    pub lock_owner: u64,
    pub flags: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_read_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_read_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_read_in>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_read_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_read_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_read_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_in),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_in),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_in),
            "::",
            stringify!(read_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_owner) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_in),
            "::",
            stringify!(lock_owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_write_in {
    pub fh: u64,
    pub offset: u64,
    pub size: u32,
    pub write_flags: u32,
    pub lock_owner: u64,
    pub flags: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_write_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_write_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_write_in>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_write_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_write_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_write_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_write_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_write_in),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_write_in),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write_flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_write_in),
            "::",
            stringify!(write_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_owner) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_write_in),
            "::",
            stringify!(lock_owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_write_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_write_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_write_out {
    pub size: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_write_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_write_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_write_out>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_write_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_write_out>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_write_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_write_out),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_write_out),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_statfs_out {
    pub st: fuse_kstatfs,
}
#[test]
fn bindgen_test_layout_fuse_statfs_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_statfs_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_statfs_out>(),
        80usize,
        concat!("Size of: ", stringify!(fuse_statfs_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_statfs_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_statfs_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_statfs_out),
            "::",
            stringify!(st)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_fsync_in {
    pub fh: u64,
    pub fsync_flags: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_fsync_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_fsync_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_fsync_in>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_fsync_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_fsync_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_fsync_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_fsync_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsync_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_fsync_in),
            "::",
            stringify!(fsync_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_fsync_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_setxattr_in {
    pub size: u32,
    pub flags: u32,
    pub setxattr_flags: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_setxattr_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_setxattr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_setxattr_in>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_setxattr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_setxattr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_setxattr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setxattr_in),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setxattr_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setxattr_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setxattr_in),
            "::",
            stringify!(setxattr_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setxattr_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_getxattr_in {
    pub size: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_getxattr_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_getxattr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_getxattr_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_getxattr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_getxattr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_getxattr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_getxattr_in),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_getxattr_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_getxattr_out {
    pub size: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_getxattr_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_getxattr_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_getxattr_out>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_getxattr_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_getxattr_out>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_getxattr_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_getxattr_out),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_getxattr_out),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_lk_in {
    pub fh: u64,
    pub owner: u64,
    pub lk: fuse_file_lock,
    pub lk_flags: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_lk_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_lk_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_lk_in>(),
        48usize,
        concat!("Size of: ", stringify!(fuse_lk_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_lk_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_lk_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lk_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lk_in),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lk) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lk_in),
            "::",
            stringify!(lk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lk_flags) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lk_in),
            "::",
            stringify!(lk_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lk_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_lk_out {
    pub lk: fuse_file_lock,
}
#[test]
fn bindgen_test_layout_fuse_lk_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_lk_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_lk_out>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_lk_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_lk_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_lk_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lk) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lk_out),
            "::",
            stringify!(lk)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_access_in {
    pub mask: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_access_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_access_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_access_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_access_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_access_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_access_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_access_in),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_access_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_init_in {
    pub major: u32,
    pub minor: u32,
    pub max_readahead: u32,
    pub flags: u32,
    pub flags2: u32,
    pub unused: [u32; 11usize],
}
#[test]
fn bindgen_test_layout_fuse_init_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_init_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_init_in>(),
        64usize,
        concat!("Size of: ", stringify!(fuse_init_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_init_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_init_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_in),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_in),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_readahead) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_in),
            "::",
            stringify!(max_readahead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_in),
            "::",
            stringify!(flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_in),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_init_out {
    pub major: u32,
    pub minor: u32,
    pub max_readahead: u32,
    pub flags: u32,
    pub max_background: u16,
    pub congestion_threshold: u16,
    pub max_write: u32,
    pub time_gran: u32,
    pub max_pages: u16,
    pub map_alignment: u16,
    pub flags2: u32,
    pub unused: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_fuse_init_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_init_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_init_out>(),
        64usize,
        concat!("Size of: ", stringify!(fuse_init_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_init_out>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_init_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_readahead) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(max_readahead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_background) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(max_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).congestion_threshold) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(congestion_threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_write) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(max_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_gran) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(time_gran)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_pages) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(max_pages)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_alignment) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(map_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags2) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_init_out),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cuse_init_in {
    pub major: u32,
    pub minor: u32,
    pub unused: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_cuse_init_in() {
    const UNINIT: ::std::mem::MaybeUninit<cuse_init_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuse_init_in>(),
        16usize,
        concat!("Size of: ", stringify!(cuse_init_in))
    );
    assert_eq!(
        ::std::mem::align_of::<cuse_init_in>(),
        4usize,
        concat!("Alignment of ", stringify!(cuse_init_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_in),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_in),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_in),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_in),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cuse_init_out {
    pub major: u32,
    pub minor: u32,
    pub unused: u32,
    pub flags: u32,
    pub max_read: u32,
    pub max_write: u32,
    pub dev_major: u32,
    pub dev_minor: u32,
    pub spare: [u32; 10usize],
}
#[test]
fn bindgen_test_layout_cuse_init_out() {
    const UNINIT: ::std::mem::MaybeUninit<cuse_init_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cuse_init_out>(),
        72usize,
        concat!("Size of: ", stringify!(cuse_init_out))
    );
    assert_eq!(
        ::std::mem::align_of::<cuse_init_out>(),
        4usize,
        concat!("Alignment of ", stringify!(cuse_init_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_out),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_out),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_out),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_out),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_out),
            "::",
            stringify!(max_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_write) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_out),
            "::",
            stringify!(max_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_major) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_out),
            "::",
            stringify!(dev_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_minor) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_out),
            "::",
            stringify!(dev_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spare) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cuse_init_out),
            "::",
            stringify!(spare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_interrupt_in {
    pub unique: u64,
}
#[test]
fn bindgen_test_layout_fuse_interrupt_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_interrupt_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_interrupt_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_interrupt_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_interrupt_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_interrupt_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unique) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_interrupt_in),
            "::",
            stringify!(unique)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_bmap_in {
    pub block: u64,
    pub blocksize: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_bmap_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_bmap_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_bmap_in>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_bmap_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_bmap_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_bmap_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bmap_in),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blocksize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bmap_in),
            "::",
            stringify!(blocksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bmap_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_bmap_out {
    pub block: u64,
}
#[test]
fn bindgen_test_layout_fuse_bmap_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_bmap_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_bmap_out>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_bmap_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_bmap_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_bmap_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bmap_out),
            "::",
            stringify!(block)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_ioctl_in {
    pub fh: u64,
    pub flags: u32,
    pub cmd: u32,
    pub arg: u64,
    pub in_size: u32,
    pub out_size: u32,
}
#[test]
fn bindgen_test_layout_fuse_ioctl_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_ioctl_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_ioctl_in>(),
        32usize,
        concat!("Size of: ", stringify!(fuse_ioctl_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_ioctl_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_ioctl_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_in),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_in),
            "::",
            stringify!(arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_in),
            "::",
            stringify!(in_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_size) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_in),
            "::",
            stringify!(out_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_ioctl_iovec {
    pub base: u64,
    pub len: u64,
}
#[test]
fn bindgen_test_layout_fuse_ioctl_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_ioctl_iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_ioctl_iovec>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_ioctl_iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_ioctl_iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_ioctl_iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_iovec),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_iovec),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_ioctl_out {
    pub result: i32,
    pub flags: u32,
    pub in_iovs: u32,
    pub out_iovs: u32,
}
#[test]
fn bindgen_test_layout_fuse_ioctl_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_ioctl_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_ioctl_out>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_ioctl_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_ioctl_out>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_ioctl_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_out),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_out),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_iovs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_out),
            "::",
            stringify!(in_iovs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_iovs) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ioctl_out),
            "::",
            stringify!(out_iovs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_poll_in {
    pub fh: u64,
    pub kh: u64,
    pub flags: u32,
    pub events: u32,
}
#[test]
fn bindgen_test_layout_fuse_poll_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_poll_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_poll_in>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_poll_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_poll_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_poll_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_poll_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kh) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_poll_in),
            "::",
            stringify!(kh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_poll_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_poll_in),
            "::",
            stringify!(events)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_poll_out {
    pub revents: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_poll_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_poll_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_poll_out>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_poll_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_poll_out>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_poll_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).revents) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_poll_out),
            "::",
            stringify!(revents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_poll_out),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_notify_poll_wakeup_out {
    pub kh: u64,
}
#[test]
fn bindgen_test_layout_fuse_notify_poll_wakeup_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_notify_poll_wakeup_out> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_notify_poll_wakeup_out>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_notify_poll_wakeup_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_notify_poll_wakeup_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_notify_poll_wakeup_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_poll_wakeup_out),
            "::",
            stringify!(kh)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_fallocate_in {
    pub fh: u64,
    pub offset: u64,
    pub length: u64,
    pub mode: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_fallocate_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_fallocate_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_fallocate_in>(),
        32usize,
        concat!("Size of: ", stringify!(fuse_fallocate_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_fallocate_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_fallocate_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_fallocate_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_fallocate_in),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_fallocate_in),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_fallocate_in),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_fallocate_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_in_header {
    pub len: u32,
    pub opcode: u32,
    pub unique: u64,
    pub nodeid: u64,
    pub uid: u32,
    pub gid: u32,
    pub pid: u32,
    pub total_extlen: u16,
    pub padding: u16,
}
#[test]
fn bindgen_test_layout_fuse_in_header() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_in_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_in_header>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_in_header))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_in_header>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_in_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_header),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_header),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unique) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_header),
            "::",
            stringify!(unique)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_header),
            "::",
            stringify!(nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_header),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_header),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_header),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_extlen) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_header),
            "::",
            stringify!(total_extlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_header),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_out_header {
    pub len: u32,
    pub error: i32,
    pub unique: u64,
}
#[test]
fn bindgen_test_layout_fuse_out_header() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_out_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_out_header>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_out_header))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_out_header>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_out_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_out_header),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_out_header),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unique) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_out_header),
            "::",
            stringify!(unique)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct fuse_dirent {
    pub ino: u64,
    pub off: u64,
    pub namelen: u32,
    pub type_: u32,
    pub name: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_fuse_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_dirent>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_dirent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_dirent),
            "::",
            stringify!(ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_dirent),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namelen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_dirent),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_dirent),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_dirent),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct fuse_direntplus {
    pub entry_out: fuse_entry_out,
    pub dirent: fuse_dirent,
}
#[test]
fn bindgen_test_layout_fuse_direntplus() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_direntplus> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_direntplus>(),
        152usize,
        concat!("Size of: ", stringify!(fuse_direntplus))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_direntplus>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_direntplus))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry_out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_direntplus),
            "::",
            stringify!(entry_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dirent) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_direntplus),
            "::",
            stringify!(dirent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_notify_inval_inode_out {
    pub ino: u64,
    pub off: i64,
    pub len: i64,
}
#[test]
fn bindgen_test_layout_fuse_notify_inval_inode_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_notify_inval_inode_out> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_notify_inval_inode_out>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_notify_inval_inode_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_notify_inval_inode_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_notify_inval_inode_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_inval_inode_out),
            "::",
            stringify!(ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_inval_inode_out),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_inval_inode_out),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_notify_inval_entry_out {
    pub parent: u64,
    pub namelen: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_fuse_notify_inval_entry_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_notify_inval_entry_out> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_notify_inval_entry_out>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_notify_inval_entry_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_notify_inval_entry_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_notify_inval_entry_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_inval_entry_out),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_inval_entry_out),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_inval_entry_out),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_notify_delete_out {
    pub parent: u64,
    pub child: u64,
    pub namelen: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_notify_delete_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_notify_delete_out> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_notify_delete_out>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_notify_delete_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_notify_delete_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_notify_delete_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_delete_out),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).child) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_delete_out),
            "::",
            stringify!(child)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).namelen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_delete_out),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_delete_out),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_notify_store_out {
    pub nodeid: u64,
    pub offset: u64,
    pub size: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_notify_store_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_notify_store_out> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_notify_store_out>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_notify_store_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_notify_store_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_notify_store_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_store_out),
            "::",
            stringify!(nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_store_out),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_store_out),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_store_out),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_notify_retrieve_out {
    pub notify_unique: u64,
    pub nodeid: u64,
    pub offset: u64,
    pub size: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_notify_retrieve_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_notify_retrieve_out> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_notify_retrieve_out>(),
        32usize,
        concat!("Size of: ", stringify!(fuse_notify_retrieve_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_notify_retrieve_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_notify_retrieve_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).notify_unique) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_out),
            "::",
            stringify!(notify_unique)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_out),
            "::",
            stringify!(nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_out),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_out),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_out),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_notify_retrieve_in {
    pub dummy1: u64,
    pub offset: u64,
    pub size: u32,
    pub dummy2: u32,
    pub dummy3: u64,
    pub dummy4: u64,
}
#[test]
fn bindgen_test_layout_fuse_notify_retrieve_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_notify_retrieve_in> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_notify_retrieve_in>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_notify_retrieve_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_notify_retrieve_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_notify_retrieve_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_in),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_in),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_in),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy2) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_in),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy3) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_in),
            "::",
            stringify!(dummy3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummy4) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_notify_retrieve_in),
            "::",
            stringify!(dummy4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_lseek_in {
    pub fh: u64,
    pub offset: u64,
    pub whence: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_lseek_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_lseek_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_lseek_in>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_lseek_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_lseek_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_lseek_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lseek_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lseek_in),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).whence) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lseek_in),
            "::",
            stringify!(whence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lseek_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_lseek_out {
    pub offset: u64,
}
#[test]
fn bindgen_test_layout_fuse_lseek_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_lseek_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_lseek_out>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_lseek_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_lseek_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_lseek_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_lseek_out),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_copy_file_range_in {
    pub fh_in: u64,
    pub off_in: u64,
    pub nodeid_out: u64,
    pub fh_out: u64,
    pub off_out: u64,
    pub len: u64,
    pub flags: u64,
}
#[test]
fn bindgen_test_layout_fuse_copy_file_range_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_copy_file_range_in> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_copy_file_range_in>(),
        56usize,
        concat!("Size of: ", stringify!(fuse_copy_file_range_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_copy_file_range_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_copy_file_range_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh_in) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_copy_file_range_in),
            "::",
            stringify!(fh_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off_in) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_copy_file_range_in),
            "::",
            stringify!(off_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid_out) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_copy_file_range_in),
            "::",
            stringify!(nodeid_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh_out) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_copy_file_range_in),
            "::",
            stringify!(fh_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off_out) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_copy_file_range_in),
            "::",
            stringify!(off_out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_copy_file_range_in),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_copy_file_range_in),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_setupmapping_in {
    pub fh: u64,
    pub foffset: u64,
    pub len: u64,
    pub flags: u64,
    pub moffset: u64,
}
#[test]
fn bindgen_test_layout_fuse_setupmapping_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_setupmapping_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_setupmapping_in>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_setupmapping_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_setupmapping_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_setupmapping_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setupmapping_in),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foffset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setupmapping_in),
            "::",
            stringify!(foffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setupmapping_in),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setupmapping_in),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).moffset) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_setupmapping_in),
            "::",
            stringify!(moffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_removemapping_in {
    pub count: u32,
}
#[test]
fn bindgen_test_layout_fuse_removemapping_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_removemapping_in> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_removemapping_in>(),
        4usize,
        concat!("Size of: ", stringify!(fuse_removemapping_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_removemapping_in>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_removemapping_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_removemapping_in),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_removemapping_one {
    pub moffset: u64,
    pub len: u64,
}
#[test]
fn bindgen_test_layout_fuse_removemapping_one() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_removemapping_one> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_removemapping_one>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_removemapping_one))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_removemapping_one>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_removemapping_one))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).moffset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_removemapping_one),
            "::",
            stringify!(moffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_removemapping_one),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_syncfs_in {
    pub padding: u64,
}
#[test]
fn bindgen_test_layout_fuse_syncfs_in() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_syncfs_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_syncfs_in>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_syncfs_in))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_syncfs_in>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_syncfs_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_syncfs_in),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_secctx {
    pub size: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_secctx() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_secctx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_secctx>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_secctx))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_secctx>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_secctx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_secctx),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_secctx),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_secctx_header {
    pub size: u32,
    pub nr_secctx: u32,
}
#[test]
fn bindgen_test_layout_fuse_secctx_header() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_secctx_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_secctx_header>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_secctx_header))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_secctx_header>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_secctx_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_secctx_header),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_secctx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_secctx_header),
            "::",
            stringify!(nr_secctx)
        )
    );
}
#[doc = " struct fuse_ext_header - extension header\n @size: total size of this extension including this header\n @type: type of extension\n\n This is made compatible with fuse_secctx_header by using type values >\n FUSE_MAX_NR_SECCTX"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_ext_header {
    pub size: u32,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_fuse_ext_header() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_ext_header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_ext_header>(),
        8usize,
        concat!("Size of: ", stringify!(fuse_ext_header))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_ext_header>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_ext_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ext_header),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_ext_header),
            "::",
            stringify!(type_)
        )
    );
}
#[doc = " struct fuse_supp_groups - Supplementary group extension\n @nr_groups: number of supplementary groups\n @groups: flexible array of group IDs"]
#[repr(C)]
#[derive(Debug)]
pub struct fuse_supp_groups {
    pub nr_groups: u32,
    pub groups: __IncompleteArrayField<u32>,
}
#[test]
fn bindgen_test_layout_fuse_supp_groups() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_supp_groups> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_supp_groups>(),
        4usize,
        concat!("Size of: ", stringify!(fuse_supp_groups))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_supp_groups>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_supp_groups))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nr_groups) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_supp_groups),
            "::",
            stringify!(nr_groups)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).groups) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_supp_groups),
            "::",
            stringify!(groups)
        )
    );
}
