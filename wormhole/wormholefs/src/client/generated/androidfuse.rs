/* automatically generated by rust-bindgen 0.69.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const FUSE_ACTION_KEEP: u32 = 0;
pub const FUSE_ACTION_REMOVE: u32 = 1;
pub const FUSE_ACTION_REPLACE: u32 = 2;
pub const FUSE_MAX_IN_ARGS: u32 = 5;
pub const FUSE_MAX_OUT_ARGS: u32 = 3;
pub const FUSE_BPF_FORCE: u32 = 1;
pub const FUSE_BPF_OUT_ARGVAR: u32 = 64;
pub const FUSE_BPF_USER_FILTER: u32 = 1;
pub const FUSE_BPF_BACKING: u32 = 2;
pub const FUSE_BPF_POST_FILTER: u32 = 4;
pub const FUSE_OPCODE_FILTER: u32 = 65535;
pub const FUSE_PREFILTER: u32 = 65536;
pub const FUSE_POSTFILTER: u32 = 131072;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_int;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, Default)]
pub struct fuse_entry_bpf_out {
    pub backing_action: u64,
    pub backing_fd: u64,
    pub bpf_action: u64,
    pub bpf_fd: u64,
}
#[test]
fn bindgen_test_layout_fuse_entry_bpf_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_entry_bpf_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_entry_bpf_out>(),
        32usize,
        concat!("Size of: ", stringify!(fuse_entry_bpf_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_entry_bpf_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_entry_bpf_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backing_action) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_bpf_out),
            "::",
            stringify!(backing_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backing_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_bpf_out),
            "::",
            stringify!(backing_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bpf_action) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_bpf_out),
            "::",
            stringify!(bpf_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bpf_fd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_bpf_out),
            "::",
            stringify!(bpf_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_entry_bpf {
    pub out: fuse_entry_bpf_out,
    pub backing_file: *mut file,
    pub bpf_file: *mut file,
}
#[test]
fn bindgen_test_layout_fuse_entry_bpf() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_entry_bpf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_entry_bpf>(),
        48usize,
        concat!("Size of: ", stringify!(fuse_entry_bpf))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_entry_bpf>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_entry_bpf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_bpf),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backing_file) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_bpf),
            "::",
            stringify!(backing_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bpf_file) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_entry_bpf),
            "::",
            stringify!(bpf_file)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_read_out {
    pub offset: u64,
    pub again: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_fuse_read_out() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_read_out> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_read_out>(),
        16usize,
        concat!("Size of: ", stringify!(fuse_read_out))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_read_out>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_read_out))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_out),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).again) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_out),
            "::",
            stringify!(again)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_read_out),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_in_postfilter_header {
    pub len: u32,
    pub opcode: u32,
    pub unique: u64,
    pub nodeid: u64,
    pub uid: u32,
    pub gid: u32,
    pub pid: u32,
    pub error_in: u32,
}
#[test]
fn bindgen_test_layout_fuse_in_postfilter_header() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_in_postfilter_header> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_in_postfilter_header>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_in_postfilter_header))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_in_postfilter_header>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_in_postfilter_header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_postfilter_header),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_postfilter_header),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unique) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_postfilter_header),
            "::",
            stringify!(unique)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_postfilter_header),
            "::",
            stringify!(nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_postfilter_header),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_postfilter_header),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_postfilter_header),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_in) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_in_postfilter_header),
            "::",
            stringify!(error_in)
        )
    );
}
#[doc = " One input argument of a request"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_bpf_in_arg {
    pub size: u32,
    pub value: *const ::std::os::raw::c_void,
    pub end_offset: *const ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fuse_bpf_in_arg() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_bpf_in_arg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_bpf_in_arg>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_bpf_in_arg))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_bpf_in_arg>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_bpf_in_arg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_in_arg),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_in_arg),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_in_arg),
            "::",
            stringify!(end_offset)
        )
    );
}
#[doc = " One output argument of a request"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_bpf_arg {
    pub size: u32,
    pub value: *mut ::std::os::raw::c_void,
    pub end_offset: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_fuse_bpf_arg() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_bpf_arg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_bpf_arg>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_bpf_arg))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_bpf_arg>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_bpf_arg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_arg),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_arg),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_offset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_arg),
            "::",
            stringify!(end_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_bpf_args {
    pub nodeid: u64,
    pub opcode: u32,
    pub error_in: u32,
    pub in_numargs: u32,
    pub out_numargs: u32,
    pub flags: u32,
    pub in_args: [fuse_bpf_in_arg; 5usize],
    pub out_args: [fuse_bpf_arg; 3usize],
}
#[test]
fn bindgen_test_layout_fuse_bpf_args() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_bpf_args> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_bpf_args>(),
        224usize,
        concat!("Size of: ", stringify!(fuse_bpf_args))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_bpf_args>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_bpf_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodeid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_args),
            "::",
            stringify!(nodeid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_args),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error_in) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_args),
            "::",
            stringify!(error_in)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_numargs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_args),
            "::",
            stringify!(in_numargs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_numargs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_args),
            "::",
            stringify!(out_numargs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_args) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_args),
            "::",
            stringify!(in_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_args) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_bpf_args),
            "::",
            stringify!(out_args)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_prog {
    _unused: [u8; 0],
}
extern "C" {
    pub fn fuse_get_bpf_prog(file: *mut file) -> *mut bpf_prog;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file {
    pub _address: u8,
}
